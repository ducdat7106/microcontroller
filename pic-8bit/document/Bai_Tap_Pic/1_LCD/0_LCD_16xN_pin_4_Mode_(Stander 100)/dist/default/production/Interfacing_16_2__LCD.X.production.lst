

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sun Dec 05 22:31:30 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F877A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  0091                     	;# 
   100  0092                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0098                     	;# 
   104  0099                     	;# 
   105  009C                     	;# 
   106  009D                     	;# 
   107  009E                     	;# 
   108  009F                     	;# 
   109  010C                     	;# 
   110  010D                     	;# 
   111  010E                     	;# 
   112  010F                     	;# 
   113  018C                     	;# 
   114  018D                     	;# 
   115  0000                     	;# 
   116  0001                     	;# 
   117  0002                     	;# 
   118  0003                     	;# 
   119  0004                     	;# 
   120  0005                     	;# 
   121  0006                     	;# 
   122  0007                     	;# 
   123  0008                     	;# 
   124  0009                     	;# 
   125  000A                     	;# 
   126  000B                     	;# 
   127  000C                     	;# 
   128  000D                     	;# 
   129  000E                     	;# 
   130  000E                     	;# 
   131  000F                     	;# 
   132  0010                     	;# 
   133  0011                     	;# 
   134  0012                     	;# 
   135  0013                     	;# 
   136  0014                     	;# 
   137  0015                     	;# 
   138  0015                     	;# 
   139  0016                     	;# 
   140  0017                     	;# 
   141  0018                     	;# 
   142  0019                     	;# 
   143  001A                     	;# 
   144  001B                     	;# 
   145  001B                     	;# 
   146  001C                     	;# 
   147  001D                     	;# 
   148  001E                     	;# 
   149  001F                     	;# 
   150  0081                     	;# 
   151  0085                     	;# 
   152  0086                     	;# 
   153  0087                     	;# 
   154  0088                     	;# 
   155  0089                     	;# 
   156  008C                     	;# 
   157  008D                     	;# 
   158  008E                     	;# 
   159  0091                     	;# 
   160  0092                     	;# 
   161  0093                     	;# 
   162  0094                     	;# 
   163  0098                     	;# 
   164  0099                     	;# 
   165  009C                     	;# 
   166  009D                     	;# 
   167  009E                     	;# 
   168  009F                     	;# 
   169  010C                     	;# 
   170  010D                     	;# 
   171  010E                     	;# 
   172  010F                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  0088                     	;# 
   215  0089                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0093                     	;# 
   222  0094                     	;# 
   223  0098                     	;# 
   224  0099                     	;# 
   225  009C                     	;# 
   226  009D                     	;# 
   227  009E                     	;# 
   228  009F                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  010F                     	;# 
   233  018C                     	;# 
   234  018D                     	;# 
   235  0034                     _RB4	set	52
   236  0035                     _RB5	set	53
   237  0033                     _RB3	set	51
   238  0032                     _RB2	set	50
   239  0031                     _RB1	set	49
   240  0030                     _RB0	set	48
   241  0086                     _TRISB	set	134
   242  0434                     _TRISB4	set	1076
   243  0435                     _TRISB5	set	1077
   244                           
   245                           	psect	strings
   246  0003                     __pstrings:
   247  0003                     stringtab:
   248  0003                     __stringtab:
   249  0003                     stringcode:	
   250                           ;	String table - string pointers are 1 byte each
   251                           
   252  0003                     stringdir:
   253  0003  3000               	movlw	high stringdir
   254  0004  008A               	movwf	10
   255  0005  0804               	movf	4,w
   256  0006  0A84               	incf	4,f
   257  0007  0782               	addwf	2,f
   258  0008                     __stringbase:
   259  0008  3400               	retlw	0
   260  0009                     __end_of__stringtab:
   261  0009                     STR_1:
   262  0009  3469               	retlw	105	;'i'
   263  000A  3461               	retlw	97	;'a'
   264  000B  3400               	retlw	0
   265  000C  3400               	retlw	0
   266                           
   267                           	psect	cinit
   268  07FC                     start_initialization:	
   269                           ; #config settings
   270                           
   271  07FC                     __initialization:
   272  07FC                     end_of_initialization:	
   273                           ;End of C runtime variable initialization code
   274                           
   275  07FC                     __end_of__initialization:
   276  07FC  0183               	clrf	3
   277  07FD  120A  118A  2ED1   	ljmp	_main	;jump to C main() function
   278                           
   279                           	psect	cstackCOMMON
   280  0070                     __pcstackCOMMON:
   281  0070                     ?_LCD_Init:
   282  0070                     ?_LCD_Clear:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_LCD_Write_String:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ?_main:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_LCD_DATA:	
   292                           ; 1 bytes @ 0x0
   293                           
   294  0070                     ??_LCD_DATA:	
   295                           ; 1 bytes @ 0x0
   296                           
   297  0070                     ?_LCD_CMD:	
   298                           ; 1 bytes @ 0x0
   299                           
   300  0070                     ?_LCD_Write_Char:	
   301                           ; 1 bytes @ 0x0
   302                           
   303  0070                     ?___lwdiv:	
   304                           ; 1 bytes @ 0x0
   305                           
   306  0070                     ?___lwmod:	
   307                           ; 2 bytes @ 0x0
   308                           
   309  0070                     LCD_DATA@Data:	
   310                           ; 2 bytes @ 0x0
   311                           
   312  0070                     ___lwdiv@divisor:	
   313                           ; 1 bytes @ 0x0
   314                           
   315  0070                     ___lwmod@divisor:	
   316                           ; 2 bytes @ 0x0
   317                           
   318                           
   319                           ; 2 bytes @ 0x0
   320  0070                     	ds	1
   321  0071                     ??_LCD_CMD:
   322  0071                     ??_LCD_Write_Char:	
   323                           ; 1 bytes @ 0x1
   324                           
   325                           
   326                           ; 1 bytes @ 0x1
   327  0071                     	ds	1
   328  0072                     ___lwdiv@dividend:
   329  0072                     ___lwmod@dividend:	
   330                           ; 2 bytes @ 0x2
   331                           
   332                           
   333                           ; 2 bytes @ 0x2
   334  0072                     	ds	1
   335  0073                     LCD_CMD@CMD:
   336  0073                     LCD_Write_Char@Low4:	
   337                           ; 1 bytes @ 0x3
   338                           
   339                           
   340                           ; 1 bytes @ 0x3
   341  0073                     	ds	1
   342  0074                     ??_LCD_Init:
   343  0074                     ??_LCD_Clear:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ?_LCD_Set_Cursor:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ??___lwdiv:	
   350                           ; 1 bytes @ 0x4
   351                           
   352  0074                     ??___lwmod:	
   353                           ; 1 bytes @ 0x4
   354                           
   355  0074                     LCD_Set_Cursor@c:	
   356                           ; 1 bytes @ 0x4
   357                           
   358  0074                     LCD_Write_Char@High4:	
   359                           ; 1 bytes @ 0x4
   360                           
   361  0074                     ___lwmod@counter:	
   362                           ; 1 bytes @ 0x4
   363                           
   364  0074                     ___lwdiv@quotient:	
   365                           ; 1 bytes @ 0x4
   366                           
   367                           
   368                           ; 2 bytes @ 0x4
   369  0074                     	ds	1
   370  0075                     ??_LCD_Set_Cursor:
   371  0075                     LCD_Write_Char@Data:	
   372                           ; 1 bytes @ 0x5
   373                           
   374                           
   375                           ; 1 bytes @ 0x5
   376  0075                     	ds	1
   377  0076                     ??_LCD_Write_String:
   378  0076                     LCD_Set_Cursor@r:	
   379                           ; 1 bytes @ 0x6
   380                           
   381  0076                     ___lwdiv@counter:	
   382                           ; 1 bytes @ 0x6
   383                           
   384  0076                     LCD_Write_String@i:	
   385                           ; 1 bytes @ 0x6
   386                           
   387                           
   388                           ; 2 bytes @ 0x6
   389  0076                     	ds	1
   390  0077                     ?_LCD_Write_Number:
   391  0077                     LCD_Set_Cursor@Low4:	
   392                           ; 1 bytes @ 0x7
   393                           
   394  0077                     LCD_Write_Number@number:	
   395                           ; 1 bytes @ 0x7
   396                           
   397                           
   398                           ; 2 bytes @ 0x7
   399  0077                     	ds	1
   400  0078                     LCD_Set_Cursor@High4:
   401  0078                     LCD_Write_String@str:	
   402                           ; 1 bytes @ 0x8
   403                           
   404                           
   405                           ; 1 bytes @ 0x8
   406  0078                     	ds	1
   407  0079                     ??_LCD_Write_Number:
   408  0079                     LCD_Set_Cursor@Temp:	
   409                           ; 1 bytes @ 0x9
   410                           
   411                           
   412                           ; 1 bytes @ 0x9
   413  0079                     	ds	1
   414  007A                     ??_main:
   415                           
   416                           ; 1 bytes @ 0xA
   417  007A                     	ds	3
   418                           
   419                           	psect	cstackBANK0
   420  0020                     __pcstackBANK0:
   421  0020                     LCD_Write_Number@num:
   422                           
   423                           ; 20 bytes @ 0x0
   424  0020                     	ds	20
   425  0034                     LCD_Write_Number@c:
   426                           
   427                           ; 1 bytes @ 0x14
   428  0034                     	ds	1
   429  0035                     LCD_Write_Number@k:
   430                           
   431                           ; 2 bytes @ 0x15
   432  0035                     	ds	2
   433  0037                     LCD_Write_Number@p:
   434                           
   435                           ; 2 bytes @ 0x17
   436  0037                     	ds	2
   437                           
   438                           	psect	maintext
   439  06D1                     __pmaintext:	
   440 ;;
   441 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   442 ;;
   443 ;; *************** function _main *****************
   444 ;; Defined at:
   445 ;;		line 13 in file "main.c"
   446 ;; Parameters:    Size  Location     Type
   447 ;;		None
   448 ;; Auto vars:     Size  Location     Type
   449 ;;		None
   450 ;; Return value:  Size  Location     Type
   451 ;;                  1    wreg      void 
   452 ;; Registers used:
   453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   454 ;; Tracked objects:
   455 ;;		On entry : B00/0
   456 ;;		On exit  : 0/0
   457 ;;		Unchanged: 0/0
   458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   459 ;;      Params:         0       0       0       0       0
   460 ;;      Locals:         0       0       0       0       0
   461 ;;      Temps:          3       0       0       0       0
   462 ;;      Totals:         3       0       0       0       0
   463 ;;Total ram usage:        3 bytes
   464 ;; Hardware stack levels required when called:    3
   465 ;; This function calls:
   466 ;;		_LCD_Clear
   467 ;;		_LCD_Init
   468 ;;		_LCD_Set_Cursor
   469 ;;		_LCD_Write_Number
   470 ;;		_LCD_Write_String
   471 ;; This function is called by:
   472 ;;		Startup code after reset
   473 ;; This function uses a non-reentrant model
   474 ;;
   475                           
   476                           
   477                           ;psect for function _main
   478  06D1                     _main:
   479  06D1                     l1068:	
   480                           ;incstack = 0
   481                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   482                           
   483                           
   484                           ;main.c: 15:   LCD_Init();
   485  06D1  120A  118A  272D  120A  118A  	fcall	_LCD_Init
   486                           
   487                           ;main.c: 16:   LCD_Clear();
   488  06D6  120A  118A  2541  120A  118A  	fcall	_LCD_Clear
   489  06DB                     l1070:
   490                           
   491                           ;main.c: 17:   LCD_Set_Cursor(1,1);
   492  06DB  01F4               	clrf	LCD_Set_Cursor@c
   493  06DC  0AF4               	incf	LCD_Set_Cursor@c,f
   494  06DD  3001               	movlw	1
   495  06DE  120A  118A  262D  120A  118A  	fcall	_LCD_Set_Cursor
   496  06E3                     l1072:
   497                           
   498                           ;main.c: 22:   LCD_Set_Cursor(2,1);
   499  06E3  01F4               	clrf	LCD_Set_Cursor@c
   500  06E4  0AF4               	incf	LCD_Set_Cursor@c,f
   501  06E5  3002               	movlw	2
   502  06E6  120A  118A  262D  120A  118A  	fcall	_LCD_Set_Cursor
   503  06EB                     l1074:
   504                           
   505                           ;main.c: 23:   LCD_Write_Number(12345);
   506  06EB  3039               	movlw	57
   507  06EC  00F7               	movwf	LCD_Write_Number@number
   508  06ED  3030               	movlw	48
   509  06EE  00F8               	movwf	LCD_Write_Number@number+1
   510  06EF  120A  118A  2794  120A  118A  	fcall	_LCD_Write_Number
   511  06F4                     l1076:
   512                           
   513                           ;main.c: 24:   _delay((unsigned long)((1000)*(20000000/4000.0)));
   514  06F4  301A               	movlw	26
   515  06F5  00FC               	movwf	??_main+2
   516  06F6  305E               	movlw	94
   517  06F7  00FB               	movwf	??_main+1
   518  06F8  306E               	movlw	110
   519  06F9  00FA               	movwf	??_main
   520  06FA                     u517:
   521  06FA  0BFA               	decfsz	??_main,f
   522  06FB  2EFA               	goto	u517
   523  06FC  0BFB               	decfsz	??_main+1,f
   524  06FD  2EFA               	goto	u517
   525  06FE  0BFC               	decfsz	??_main+2,f
   526  06FF  2EFA               	goto	u517
   527  0700  0000               	nop
   528  0701                     l1078:
   529                           
   530                           ;main.c: 25:   LCD_Clear();
   531  0701  120A  118A  2541  120A  118A  	fcall	_LCD_Clear
   532  0706                     l1080:
   533                           
   534                           ;main.c: 26:   LCD_Set_Cursor(1,10);
   535  0706  300A               	movlw	10
   536  0707  00FF               	movwf	btemp+1
   537  0708  087F               	movf	btemp+1,w
   538  0709  00F4               	movwf	LCD_Set_Cursor@c
   539  070A  3001               	movlw	1
   540  070B  120A  118A  262D  120A  118A  	fcall	_LCD_Set_Cursor
   541  0710                     l1082:
   542                           
   543                           ;main.c: 27:   LCD_Write_String("ia\0");
   544  0710  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   545  0711  120A  118A  258A  120A  118A  	fcall	_LCD_Write_String
   546  0716                     l1084:
   547                           
   548                           ;main.c: 28:   LCD_Set_Cursor(2,5);
   549  0716  3005               	movlw	5
   550  0717  00FF               	movwf	btemp+1
   551  0718  087F               	movf	btemp+1,w
   552  0719  00F4               	movwf	LCD_Set_Cursor@c
   553  071A  3002               	movlw	2
   554  071B  120A  118A  262D  120A  118A  	fcall	_LCD_Set_Cursor
   555  0720                     l1086:
   556                           
   557                           ;main.c: 29:   LCD_Write_Number(12345);
   558  0720  3039               	movlw	57
   559  0721  00F7               	movwf	LCD_Write_Number@number
   560  0722  3030               	movlw	48
   561  0723  00F8               	movwf	LCD_Write_Number@number+1
   562  0724  120A  118A  2794  120A  118A  	fcall	_LCD_Write_Number
   563  0729                     l17:	
   564                           ;main.c: 34:   while(1)
   565                           
   566  0729                     l18:	
   567                           ;main.c: 35:   {;main.c: 48:   }
   568                           
   569  0729  2F29               	goto	l17
   570  072A  120A  118A  2800   	ljmp	start
   571  072D                     __end_of_main:
   572                           
   573                           	psect	text1
   574  058A                     __ptext1:	
   575 ;; *************** function _LCD_Write_String *****************
   576 ;; Defined at:
   577 ;;		line 100 in file "lcd.c"
   578 ;; Parameters:    Size  Location     Type
   579 ;;  str             1    wreg     PTR unsigned char 
   580 ;;		 -> STR_1(4), 
   581 ;; Auto vars:     Size  Location     Type
   582 ;;  str             1    8[COMMON] PTR unsigned char 
   583 ;;		 -> STR_1(4), 
   584 ;;  i               2    6[COMMON] int 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  1    wreg      void 
   587 ;; Registers used:
   588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   594 ;;      Params:         0       0       0       0       0
   595 ;;      Locals:         3       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0
   597 ;;      Totals:         3       0       0       0       0
   598 ;;Total ram usage:        3 bytes
   599 ;; Hardware stack levels used:    1
   600 ;; Hardware stack levels required when called:    2
   601 ;; This function calls:
   602 ;;		_LCD_Write_Char
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608                           
   609                           ;psect for function _LCD_Write_String
   610  058A                     _LCD_Write_String:
   611                           
   612                           ;incstack = 0
   613                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   614                           ;LCD_Write_String@str stored from wreg
   615  058A  00F8               	movwf	LCD_Write_String@str
   616  058B                     l1060:
   617                           
   618                           ;lcd.c: 100: void LCD_Write_String(char *str);lcd.c: 101: {;lcd.c: 102:   int i;;lcd.c: 
      +                          103:   for(i=0;str[i]!='\0';i++)
   619  058B  01F6               	clrf	LCD_Write_String@i
   620  058C  01F7               	clrf	LCD_Write_String@i+1
   621  058D  2DA1               	goto	l1066
   622  058E                     l1062:
   623                           
   624                           ;lcd.c: 104:     LCD_Write_Char(str[i]);
   625  058E  0876               	movf	LCD_Write_String@i,w
   626  058F  0778               	addwf	LCD_Write_String@str,w
   627  0590  0084               	movwf	4
   628  0591  120A  118A  2003  120A  118A  	fcall	stringdir
   629  0596  120A  118A  267E  120A  118A  	fcall	_LCD_Write_Char
   630  059B                     l1064:
   631  059B  3001               	movlw	1
   632  059C  07F6               	addwf	LCD_Write_String@i,f
   633  059D  1803               	skipnc
   634  059E  0AF7               	incf	LCD_Write_String@i+1,f
   635  059F  3000               	movlw	0
   636  05A0  07F7               	addwf	LCD_Write_String@i+1,f
   637  05A1                     l1066:
   638  05A1  0876               	movf	LCD_Write_String@i,w
   639  05A2  0778               	addwf	LCD_Write_String@str,w
   640  05A3  0084               	movwf	4
   641  05A4  120A  118A  2003  120A  118A  	fcall	stringdir
   642  05A9  3A00               	xorlw	0
   643  05AA  1D03               	skipz
   644  05AB  2DAD               	goto	u501
   645  05AC  2DAE               	goto	u500
   646  05AD                     u501:
   647  05AD  2D8E               	goto	l1062
   648  05AE                     u500:
   649  05AE                     l74:
   650  05AE  0008               	return
   651  05AF                     __end_of_LCD_Write_String:
   652                           
   653                           	psect	text2
   654  0794                     __ptext2:	
   655 ;; *************** function _LCD_Write_Number *****************
   656 ;; Defined at:
   657 ;;		line 117 in file "lcd.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;  number          2    7[COMMON] unsigned int 
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  num            20    0[BANK0 ] int [10]
   662 ;;  p               2   23[BANK0 ] int 
   663 ;;  k               2   21[BANK0 ] unsigned int 
   664 ;;  c               1   20[BANK0 ] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      void 
   667 ;; Registers used:
   668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   674 ;;      Params:         2       0       0       0       0
   675 ;;      Locals:         0      25       0       0       0
   676 ;;      Temps:          1       0       0       0       0
   677 ;;      Totals:         3      25       0       0       0
   678 ;;Total ram usage:       28 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    2
   681 ;; This function calls:
   682 ;;		_LCD_Write_Char
   683 ;;		___lwdiv
   684 ;;		___lwmod
   685 ;; This function is called by:
   686 ;;		_main
   687 ;; This function uses a non-reentrant model
   688 ;;
   689                           
   690                           
   691                           ;psect for function _LCD_Write_Number
   692  0794                     _LCD_Write_Number:
   693  0794                     l1036:	
   694                           ;incstack = 0
   695                           ; Regs used in _LCD_Write_Number: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   696                           
   697                           
   698                           ;lcd.c: 117: void LCD_Write_Number(unsigned int number);lcd.c: 118: {;lcd.c: 119:     in
      +                          t num[10];;lcd.c: 120:     unsigned char c;;lcd.c: 121:     int p;;lcd.c: 122:     unsig
      +                          ned int k=0;
   699  0794  1283               	bcf	3,5	;RP0=0, select bank0
   700  0795  1303               	bcf	3,6	;RP1=0, select bank0
   701  0796  01B5               	clrf	LCD_Write_Number@k
   702  0797  01B6               	clrf	LCD_Write_Number@k+1
   703                           
   704                           ;lcd.c: 124:     while(number>0)
   705  0798  2FCC               	goto	l1044
   706  0799                     l1038:
   707                           
   708                           ;lcd.c: 125:     {;lcd.c: 126:         num[k]=number%10;
   709  0799  300A               	movlw	10
   710  079A  00F0               	movwf	___lwmod@divisor
   711  079B  3000               	movlw	0
   712  079C  00F1               	movwf	___lwmod@divisor+1
   713  079D  0878               	movf	LCD_Write_Number@number+1,w
   714  079E  00F3               	movwf	___lwmod@dividend+1
   715  079F  0877               	movf	LCD_Write_Number@number,w
   716  07A0  00F2               	movwf	___lwmod@dividend
   717  07A1  120A  118A  25AF  120A  118A  	fcall	___lwmod
   718  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   719  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   720  07A8  0835               	movf	LCD_Write_Number@k,w
   721  07A9  00F9               	movwf	??_LCD_Write_Number
   722  07AA  0779               	addwf	??_LCD_Write_Number,w
   723  07AB  3E20               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
   724  07AC  0084               	movwf	4
   725  07AD  0870               	movf	?___lwmod,w
   726  07AE  1383               	bcf	3,7	;select IRP bank0
   727  07AF  0080               	movwf	0
   728  07B0  0A84               	incf	4,f
   729  07B1  0871               	movf	?___lwmod+1,w
   730  07B2  0080               	movwf	0
   731  07B3                     l1040:
   732                           
   733                           ;lcd.c: 127:         number = number/10;
   734  07B3  300A               	movlw	10
   735  07B4  00F0               	movwf	___lwdiv@divisor
   736  07B5  3000               	movlw	0
   737  07B6  00F1               	movwf	___lwdiv@divisor+1
   738  07B7  0878               	movf	LCD_Write_Number@number+1,w
   739  07B8  00F3               	movwf	___lwdiv@dividend+1
   740  07B9  0877               	movf	LCD_Write_Number@number,w
   741  07BA  00F2               	movwf	___lwdiv@dividend
   742  07BB  120A  118A  25E9  120A  118A  	fcall	___lwdiv
   743  07C0  0871               	movf	?___lwdiv+1,w
   744  07C1  00F8               	movwf	LCD_Write_Number@number+1
   745  07C2  0870               	movf	?___lwdiv,w
   746  07C3  00F7               	movwf	LCD_Write_Number@number
   747  07C4                     l1042:
   748                           
   749                           ;lcd.c: 128:         k++;
   750  07C4  3001               	movlw	1
   751  07C5  1283               	bcf	3,5	;RP0=0, select bank0
   752  07C6  1303               	bcf	3,6	;RP1=0, select bank0
   753  07C7  07B5               	addwf	LCD_Write_Number@k,f
   754  07C8  1803               	skipnc
   755  07C9  0AB6               	incf	LCD_Write_Number@k+1,f
   756  07CA  3000               	movlw	0
   757  07CB  07B6               	addwf	LCD_Write_Number@k+1,f
   758  07CC                     l1044:
   759                           
   760                           ;lcd.c: 124:     while(number>0)
   761  07CC  0877               	movf	LCD_Write_Number@number,w
   762  07CD  0478               	iorwf	LCD_Write_Number@number+1,w
   763  07CE  1D03               	btfss	3,2
   764  07CF  2FD1               	goto	u481
   765  07D0  2FD2               	goto	u480
   766  07D1                     u481:
   767  07D1  2F99               	goto	l1038
   768  07D2                     u480:
   769  07D2                     l1046:
   770                           
   771                           ;lcd.c: 131:     k--;
   772  07D2  3001               	movlw	1
   773  07D3  02B5               	subwf	LCD_Write_Number@k,f
   774  07D4  3000               	movlw	0
   775  07D5  1C03               	skipc
   776  07D6  03B6               	decf	LCD_Write_Number@k+1,f
   777  07D7  02B6               	subwf	LCD_Write_Number@k+1,f
   778                           
   779                           ;lcd.c: 132:     for(p=k; p>=0; p--)
   780  07D8  0836               	movf	LCD_Write_Number@k+1,w
   781  07D9  00B8               	movwf	LCD_Write_Number@p+1
   782  07DA  0835               	movf	LCD_Write_Number@k,w
   783  07DB  00B7               	movwf	LCD_Write_Number@p
   784  07DC                     l1048:
   785  07DC  1FB8               	btfss	LCD_Write_Number@p+1,7
   786  07DD  2FDF               	goto	u491
   787  07DE  2FE0               	goto	u490
   788  07DF                     u491:
   789  07DF  2FE1               	goto	l1052
   790  07E0                     u490:
   791  07E0  2FFB               	goto	l88
   792  07E1                     l1052:
   793                           
   794                           ;lcd.c: 133:     {;lcd.c: 134:         c=num[p]+48;
   795  07E1  0837               	movf	LCD_Write_Number@p,w
   796  07E2  00F9               	movwf	??_LCD_Write_Number
   797  07E3  0779               	addwf	??_LCD_Write_Number,w
   798  07E4  3E20               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
   799  07E5  0084               	movwf	4
   800  07E6  1383               	bcf	3,7	;select IRP bank0
   801  07E7  0800               	movf	0,w
   802  07E8  3E30               	addlw	48
   803  07E9  00FF               	movwf	btemp+1
   804  07EA  087F               	movf	btemp+1,w
   805  07EB  00B4               	movwf	LCD_Write_Number@c
   806  07EC                     l1054:
   807                           
   808                           ;lcd.c: 135:         LCD_Write_Char(c);
   809  07EC  0834               	movf	LCD_Write_Number@c,w
   810  07ED  120A  118A  267E  120A  118A  	fcall	_LCD_Write_Char
   811  07F2                     l1056:
   812                           
   813                           ;lcd.c: 136:     }
   814  07F2  30FF               	movlw	255
   815  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   816  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   817  07F5  07B7               	addwf	LCD_Write_Number@p,f
   818  07F6  1803               	skipnc
   819  07F7  0AB8               	incf	LCD_Write_Number@p+1,f
   820  07F8  30FF               	movlw	255
   821  07F9  07B8               	addwf	LCD_Write_Number@p+1,f
   822  07FA  2FDC               	goto	l1048
   823  07FB                     l88:
   824  07FB  0008               	return
   825  07FC                     __end_of_LCD_Write_Number:
   826                           
   827                           	psect	text3
   828  05AF                     __ptext3:	
   829 ;; *************** function ___lwmod *****************
   830 ;; Defined at:
   831 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwmod.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  divisor         2    0[COMMON] unsigned int 
   834 ;;  dividend        2    2[COMMON] unsigned int 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  counter         1    4[COMMON] unsigned char 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  2    0[COMMON] unsigned int 
   839 ;; Registers used:
   840 ;;		wreg, status,2, status,0, btemp+1
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   846 ;;      Params:         4       0       0       0       0
   847 ;;      Locals:         1       0       0       0       0
   848 ;;      Temps:          0       0       0       0       0
   849 ;;      Totals:         5       0       0       0       0
   850 ;;Total ram usage:        5 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; This function calls:
   853 ;;		Nothing
   854 ;; This function is called by:
   855 ;;		_LCD_Write_Number
   856 ;; This function uses a non-reentrant model
   857 ;;
   858                           
   859                           
   860                           ;psect for function ___lwmod
   861  05AF                     ___lwmod:
   862  05AF                     l956:	
   863                           ;incstack = 0
   864                           ; Regs used in ___lwmod: [wreg+status,2+status,0+btemp+1]
   865                           
   866  05AF  0870               	movf	___lwmod@divisor,w
   867  05B0  0471               	iorwf	___lwmod@divisor+1,w
   868  05B1  1903               	btfsc	3,2
   869  05B2  2DB4               	goto	u381
   870  05B3  2DB5               	goto	u380
   871  05B4                     u381:
   872  05B4  2DE4               	goto	l974
   873  05B5                     u380:
   874  05B5                     l958:
   875  05B5  01F4               	clrf	___lwmod@counter
   876  05B6  0AF4               	incf	___lwmod@counter,f
   877  05B7  2DC3               	goto	l964
   878  05B8                     l960:
   879  05B8  3001               	movlw	1
   880  05B9                     u395:
   881  05B9  1003               	clrc
   882  05BA  0DF0               	rlf	___lwmod@divisor,f
   883  05BB  0DF1               	rlf	___lwmod@divisor+1,f
   884  05BC  3EFF               	addlw	-1
   885  05BD  1D03               	skipz
   886  05BE  2DB9               	goto	u395
   887  05BF                     l962:
   888  05BF  3001               	movlw	1
   889  05C0  00FF               	movwf	btemp+1
   890  05C1  087F               	movf	btemp+1,w
   891  05C2  07F4               	addwf	___lwmod@counter,f
   892  05C3                     l964:
   893  05C3  1FF1               	btfss	___lwmod@divisor+1,7
   894  05C4  2DC6               	goto	u401
   895  05C5  2DC7               	goto	u400
   896  05C6                     u401:
   897  05C6  2DB8               	goto	l960
   898  05C7                     u400:
   899  05C7                     l966:
   900  05C7  0871               	movf	___lwmod@divisor+1,w
   901  05C8  0273               	subwf	___lwmod@dividend+1,w
   902  05C9  1D03               	skipz
   903  05CA  2DCD               	goto	u415
   904  05CB  0870               	movf	___lwmod@divisor,w
   905  05CC  0272               	subwf	___lwmod@dividend,w
   906  05CD                     u415:
   907  05CD  1C03               	skipc
   908  05CE  2DD0               	goto	u411
   909  05CF  2DD1               	goto	u410
   910  05D0                     u411:
   911  05D0  2DD7               	goto	l970
   912  05D1                     u410:
   913  05D1                     l968:
   914  05D1  0870               	movf	___lwmod@divisor,w
   915  05D2  02F2               	subwf	___lwmod@dividend,f
   916  05D3  0871               	movf	___lwmod@divisor+1,w
   917  05D4  1C03               	skipc
   918  05D5  03F3               	decf	___lwmod@dividend+1,f
   919  05D6  02F3               	subwf	___lwmod@dividend+1,f
   920  05D7                     l970:
   921  05D7  3001               	movlw	1
   922  05D8                     u425:
   923  05D8  1003               	clrc
   924  05D9  0CF1               	rrf	___lwmod@divisor+1,f
   925  05DA  0CF0               	rrf	___lwmod@divisor,f
   926  05DB  3EFF               	addlw	-1
   927  05DC  1D03               	skipz
   928  05DD  2DD8               	goto	u425
   929  05DE                     l972:
   930  05DE  3001               	movlw	1
   931  05DF  02F4               	subwf	___lwmod@counter,f
   932  05E0  1D03               	btfss	3,2
   933  05E1  2DE3               	goto	u431
   934  05E2  2DE4               	goto	u430
   935  05E3                     u431:
   936  05E3  2DC7               	goto	l966
   937  05E4                     u430:
   938  05E4                     l974:
   939  05E4  0873               	movf	___lwmod@dividend+1,w
   940  05E5  00F1               	movwf	?___lwmod+1
   941  05E6  0872               	movf	___lwmod@dividend,w
   942  05E7  00F0               	movwf	?___lwmod
   943  05E8                     l456:
   944  05E8  0008               	return
   945  05E9                     __end_of___lwmod:
   946                           
   947                           	psect	text4
   948  05E9                     __ptext4:	
   949 ;; *************** function ___lwdiv *****************
   950 ;; Defined at:
   951 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\lwdiv.c"
   952 ;; Parameters:    Size  Location     Type
   953 ;;  divisor         2    0[COMMON] unsigned int 
   954 ;;  dividend        2    2[COMMON] unsigned int 
   955 ;; Auto vars:     Size  Location     Type
   956 ;;  quotient        2    4[COMMON] unsigned int 
   957 ;;  counter         1    6[COMMON] unsigned char 
   958 ;; Return value:  Size  Location     Type
   959 ;;                  2    0[COMMON] unsigned int 
   960 ;; Registers used:
   961 ;;		wreg, status,2, status,0, btemp+1
   962 ;; Tracked objects:
   963 ;;		On entry : 0/0
   964 ;;		On exit  : 0/0
   965 ;;		Unchanged: 0/0
   966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   967 ;;      Params:         4       0       0       0       0
   968 ;;      Locals:         3       0       0       0       0
   969 ;;      Temps:          0       0       0       0       0
   970 ;;      Totals:         7       0       0       0       0
   971 ;;Total ram usage:        7 bytes
   972 ;; Hardware stack levels used:    1
   973 ;; This function calls:
   974 ;;		Nothing
   975 ;; This function is called by:
   976 ;;		_LCD_Write_Number
   977 ;; This function uses a non-reentrant model
   978 ;;
   979                           
   980                           
   981                           ;psect for function ___lwdiv
   982  05E9                     ___lwdiv:
   983  05E9                     l930:	
   984                           ;incstack = 0
   985                           ; Regs used in ___lwdiv: [wreg+status,2+status,0+btemp+1]
   986                           
   987  05E9  01F4               	clrf	___lwdiv@quotient
   988  05EA  01F5               	clrf	___lwdiv@quotient+1
   989  05EB                     l932:
   990  05EB  0870               	movf	___lwdiv@divisor,w
   991  05EC  0471               	iorwf	___lwdiv@divisor+1,w
   992  05ED  1903               	btfsc	3,2
   993  05EE  2DF0               	goto	u311
   994  05EF  2DF1               	goto	u310
   995  05F0                     u311:
   996  05F0  2E28               	goto	l952
   997  05F1                     u310:
   998  05F1                     l934:
   999  05F1  01F6               	clrf	___lwdiv@counter
  1000  05F2  0AF6               	incf	___lwdiv@counter,f
  1001  05F3  2DFF               	goto	l940
  1002  05F4                     l936:
  1003  05F4  3001               	movlw	1
  1004  05F5                     u325:
  1005  05F5  1003               	clrc
  1006  05F6  0DF0               	rlf	___lwdiv@divisor,f
  1007  05F7  0DF1               	rlf	___lwdiv@divisor+1,f
  1008  05F8  3EFF               	addlw	-1
  1009  05F9  1D03               	skipz
  1010  05FA  2DF5               	goto	u325
  1011  05FB                     l938:
  1012  05FB  3001               	movlw	1
  1013  05FC  00FF               	movwf	btemp+1
  1014  05FD  087F               	movf	btemp+1,w
  1015  05FE  07F6               	addwf	___lwdiv@counter,f
  1016  05FF                     l940:
  1017  05FF  1FF1               	btfss	___lwdiv@divisor+1,7
  1018  0600  2E02               	goto	u331
  1019  0601  2E03               	goto	u330
  1020  0602                     u331:
  1021  0602  2DF4               	goto	l936
  1022  0603                     u330:
  1023  0603                     l942:
  1024  0603  3001               	movlw	1
  1025  0604                     u345:
  1026  0604  1003               	clrc
  1027  0605  0DF4               	rlf	___lwdiv@quotient,f
  1028  0606  0DF5               	rlf	___lwdiv@quotient+1,f
  1029  0607  3EFF               	addlw	-1
  1030  0608  1D03               	skipz
  1031  0609  2E04               	goto	u345
  1032  060A  0871               	movf	___lwdiv@divisor+1,w
  1033  060B  0273               	subwf	___lwdiv@dividend+1,w
  1034  060C  1D03               	skipz
  1035  060D  2E10               	goto	u355
  1036  060E  0870               	movf	___lwdiv@divisor,w
  1037  060F  0272               	subwf	___lwdiv@dividend,w
  1038  0610                     u355:
  1039  0610  1C03               	skipc
  1040  0611  2E13               	goto	u351
  1041  0612  2E14               	goto	u350
  1042  0613                     u351:
  1043  0613  2E1B               	goto	l948
  1044  0614                     u350:
  1045  0614                     l944:
  1046  0614  0870               	movf	___lwdiv@divisor,w
  1047  0615  02F2               	subwf	___lwdiv@dividend,f
  1048  0616  0871               	movf	___lwdiv@divisor+1,w
  1049  0617  1C03               	skipc
  1050  0618  03F3               	decf	___lwdiv@dividend+1,f
  1051  0619  02F3               	subwf	___lwdiv@dividend+1,f
  1052  061A                     l946:
  1053  061A  1474               	bsf	___lwdiv@quotient,0
  1054  061B                     l948:
  1055  061B  3001               	movlw	1
  1056  061C                     u365:
  1057  061C  1003               	clrc
  1058  061D  0CF1               	rrf	___lwdiv@divisor+1,f
  1059  061E  0CF0               	rrf	___lwdiv@divisor,f
  1060  061F  3EFF               	addlw	-1
  1061  0620  1D03               	skipz
  1062  0621  2E1C               	goto	u365
  1063  0622                     l950:
  1064  0622  3001               	movlw	1
  1065  0623  02F6               	subwf	___lwdiv@counter,f
  1066  0624  1D03               	btfss	3,2
  1067  0625  2E27               	goto	u371
  1068  0626  2E28               	goto	u370
  1069  0627                     u371:
  1070  0627  2E03               	goto	l942
  1071  0628                     u370:
  1072  0628                     l952:
  1073  0628  0875               	movf	___lwdiv@quotient+1,w
  1074  0629  00F1               	movwf	?___lwdiv+1
  1075  062A  0874               	movf	___lwdiv@quotient,w
  1076  062B  00F0               	movwf	?___lwdiv
  1077  062C                     l446:
  1078  062C  0008               	return
  1079  062D                     __end_of___lwdiv:
  1080                           
  1081                           	psect	text5
  1082  067E                     __ptext5:	
  1083 ;; *************** function _LCD_Write_Char *****************
  1084 ;; Defined at:
  1085 ;;		line 83 in file "lcd.c"
  1086 ;; Parameters:    Size  Location     Type
  1087 ;;  Data            1    wreg     unsigned char 
  1088 ;; Auto vars:     Size  Location     Type
  1089 ;;  Data            1    5[COMMON] unsigned char 
  1090 ;;  High4           1    4[COMMON] unsigned char 
  1091 ;;  Low4            1    3[COMMON] unsigned char 
  1092 ;; Return value:  Size  Location     Type
  1093 ;;                  1    wreg      void 
  1094 ;; Registers used:
  1095 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1096 ;; Tracked objects:
  1097 ;;		On entry : 0/0
  1098 ;;		On exit  : 0/0
  1099 ;;		Unchanged: 0/0
  1100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1101 ;;      Params:         0       0       0       0       0
  1102 ;;      Locals:         3       0       0       0       0
  1103 ;;      Temps:          2       0       0       0       0
  1104 ;;      Totals:         5       0       0       0       0
  1105 ;;Total ram usage:        5 bytes
  1106 ;; Hardware stack levels used:    1
  1107 ;; Hardware stack levels required when called:    1
  1108 ;; This function calls:
  1109 ;;		_LCD_DATA
  1110 ;; This function is called by:
  1111 ;;		_LCD_Write_String
  1112 ;;		_LCD_Write_Number
  1113 ;; This function uses a non-reentrant model
  1114 ;;
  1115                           
  1116                           
  1117                           ;psect for function _LCD_Write_Char
  1118  067E                     _LCD_Write_Char:
  1119                           
  1120                           ;incstack = 0
  1121                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1122                           ;LCD_Write_Char@Data stored from wreg
  1123  067E  00F5               	movwf	LCD_Write_Char@Data
  1124  067F                     l906:
  1125                           
  1126                           ;lcd.c: 83: void LCD_Write_Char(char Data);lcd.c: 84: {;lcd.c: 85:   char Low4,High4;;lc
      +                          d.c: 86:   Low4 = Data & 0x0F;
  1127  067F  0875               	movf	LCD_Write_Char@Data,w
  1128  0680  390F               	andlw	15
  1129  0681  00FF               	movwf	btemp+1
  1130  0682  087F               	movf	btemp+1,w
  1131  0683  00F3               	movwf	LCD_Write_Char@Low4
  1132                           
  1133                           ;lcd.c: 87:   High4 = Data & 0xF0;
  1134  0684  0875               	movf	LCD_Write_Char@Data,w
  1135  0685  39F0               	andlw	240
  1136  0686  00FF               	movwf	btemp+1
  1137  0687  087F               	movf	btemp+1,w
  1138  0688  00F4               	movwf	LCD_Write_Char@High4
  1139  0689                     l908:
  1140                           
  1141                           ;lcd.c: 88:   RB5 = 1;
  1142  0689  1283               	bcf	3,5	;RP0=0, select bank0
  1143  068A  1303               	bcf	3,6	;RP1=0, select bank0
  1144  068B  1686               	bsf	6,5	;volatile
  1145  068C                     l910:
  1146                           
  1147                           ;lcd.c: 89:   LCD_DATA(High4>>4);
  1148  068C  0874               	movf	LCD_Write_Char@High4,w
  1149  068D  00F1               	movwf	??_LCD_Write_Char
  1150  068E  3004               	movlw	4
  1151  068F                     u305:
  1152  068F  1003               	clrc
  1153  0690  0CF1               	rrf	??_LCD_Write_Char,f
  1154  0691  3EFF               	addlw	-1
  1155  0692  1D03               	skipz
  1156  0693  2E8F               	goto	u305
  1157  0694  0871               	movf	??_LCD_Write_Char,w
  1158  0695  120A  118A  2568  120A  118A  	fcall	_LCD_DATA
  1159  069A                     l912:
  1160                           
  1161                           ;lcd.c: 90:   RB4 = 1;
  1162  069A  1283               	bcf	3,5	;RP0=0, select bank0
  1163  069B  1303               	bcf	3,6	;RP1=0, select bank0
  1164  069C  1606               	bsf	6,4	;volatile
  1165  069D                     l914:
  1166                           
  1167                           ;lcd.c: 91:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1168  069D  3004               	movlw	4
  1169  069E  00F2               	movwf	??_LCD_Write_Char+1
  1170  069F  303D               	movlw	61
  1171  06A0  00F1               	movwf	??_LCD_Write_Char
  1172  06A1                     u527:
  1173  06A1  0BF1               	decfsz	??_LCD_Write_Char,f
  1174  06A2  2EA1               	goto	u527
  1175  06A3  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1176  06A4  2EA1               	goto	u527
  1177  06A5  2EA6               	nop2
  1178  06A6                     l916:
  1179                           
  1180                           ;lcd.c: 92:   RB4 = 0;
  1181  06A6  1283               	bcf	3,5	;RP0=0, select bank0
  1182  06A7  1303               	bcf	3,6	;RP1=0, select bank0
  1183  06A8  1206               	bcf	6,4	;volatile
  1184  06A9                     l918:
  1185                           
  1186                           ;lcd.c: 93:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1187  06A9  3004               	movlw	4
  1188  06AA  00F2               	movwf	??_LCD_Write_Char+1
  1189  06AB  303D               	movlw	61
  1190  06AC  00F1               	movwf	??_LCD_Write_Char
  1191  06AD                     u537:
  1192  06AD  0BF1               	decfsz	??_LCD_Write_Char,f
  1193  06AE  2EAD               	goto	u537
  1194  06AF  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1195  06B0  2EAD               	goto	u537
  1196  06B1  2EB2               	nop2
  1197  06B2                     l920:
  1198                           
  1199                           ;lcd.c: 94:   LCD_DATA(Low4);
  1200  06B2  0873               	movf	LCD_Write_Char@Low4,w
  1201  06B3  120A  118A  2568  120A  118A  	fcall	_LCD_DATA
  1202  06B8                     l922:
  1203                           
  1204                           ;lcd.c: 95:   RB4 = 1;
  1205  06B8  1283               	bcf	3,5	;RP0=0, select bank0
  1206  06B9  1303               	bcf	3,6	;RP1=0, select bank0
  1207  06BA  1606               	bsf	6,4	;volatile
  1208  06BB                     l924:
  1209                           
  1210                           ;lcd.c: 96:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1211  06BB  3004               	movlw	4
  1212  06BC  00F2               	movwf	??_LCD_Write_Char+1
  1213  06BD  303D               	movlw	61
  1214  06BE  00F1               	movwf	??_LCD_Write_Char
  1215  06BF                     u547:
  1216  06BF  0BF1               	decfsz	??_LCD_Write_Char,f
  1217  06C0  2EBF               	goto	u547
  1218  06C1  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1219  06C2  2EBF               	goto	u547
  1220  06C3  2EC4               	nop2
  1221  06C4                     l926:
  1222                           
  1223                           ;lcd.c: 97:   RB4 = 0;
  1224  06C4  1283               	bcf	3,5	;RP0=0, select bank0
  1225  06C5  1303               	bcf	3,6	;RP1=0, select bank0
  1226  06C6  1206               	bcf	6,4	;volatile
  1227  06C7                     l928:
  1228                           
  1229                           ;lcd.c: 98:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1230  06C7  3004               	movlw	4
  1231  06C8  00F2               	movwf	??_LCD_Write_Char+1
  1232  06C9  303D               	movlw	61
  1233  06CA  00F1               	movwf	??_LCD_Write_Char
  1234  06CB                     u557:
  1235  06CB  0BF1               	decfsz	??_LCD_Write_Char,f
  1236  06CC  2ECB               	goto	u557
  1237  06CD  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1238  06CE  2ECB               	goto	u557
  1239  06CF  2ED0               	nop2
  1240  06D0                     l68:
  1241  06D0  0008               	return
  1242  06D1                     __end_of_LCD_Write_Char:
  1243                           
  1244                           	psect	text6
  1245  062D                     __ptext6:	
  1246 ;; *************** function _LCD_Set_Cursor *****************
  1247 ;; Defined at:
  1248 ;;		line 40 in file "lcd.c"
  1249 ;; Parameters:    Size  Location     Type
  1250 ;;  r               1    wreg     unsigned char 
  1251 ;;  c               1    4[COMMON] unsigned char 
  1252 ;; Auto vars:     Size  Location     Type
  1253 ;;  r               1    6[COMMON] unsigned char 
  1254 ;;  Temp            1    9[COMMON] unsigned char 
  1255 ;;  High4           1    8[COMMON] unsigned char 
  1256 ;;  Low4            1    7[COMMON] unsigned char 
  1257 ;; Return value:  Size  Location     Type
  1258 ;;                  1    wreg      void 
  1259 ;; Registers used:
  1260 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  1261 ;; Tracked objects:
  1262 ;;		On entry : 0/0
  1263 ;;		On exit  : 0/0
  1264 ;;		Unchanged: 0/0
  1265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1266 ;;      Params:         1       0       0       0       0
  1267 ;;      Locals:         4       0       0       0       0
  1268 ;;      Temps:          1       0       0       0       0
  1269 ;;      Totals:         6       0       0       0       0
  1270 ;;Total ram usage:        6 bytes
  1271 ;; Hardware stack levels used:    1
  1272 ;; Hardware stack levels required when called:    2
  1273 ;; This function calls:
  1274 ;;		_LCD_CMD
  1275 ;; This function is called by:
  1276 ;;		_main
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           
  1281                           ;psect for function _LCD_Set_Cursor
  1282  062D                     _LCD_Set_Cursor:
  1283                           
  1284                           ;incstack = 0
  1285                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1286                           ;LCD_Set_Cursor@r stored from wreg
  1287  062D  00F6               	movwf	LCD_Set_Cursor@r
  1288  062E                     l1016:
  1289                           
  1290                           ;lcd.c: 40: void LCD_Set_Cursor(unsigned char r, unsigned char c);lcd.c: 41: {;lcd.c: 42
      +                          :   unsigned char Temp,Low4,High4;;lcd.c: 43:   if(r == 1)
  1291  062E  0376               	decf	LCD_Set_Cursor@r,w
  1292  062F  1D03               	btfss	3,2
  1293  0630  2E32               	goto	u441
  1294  0631  2E33               	goto	u440
  1295  0632                     u441:
  1296  0632  2E55               	goto	l1026
  1297  0633                     u440:
  1298  0633                     l1018:
  1299                           
  1300                           ;lcd.c: 44:   {;lcd.c: 45:     Temp = 0x80 + c - 1;
  1301  0633  0874               	movf	LCD_Set_Cursor@c,w
  1302  0634  3E7F               	addlw	127
  1303  0635  00FF               	movwf	btemp+1
  1304  0636  087F               	movf	btemp+1,w
  1305  0637  00F9               	movwf	LCD_Set_Cursor@Temp
  1306                           
  1307                           ;lcd.c: 46:     High4 = Temp >> 4;
  1308  0638  0879               	movf	LCD_Set_Cursor@Temp,w
  1309  0639  00F5               	movwf	??_LCD_Set_Cursor
  1310  063A  3004               	movlw	4
  1311  063B                     u455:
  1312  063B  1003               	clrc
  1313  063C  0CF5               	rrf	??_LCD_Set_Cursor,f
  1314  063D  3EFF               	addlw	-1
  1315  063E  1D03               	skipz
  1316  063F  2E3B               	goto	u455
  1317  0640  0875               	movf	??_LCD_Set_Cursor,w
  1318  0641  00FF               	movwf	btemp+1
  1319  0642  087F               	movf	btemp+1,w
  1320  0643  00F8               	movwf	LCD_Set_Cursor@High4
  1321  0644                     l1020:
  1322                           
  1323                           ;lcd.c: 47:     Low4 = Temp & 0x0F;
  1324  0644  0879               	movf	LCD_Set_Cursor@Temp,w
  1325  0645  390F               	andlw	15
  1326  0646  00FF               	movwf	btemp+1
  1327  0647  087F               	movf	btemp+1,w
  1328  0648  00F7               	movwf	LCD_Set_Cursor@Low4
  1329  0649                     l1022:
  1330                           
  1331                           ;lcd.c: 48:     LCD_CMD(High4);
  1332  0649  0878               	movf	LCD_Set_Cursor@High4,w
  1333  064A  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1334  064F                     l1024:
  1335                           
  1336                           ;lcd.c: 49:     LCD_CMD(Low4);
  1337  064F  0877               	movf	LCD_Set_Cursor@Low4,w
  1338  0650  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1339  0655                     l1026:
  1340                           
  1341                           ;lcd.c: 51:   if(r == 2)
  1342  0655  3002               	movlw	2
  1343  0656  0676               	xorwf	LCD_Set_Cursor@r,w
  1344  0657  1D03               	btfss	3,2
  1345  0658  2E5A               	goto	u461
  1346  0659  2E5B               	goto	u460
  1347  065A                     u461:
  1348  065A  2E7D               	goto	l62
  1349  065B                     u460:
  1350  065B                     l1028:
  1351                           
  1352                           ;lcd.c: 52:   {;lcd.c: 53:     Temp = 0xC0 + c - 1;
  1353  065B  0874               	movf	LCD_Set_Cursor@c,w
  1354  065C  3EBF               	addlw	191
  1355  065D  00FF               	movwf	btemp+1
  1356  065E  087F               	movf	btemp+1,w
  1357  065F  00F9               	movwf	LCD_Set_Cursor@Temp
  1358                           
  1359                           ;lcd.c: 54:     High4 = Temp >> 4;
  1360  0660  0879               	movf	LCD_Set_Cursor@Temp,w
  1361  0661  00F5               	movwf	??_LCD_Set_Cursor
  1362  0662  3004               	movlw	4
  1363  0663                     u475:
  1364  0663  1003               	clrc
  1365  0664  0CF5               	rrf	??_LCD_Set_Cursor,f
  1366  0665  3EFF               	addlw	-1
  1367  0666  1D03               	skipz
  1368  0667  2E63               	goto	u475
  1369  0668  0875               	movf	??_LCD_Set_Cursor,w
  1370  0669  00FF               	movwf	btemp+1
  1371  066A  087F               	movf	btemp+1,w
  1372  066B  00F8               	movwf	LCD_Set_Cursor@High4
  1373  066C                     l1030:
  1374                           
  1375                           ;lcd.c: 55:     Low4 = Temp & 0x0F;
  1376  066C  0879               	movf	LCD_Set_Cursor@Temp,w
  1377  066D  390F               	andlw	15
  1378  066E  00FF               	movwf	btemp+1
  1379  066F  087F               	movf	btemp+1,w
  1380  0670  00F7               	movwf	LCD_Set_Cursor@Low4
  1381  0671                     l1032:
  1382                           
  1383                           ;lcd.c: 56:     LCD_CMD(High4);
  1384  0671  0878               	movf	LCD_Set_Cursor@High4,w
  1385  0672  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1386  0677                     l1034:
  1387                           
  1388                           ;lcd.c: 57:     LCD_CMD(Low4);
  1389  0677  0877               	movf	LCD_Set_Cursor@Low4,w
  1390  0678  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1391  067D                     l62:
  1392  067D  0008               	return
  1393  067E                     __end_of_LCD_Set_Cursor:
  1394                           
  1395                           	psect	text7
  1396  072D                     __ptext7:	
  1397 ;; *************** function _LCD_Init *****************
  1398 ;; Defined at:
  1399 ;;		line 60 in file "lcd.c"
  1400 ;; Parameters:    Size  Location     Type
  1401 ;;		None
  1402 ;; Auto vars:     Size  Location     Type
  1403 ;;		None
  1404 ;; Return value:  Size  Location     Type
  1405 ;;                  1    wreg      void 
  1406 ;; Registers used:
  1407 ;;		wreg, status,2, status,0, pclath, cstack
  1408 ;; Tracked objects:
  1409 ;;		On entry : 0/0
  1410 ;;		On exit  : 0/0
  1411 ;;		Unchanged: 0/0
  1412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1413 ;;      Params:         0       0       0       0       0
  1414 ;;      Locals:         0       0       0       0       0
  1415 ;;      Temps:          2       0       0       0       0
  1416 ;;      Totals:         2       0       0       0       0
  1417 ;;Total ram usage:        2 bytes
  1418 ;; Hardware stack levels used:    1
  1419 ;; Hardware stack levels required when called:    2
  1420 ;; This function calls:
  1421 ;;		_LCD_CMD
  1422 ;;		_LCD_DATA
  1423 ;; This function is called by:
  1424 ;;		_main
  1425 ;; This function uses a non-reentrant model
  1426 ;;
  1427                           
  1428                           
  1429                           ;psect for function _LCD_Init
  1430  072D                     _LCD_Init:
  1431  072D                     l978:	
  1432                           ;incstack = 0
  1433                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1434                           
  1435                           
  1436                           ;lcd.c: 63:   TRISB = 0x00;
  1437  072D  1683               	bsf	3,5	;RP0=1, select bank1
  1438  072E  1303               	bcf	3,6	;RP1=0, select bank1
  1439  072F  0186               	clrf	6	;volatile
  1440  0730                     l980:
  1441                           
  1442                           ;lcd.c: 64:   TRISB5 = 0;
  1443  0730  1286               	bcf	6,5	;volatile
  1444  0731                     l982:
  1445                           
  1446                           ;lcd.c: 65:   TRISB4 = 0;
  1447  0731  1206               	bcf	6,4	;volatile
  1448  0732                     l984:
  1449                           
  1450                           ;lcd.c: 67:   LCD_DATA(0x00);
  1451  0732  3000               	movlw	0
  1452  0733  120A  118A  2568  120A  118A  	fcall	_LCD_DATA
  1453  0738                     l986:
  1454                           
  1455                           ;lcd.c: 68:   _delay((unsigned long)((30)*(20000000/4000.0)));
  1456  0738  30C3               	movlw	195
  1457  0739  00F5               	movwf	??_LCD_Init+1
  1458  073A  30CD               	movlw	205
  1459  073B  00F4               	movwf	??_LCD_Init
  1460  073C                     u567:
  1461  073C  0BF4               	decfsz	??_LCD_Init,f
  1462  073D  2F3C               	goto	u567
  1463  073E  0BF5               	decfsz	??_LCD_Init+1,f
  1464  073F  2F3C               	goto	u567
  1465  0740                     l988:
  1466                           
  1467                           ;lcd.c: 69:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1468  0740  3004               	movlw	4
  1469  0741  00F5               	movwf	??_LCD_Init+1
  1470  0742  303D               	movlw	61
  1471  0743  00F4               	movwf	??_LCD_Init
  1472  0744                     u577:
  1473  0744  0BF4               	decfsz	??_LCD_Init,f
  1474  0745  2F44               	goto	u577
  1475  0746  0BF5               	decfsz	??_LCD_Init+1,f
  1476  0747  2F44               	goto	u577
  1477  0748  2F49               	nop2
  1478  0749                     l990:
  1479                           
  1480                           ;lcd.c: 70:   LCD_CMD(0x03);
  1481  0749  3003               	movlw	3
  1482  074A  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1483  074F                     l992:
  1484                           
  1485                           ;lcd.c: 71:   _delay((unsigned long)((5)*(20000000/4000.0)));
  1486  074F  3021               	movlw	33
  1487  0750  00F5               	movwf	??_LCD_Init+1
  1488  0751  3076               	movlw	118
  1489  0752  00F4               	movwf	??_LCD_Init
  1490  0753                     u587:
  1491  0753  0BF4               	decfsz	??_LCD_Init,f
  1492  0754  2F53               	goto	u587
  1493  0755  0BF5               	decfsz	??_LCD_Init+1,f
  1494  0756  2F53               	goto	u587
  1495  0757  0000               	nop
  1496  0758                     l994:
  1497                           
  1498                           ;lcd.c: 72:   LCD_CMD(0x03);
  1499  0758  3003               	movlw	3
  1500  0759  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1501  075E                     l996:
  1502                           
  1503                           ;lcd.c: 73:   _delay((unsigned long)((150)*(20000000/4000000.0)));
  1504  075E  30F9               	movlw	249
  1505  075F  00F4               	movwf	??_LCD_Init
  1506  0760                     u597:
  1507  0760  0BF4               	decfsz	??_LCD_Init,f
  1508  0761  2F60               	goto	u597
  1509  0762  2F63               	nop2
  1510  0763                     l998:
  1511                           
  1512                           ;lcd.c: 74:   LCD_CMD(0x03);
  1513  0763  3003               	movlw	3
  1514  0764  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1515  0769                     l1000:
  1516                           
  1517                           ;lcd.c: 75:   LCD_CMD(0x02);
  1518  0769  3002               	movlw	2
  1519  076A  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1520  076F                     l1002:
  1521                           
  1522                           ;lcd.c: 76:   LCD_CMD(0x02);
  1523  076F  3002               	movlw	2
  1524  0770  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1525  0775                     l1004:
  1526                           
  1527                           ;lcd.c: 77:   LCD_CMD(0x08);
  1528  0775  3008               	movlw	8
  1529  0776  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1530  077B                     l1006:
  1531                           
  1532                           ;lcd.c: 78:   LCD_CMD(0x00);
  1533  077B  3000               	movlw	0
  1534  077C  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1535  0781                     l1008:
  1536                           
  1537                           ;lcd.c: 79:   LCD_CMD(0x0C);
  1538  0781  300C               	movlw	12
  1539  0782  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1540  0787                     l1010:
  1541                           
  1542                           ;lcd.c: 80:   LCD_CMD(0x00);
  1543  0787  3000               	movlw	0
  1544  0788  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1545  078D                     l1012:
  1546                           
  1547                           ;lcd.c: 81:   LCD_CMD(0x06);
  1548  078D  3006               	movlw	6
  1549  078E  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1550  0793                     l65:
  1551  0793  0008               	return
  1552  0794                     __end_of_LCD_Init:
  1553                           
  1554                           	psect	text8
  1555  0541                     __ptext8:	
  1556 ;; *************** function _LCD_Clear *****************
  1557 ;; Defined at:
  1558 ;;		line 35 in file "lcd.c"
  1559 ;; Parameters:    Size  Location     Type
  1560 ;;		None
  1561 ;; Auto vars:     Size  Location     Type
  1562 ;;		None
  1563 ;; Return value:  Size  Location     Type
  1564 ;;                  1    wreg      void 
  1565 ;; Registers used:
  1566 ;;		wreg, status,2, status,0, pclath, cstack
  1567 ;; Tracked objects:
  1568 ;;		On entry : 0/0
  1569 ;;		On exit  : 0/0
  1570 ;;		Unchanged: 0/0
  1571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1572 ;;      Params:         0       0       0       0       0
  1573 ;;      Locals:         0       0       0       0       0
  1574 ;;      Temps:          0       0       0       0       0
  1575 ;;      Totals:         0       0       0       0       0
  1576 ;;Total ram usage:        0 bytes
  1577 ;; Hardware stack levels used:    1
  1578 ;; Hardware stack levels required when called:    2
  1579 ;; This function calls:
  1580 ;;		_LCD_CMD
  1581 ;; This function is called by:
  1582 ;;		_main
  1583 ;; This function uses a non-reentrant model
  1584 ;;
  1585                           
  1586                           
  1587                           ;psect for function _LCD_Clear
  1588  0541                     _LCD_Clear:
  1589  0541                     l1014:	
  1590                           ;incstack = 0
  1591                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  1592                           
  1593                           
  1594                           ;lcd.c: 37:   LCD_CMD(0);
  1595  0541  3000               	movlw	0
  1596  0542  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1597                           
  1598                           ;lcd.c: 38:   LCD_CMD(1);
  1599  0547  3001               	movlw	1
  1600  0548  120A  118A  254E  120A  118A  	fcall	_LCD_CMD
  1601  054D                     l57:
  1602  054D  0008               	return
  1603  054E                     __end_of_LCD_Clear:
  1604                           
  1605                           	psect	text9
  1606  054E                     __ptext9:	
  1607 ;; *************** function _LCD_CMD *****************
  1608 ;; Defined at:
  1609 ;;		line 24 in file "lcd.c"
  1610 ;; Parameters:    Size  Location     Type
  1611 ;;  CMD             1    wreg     unsigned char 
  1612 ;; Auto vars:     Size  Location     Type
  1613 ;;  CMD             1    3[COMMON] unsigned char 
  1614 ;; Return value:  Size  Location     Type
  1615 ;;                  1    wreg      void 
  1616 ;; Registers used:
  1617 ;;		wreg, status,2, status,0, pclath, cstack
  1618 ;; Tracked objects:
  1619 ;;		On entry : 0/0
  1620 ;;		On exit  : 0/0
  1621 ;;		Unchanged: 0/0
  1622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1623 ;;      Params:         0       0       0       0       0
  1624 ;;      Locals:         1       0       0       0       0
  1625 ;;      Temps:          2       0       0       0       0
  1626 ;;      Totals:         3       0       0       0       0
  1627 ;;Total ram usage:        3 bytes
  1628 ;; Hardware stack levels used:    1
  1629 ;; Hardware stack levels required when called:    1
  1630 ;; This function calls:
  1631 ;;		_LCD_DATA
  1632 ;; This function is called by:
  1633 ;;		_LCD_Clear
  1634 ;;		_LCD_Set_Cursor
  1635 ;;		_LCD_Init
  1636 ;;		_LCD_SL
  1637 ;;		_LCD_SR
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function _LCD_CMD
  1643  054E                     _LCD_CMD:
  1644                           
  1645                           ;incstack = 0
  1646                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1647                           ;LCD_CMD@CMD stored from wreg
  1648  054E  00F3               	movwf	LCD_CMD@CMD
  1649  054F                     l896:
  1650                           
  1651                           ;lcd.c: 24: void LCD_CMD(unsigned char CMD);lcd.c: 25: {;lcd.c: 27:   RB5 = 0;
  1652  054F  1283               	bcf	3,5	;RP0=0, select bank0
  1653  0550  1303               	bcf	3,6	;RP1=0, select bank0
  1654  0551  1286               	bcf	6,5	;volatile
  1655  0552                     l898:
  1656                           
  1657                           ;lcd.c: 29:   LCD_DATA(CMD);
  1658  0552  0873               	movf	LCD_CMD@CMD,w
  1659  0553  120A  118A  2568  120A  118A  	fcall	_LCD_DATA
  1660  0558                     l900:
  1661                           
  1662                           ;lcd.c: 31:   RB4 = 1;
  1663  0558  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0559  1303               	bcf	3,6	;RP1=0, select bank0
  1665  055A  1606               	bsf	6,4	;volatile
  1666  055B                     l902:
  1667                           
  1668                           ;lcd.c: 32:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1669  055B  3004               	movlw	4
  1670  055C  00F2               	movwf	??_LCD_CMD+1
  1671  055D  303D               	movlw	61
  1672  055E  00F1               	movwf	??_LCD_CMD
  1673  055F                     u607:
  1674  055F  0BF1               	decfsz	??_LCD_CMD,f
  1675  0560  2D5F               	goto	u607
  1676  0561  0BF2               	decfsz	??_LCD_CMD+1,f
  1677  0562  2D5F               	goto	u607
  1678  0563  2D64               	nop2
  1679  0564                     l904:
  1680                           
  1681                           ;lcd.c: 33:   RB4 = 0;
  1682  0564  1283               	bcf	3,5	;RP0=0, select bank0
  1683  0565  1303               	bcf	3,6	;RP1=0, select bank0
  1684  0566  1206               	bcf	6,4	;volatile
  1685  0567                     l54:
  1686  0567  0008               	return
  1687  0568                     __end_of_LCD_CMD:
  1688                           
  1689                           	psect	text10
  1690  0568                     __ptext10:	
  1691 ;; *************** function _LCD_DATA *****************
  1692 ;; Defined at:
  1693 ;;		line 5 in file "lcd.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;  Data            1    wreg     unsigned char 
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  Data            1    0[COMMON] unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1707 ;;      Params:         0       0       0       0       0
  1708 ;;      Locals:         1       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0
  1710 ;;      Totals:         1       0       0       0       0
  1711 ;;Total ram usage:        1 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_LCD_CMD
  1717 ;;		_LCD_Init
  1718 ;;		_LCD_Write_Char
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           
  1723                           ;psect for function _LCD_DATA
  1724  0568                     _LCD_DATA:
  1725                           
  1726                           ;incstack = 0
  1727                           ; Regs used in _LCD_DATA: [wreg]
  1728                           ;LCD_DATA@Data stored from wreg
  1729  0568  00F0               	movwf	LCD_DATA@Data
  1730  0569                     l886:
  1731                           
  1732                           ;lcd.c: 5: void LCD_DATA(unsigned char Data);lcd.c: 6: {;lcd.c: 7:   if(Data & 1)
  1733  0569  1C70               	btfss	LCD_DATA@Data,0
  1734  056A  2D6C               	goto	u261
  1735  056B  2D6D               	goto	u260
  1736  056C                     u261:
  1737  056C  2D71               	goto	l43
  1738  056D                     u260:
  1739  056D                     l888:
  1740                           
  1741                           ;lcd.c: 8:     RB0 = 1;
  1742  056D  1283               	bcf	3,5	;RP0=0, select bank0
  1743  056E  1303               	bcf	3,6	;RP1=0, select bank0
  1744  056F  1406               	bsf	6,0	;volatile
  1745  0570  2D74               	goto	l44
  1746  0571                     l43:	
  1747                           ;lcd.c: 9:   else
  1748                           
  1749                           
  1750                           ;lcd.c: 10:     RB0 = 0;
  1751  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1752  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1753  0573  1006               	bcf	6,0	;volatile
  1754  0574                     l44:
  1755                           
  1756                           ;lcd.c: 11:   if(Data & 2)
  1757  0574  1CF0               	btfss	LCD_DATA@Data,1
  1758  0575  2D77               	goto	u271
  1759  0576  2D78               	goto	u270
  1760  0577                     u271:
  1761  0577  2D7A               	goto	l45
  1762  0578                     u270:
  1763  0578                     l890:
  1764                           
  1765                           ;lcd.c: 12:     RB1 = 1;
  1766  0578  1486               	bsf	6,1	;volatile
  1767  0579  2D7B               	goto	l46
  1768  057A                     l45:	
  1769                           ;lcd.c: 13:   else
  1770                           
  1771                           
  1772                           ;lcd.c: 14:     RB1 = 0;
  1773  057A  1086               	bcf	6,1	;volatile
  1774  057B                     l46:
  1775                           
  1776                           ;lcd.c: 15:   if(Data & 4)
  1777  057B  1D70               	btfss	LCD_DATA@Data,2
  1778  057C  2D7E               	goto	u281
  1779  057D  2D7F               	goto	u280
  1780  057E                     u281:
  1781  057E  2D81               	goto	l47
  1782  057F                     u280:
  1783  057F                     l892:
  1784                           
  1785                           ;lcd.c: 16:     RB2 = 1;
  1786  057F  1506               	bsf	6,2	;volatile
  1787  0580  2D82               	goto	l48
  1788  0581                     l47:	
  1789                           ;lcd.c: 17:   else
  1790                           
  1791                           
  1792                           ;lcd.c: 18:     RB2 = 0;
  1793  0581  1106               	bcf	6,2	;volatile
  1794  0582                     l48:
  1795                           
  1796                           ;lcd.c: 19:   if(Data & 8)
  1797  0582  1DF0               	btfss	LCD_DATA@Data,3
  1798  0583  2D85               	goto	u291
  1799  0584  2D86               	goto	u290
  1800  0585                     u291:
  1801  0585  2D88               	goto	l49
  1802  0586                     u290:
  1803  0586                     l894:
  1804                           
  1805                           ;lcd.c: 20:     RB3 = 1;
  1806  0586  1586               	bsf	6,3	;volatile
  1807  0587  2D89               	goto	l51
  1808  0588                     l49:	
  1809                           ;lcd.c: 21:   else
  1810                           
  1811                           
  1812                           ;lcd.c: 22:     RB3 = 0;
  1813  0588  1186               	bcf	6,3	;volatile
  1814  0589                     l51:
  1815  0589  0008               	return
  1816  058A                     __end_of_LCD_DATA:
  1817  007E                     btemp	set	126	;btemp
  1818  007E                     wtemp0	set	126

Data Sizes:
    Strings     4
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     25      25
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 4
		 -> STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCD_Set_Cursor
    _main->_LCD_Write_Number
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Number->___lwdiv
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    _main->_LCD_Write_Number

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    2500
                                             10 COMMON     3     3      0
                          _LCD_Clear
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_Number
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     301
                                              6 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Number                                    28    26      2    1207
                                              7 COMMON     3     1      2
                                              0 BANK0     25    25      0
                     _LCD_Write_Char
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     311
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     314
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       5     5      0     178
                                              1 COMMON     5     5      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       6     5      1     684
                                              4 COMMON     6     5      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            0     0      0     110
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
       _LCD_DATA
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
       _LCD_DATA
   _LCD_Write_Number
     _LCD_Write_Char
       _LCD_DATA
     ___lwdiv
     ___lwmod
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_DATA

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      19       5       31.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sun Dec 05 22:31:30 2021

                        pc 0002                         l17 0729                         l18 0729  
                       l51 0589                         l43 0571                         l44 0574  
                       l45 057A                         l46 057B                         l54 0567  
                       l62 067D                         l47 0581                         l48 0582  
                       l49 0588                         l57 054D                         l65 0793  
                       l74 05AE                         l68 06D0                         l88 07FB  
                       fsr 0004                        l446 062C                        l456 05E8  
                      l900 0558                        l902 055B                        l910 068C  
                      l904 0564                        l920 06B2                        l912 069A  
                      l922 06B8                        l914 069D                        l906 067F  
                      l930 05E9                        l924 06BB                        l916 06A6  
                      l908 0689                        l940 05FF                        l932 05EB  
                      l926 06C4                        l918 06A9                        l950 0622  
                      l942 0603                        l934 05F1                        l928 06C7  
                      l944 0614                        l936 05F4                        l952 0628  
                      l960 05B8                        l890 0578                        l946 061A  
                      l938 05FB                        l970 05D7                        l962 05BF  
                      l892 057F                        l980 0730                        l948 061B  
                      l972 05DE                        l964 05C3                        l956 05AF  
                      l894 0586                        l886 0569                        l990 0749  
                      l982 0731                        l966 05C7                        l958 05B5  
                      l974 05E4                        l888 056D                        l896 054F  
                      l992 074F                        l984 0732                        l968 05D1  
                      l898 0552                        l994 0758                        l986 0738  
                      l978 072D                        l996 075E                        l988 0740  
                      l998 0763                        _RB0 0030                        _RB1 0031  
                      _RB2 0032                        _RB3 0033                        _RB4 0034  
                      _RB5 0035                        u310 05F1                        u311 05F0  
                      u400 05C7                        u305 068F                        u401 05C6  
                      u330 0603                        u410 05D1                        u331 0602  
                      u411 05D0                        u260 056D                        u500 05AE  
                      u261 056C                        u325 05F5                        u501 05AD  
                      u270 0578                        u350 0614                        u430 05E4  
                      u271 0577                        u351 0613                        u431 05E3  
                      u415 05CD                        u280 057F                        u440 0633  
                      u281 057E                        u441 0632                        u345 0604  
                      u425 05D8                        u290 0586                        u370 0628  
                      u291 0585                        u371 0627                        u355 0610  
                      u460 065B                        u380 05B5                        u461 065A  
                      u365 061C                        u381 05B4                        u517 06FA  
                      u607 055F                        u455 063B                        u527 06A1  
                      u480 07D2                        u537 06AD                        u481 07D1  
                      u490 07E0                        u475 0663                        u547 06BF  
                      u395 05B9                        u491 07DF                        u557 06CB  
                      u567 073C                        u577 0744                        u587 0753  
                      u597 0760                        fsr0 0004                        indf 0000  
          __end_of_LCD_CMD 0568             _LCD_Set_Cursor 062D                       l1000 0769  
                     l1010 0787                       l1002 076F                       l1012 078D  
                     l1004 0775                       l1020 0644                       l1014 0541  
                     l1006 077B                       l1030 066C                       l1022 0649  
                     l1008 0781                       l1032 0671                       l1024 064F  
                     l1016 062E                       l1040 07B3                       l1034 0677  
                     l1018 0633                       l1026 0655                       l1042 07C4  
                     l1028 065B                       l1052 07E1                       l1044 07CC  
                     l1036 0794                       l1060 058B                       l1054 07EC  
                     l1046 07D2                       l1038 0799                       l1062 058E  
                     l1070 06DB                       l1056 07F2                       l1048 07DC  
                     l1064 059B                       l1080 0706                       l1072 06E3  
                     l1066 05A1                       l1082 0710                       l1074 06EB  
                     l1084 0716                       l1076 06F4                       l1068 06D1  
                     l1086 0720                       l1078 0701        LCD_Write_String@str 0078  
                     STR_1 0009          ?_LCD_Write_Number 0077          ?_LCD_Write_String 0070  
                     _main 06D1         __size_of_LCD_Clear 000D                       btemp 007E  
       ??_LCD_Write_Number 0079                       start 0000         ??_LCD_Write_String 0076  
         __end_of_LCD_DATA 058A           __end_of_LCD_Init 0794                      ?_main 0070  
          __end_of___lwdiv 062D            __end_of___lwmod 05E9                      _TRISB 0086  
   __end_of_LCD_Set_Cursor 067E                      pclath 000A                      status 0003  
                    wtemp0 007E             _LCD_Write_Char 067E            __initialization 07FC  
             __end_of_main 072D                     ??_main 007A          __end_of_LCD_Clear 054E  
                ??_LCD_CMD 0071            ?_LCD_Set_Cursor 0074                     _TRISB4 0434  
                   _TRISB5 0435     __end_of_LCD_Write_Char 06D1                  ??___lwdiv 0074  
                ??___lwmod 0074            LCD_Set_Cursor@c 0074            LCD_Set_Cursor@r 0076  
                ?_LCD_DATA 0070    __end_of__initialization 07FC                  ?_LCD_Init 0070  
          ?_LCD_Write_Char 0070             __pcstackCOMMON 0070                 ??_LCD_DATA 0070  
               ??_LCD_Init 0074                 __pmaintext 06D1  __size_of_LCD_Write_Number 0068  
__size_of_LCD_Write_String 0025                    _LCD_CMD 054E                 __stringtab 0003  
                  ___lwdiv 05E9                    ___lwmod 05AF           ??_LCD_Set_Cursor 0075  
                  __ptext1 058A                    __ptext2 0794                    __ptext3 05AF  
                  __ptext4 05E9                    __ptext5 067E                    __ptext6 062D  
                  __ptext7 072D                    __ptext8 0541                    __ptext9 054E  
                _LCD_Clear 0541       end_of_initialization 07FC                 LCD_CMD@CMD 0073  
        LCD_Write_Number@c 0034          LCD_Write_Number@k 0035          LCD_Write_Number@p 0037  
               ?_LCD_Clear 0070          LCD_Write_String@i 0076           ??_LCD_Write_Char 0071  
        __size_of_LCD_DATA 0022          __size_of_LCD_Init 0067           _LCD_Write_Number 0794  
         _LCD_Write_String 058A        start_initialization 07FC                   ?_LCD_CMD 0070  
                ___latbits 0002              __pcstackBANK0 0020                ??_LCD_Clear 0074  
         ___lwdiv@dividend 0072                   ?___lwdiv 0070                   ?___lwmod 0070  
                __pstrings 0003           ___lwdiv@quotient 0074                   _LCD_DATA 0568  
                 _LCD_Init 072D                __stringbase 0008           __size_of_LCD_CMD 001A  
 __end_of_LCD_Write_Number 07FC   __end_of_LCD_Write_String 05AF        LCD_Write_Char@High4 0074  
         __size_of___lwdiv 0044           __size_of___lwmod 003A         __end_of__stringtab 0009  
          ___lwdiv@divisor 0070            ___lwdiv@counter 0076                   __ptext10 0568  
  __size_of_LCD_Set_Cursor 0051              __size_of_main 005C        LCD_Set_Cursor@High4 0078  
   LCD_Write_Number@number 0077         LCD_Write_Char@Data 0075         LCD_Write_Char@Low4 0073  
         ___lwmod@dividend 0072                  stringcode 0003    __size_of_LCD_Write_Char 0053  
       LCD_Set_Cursor@Low4 0077         LCD_Set_Cursor@Temp 0079               LCD_DATA@Data 0070  
          ___lwmod@divisor 0070            ___lwmod@counter 0074                   stringdir 0003  
                 stringtab 0003        LCD_Write_Number@num 0020  
