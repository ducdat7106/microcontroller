

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Fri Dec 03 10:24:10 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.20
    18                           ; Generated 12/02/2020 GMT
    19                           ; 
    20                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  0091                     	;# 
    96  0092                     	;# 
    97  0093                     	;# 
    98  0094                     	;# 
    99  0098                     	;# 
   100  0099                     	;# 
   101  009C                     	;# 
   102  009D                     	;# 
   103  009E                     	;# 
   104  009F                     	;# 
   105  010C                     	;# 
   106  010D                     	;# 
   107  010E                     	;# 
   108  010F                     	;# 
   109  018C                     	;# 
   110  018D                     	;# 
   111  0000                     	;# 
   112  0001                     	;# 
   113  0002                     	;# 
   114  0003                     	;# 
   115  0004                     	;# 
   116  0005                     	;# 
   117  0006                     	;# 
   118  0007                     	;# 
   119  0008                     	;# 
   120  0009                     	;# 
   121  000A                     	;# 
   122  000B                     	;# 
   123  000C                     	;# 
   124  000D                     	;# 
   125  000E                     	;# 
   126  000E                     	;# 
   127  000F                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0014                     	;# 
   133  0015                     	;# 
   134  0015                     	;# 
   135  0016                     	;# 
   136  0017                     	;# 
   137  0018                     	;# 
   138  0019                     	;# 
   139  001A                     	;# 
   140  001B                     	;# 
   141  001B                     	;# 
   142  001C                     	;# 
   143  001D                     	;# 
   144  001E                     	;# 
   145  001F                     	;# 
   146  0081                     	;# 
   147  0085                     	;# 
   148  0086                     	;# 
   149  0087                     	;# 
   150  0088                     	;# 
   151  0089                     	;# 
   152  008C                     	;# 
   153  008D                     	;# 
   154  008E                     	;# 
   155  0091                     	;# 
   156  0092                     	;# 
   157  0093                     	;# 
   158  0094                     	;# 
   159  0098                     	;# 
   160  0099                     	;# 
   161  009C                     	;# 
   162  009D                     	;# 
   163  009E                     	;# 
   164  009F                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  018C                     	;# 
   170  018D                     	;# 
   171                           
   172                           	psect	strings
   173  0003                     __pstrings:
   174  0003                     stringtab:
   175  0003                     __stringtab:
   176  0003                     stringcode:	
   177                           ;	String table - string pointers are 1 byte each
   178                           
   179  0003                     stringdir:
   180  0003  3000               	movlw	high stringdir
   181  0004  008A               	movwf	10
   182  0005  0804               	movf	4,w
   183  0006  0A84               	incf	4,f
   184  0007  0782               	addwf	2,f
   185  0008                     __stringbase:
   186  0008  3400               	retlw	0
   187  0009                     __end_of__stringtab:
   188  0009                     _codedu_lieu_cot:
   189  0009  3400               	retlw	0
   190  000A  3400               	retlw	0
   191  000B  3400               	retlw	0
   192  000C  3400               	retlw	0
   193  000D  3400               	retlw	0
   194  000E  3400               	retlw	0
   195  000F  3400               	retlw	0
   196  0010  3400               	retlw	0
   197  0011  3400               	retlw	0
   198  0012  3400               	retlw	0
   199  0013  3400               	retlw	0
   200  0014  3400               	retlw	0
   201  0015  3400               	retlw	0
   202  0016  3400               	retlw	0
   203  0017  3400               	retlw	0
   204  0018  3400               	retlw	0
   205  0019  3400               	retlw	0
   206  001A  3400               	retlw	0
   207  001B  3400               	retlw	0
   208  001C  3400               	retlw	0
   209  001D  3400               	retlw	0
   210  001E  3400               	retlw	0
   211  001F  3400               	retlw	0
   212  0020  3400               	retlw	0
   213  0021  3400               	retlw	0
   214  0022  3400               	retlw	0
   215  0023  3400               	retlw	0
   216  0024  3400               	retlw	0
   217  0025  3400               	retlw	0
   218  0026  3400               	retlw	0
   219  0027  3400               	retlw	0
   220  0028  3400               	retlw	0
   221  0029  34FF               	retlw	255
   222  002A  34FF               	retlw	255
   223  002B  3460               	retlw	96
   224  002C  3430               	retlw	48
   225  002D  3418               	retlw	24
   226  002E  340C               	retlw	12
   227  002F  34FF               	retlw	255
   228  0030  34FF               	retlw	255
   229  0031  3400               	retlw	0
   230  0032  3400               	retlw	0
   231  0033  3400               	retlw	0
   232  0034  347E               	retlw	126
   233  0035  34FF               	retlw	255
   234  0036  34C3               	retlw	195
   235  0037  34C3               	retlw	195
   236  0038  34CB               	retlw	203
   237  0039  34CB               	retlw	203
   238  003A  34EF               	retlw	239
   239  003B  346E               	retlw	110
   240  003C  3400               	retlw	0
   241  003D  3400               	retlw	0
   242  003E  3400               	retlw	0
   243  003F  347E               	retlw	126
   244  0040  34FF               	retlw	255
   245  0041  34C3               	retlw	195
   246  0042  34C3               	retlw	195
   247  0043  34C3               	retlw	195
   248  0044  34C3               	retlw	195
   249  0045  34FF               	retlw	255
   250  0046  347E               	retlw	126
   251  0047  3400               	retlw	0
   252  0048  3400               	retlw	0
   253  0049  3400               	retlw	0
   254  004A  347E               	retlw	126
   255  004B  34FF               	retlw	255
   256  004C  34C3               	retlw	195
   257  004D  34C3               	retlw	195
   258  004E  34C3               	retlw	195
   259  004F  34C3               	retlw	195
   260  0050  34EF               	retlw	239
   261  0051  346E               	retlw	110
   262  0052  3400               	retlw	0
   263  0053  3400               	retlw	0
   264  0054  3400               	retlw	0
   265  0055  34FF               	retlw	255
   266  0056  34FF               	retlw	255
   267  0057  3403               	retlw	3
   268  0058  3403               	retlw	3
   269  0059  3403               	retlw	3
   270  005A  3403               	retlw	3
   271  005B  3403               	retlw	3
   272  005C  3403               	retlw	3
   273  005D  3400               	retlw	0
   274  005E  3400               	retlw	0
   275  005F  3400               	retlw	0
   276  0060  341F               	retlw	31
   277  0061  343F               	retlw	63
   278  0062  346C               	retlw	108
   279  0063  34CC               	retlw	204
   280  0064  34CC               	retlw	204
   281  0065  346C               	retlw	108
   282  0066  343F               	retlw	63
   283  0067  341F               	retlw	31
   284  0068  3400               	retlw	0
   285  0069  3400               	retlw	0
   286  006A  3400               	retlw	0
   287  006B  34FF               	retlw	255
   288  006C  34FF               	retlw	255
   289  006D  3460               	retlw	96
   290  006E  3430               	retlw	48
   291  006F  3430               	retlw	48
   292  0070  3460               	retlw	96
   293  0071  34FF               	retlw	255
   294  0072  34FF               	retlw	255
   295  0073  3400               	retlw	0
   296  0074  3400               	retlw	0
   297  0075  3400               	retlw	0
   298  0076  3400               	retlw	0
   299  0077  3400               	retlw	0
   300  0078  3400               	retlw	0
   301  0079  3400               	retlw	0
   302  007A  3400               	retlw	0
   303  007B  3400               	retlw	0
   304  007C  3400               	retlw	0
   305  007D  3400               	retlw	0
   306  007E  3400               	retlw	0
   307  007F  3400               	retlw	0
   308  0080  3400               	retlw	0
   309  0081  3400               	retlw	0
   310  0082  3400               	retlw	0
   311  0083  3400               	retlw	0
   312  0084  3400               	retlw	0
   313  0085  3400               	retlw	0
   314  0086  3400               	retlw	0
   315  0087  3400               	retlw	0
   316  0088  3400               	retlw	0
   317  0089  3400               	retlw	0
   318  008A  3400               	retlw	0
   319  008B  3400               	retlw	0
   320  008C  3400               	retlw	0
   321  008D  3400               	retlw	0
   322  008E  3400               	retlw	0
   323  008F  3400               	retlw	0
   324  0090  3400               	retlw	0
   325  0091  3400               	retlw	0
   326  0092  3400               	retlw	0
   327  0093                     __end_of_codedu_lieu_cot:
   328  0007                     _PORTCbits	set	7
   329  0007                     _PORTC	set	7
   330  0008                     _PORTD	set	8
   331  0087                     _TRISC	set	135
   332  0088                     _TRISD	set	136
   333                           
   334                           	psect	cinit
   335  07ED                     start_initialization:	
   336                           ; #config settings
   337                           
   338  07ED                     __initialization:
   339                           
   340                           ; Clear objects allocated to COMMON
   341  07ED  01F8               	clrf	__pbssCOMMON& (0+127)
   342  07EE  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   343  07EF  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   344  07F0  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
   345  07F1  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
   346  07F2  01FD               	clrf	(__pbssCOMMON+5)& (0+127)
   347                           
   348                           ; Clear objects allocated to BANK0
   349  07F3  1383               	bcf	3,7	;select IRP bank0
   350  07F4  3020               	movlw	low __pbssBANK0
   351  07F5  0084               	movwf	4
   352  07F6  3041               	movlw	low (__pbssBANK0+33)
   353  07F7  120A  118A  2722  120A  118A  	fcall	clear_ram0
   354  07FC                     end_of_initialization:	
   355                           ;End of C runtime variable initialization code
   356                           
   357  07FC                     __end_of__initialization:
   358  07FC  0183               	clrf	3
   359  07FD  120A  118A  2F2A   	ljmp	_main	;jump to C main() function
   360                           
   361                           	psect	bssCOMMON
   362  0078                     __pbssCOMMON:
   363  0078                     _a:
   364  0078                     	ds	1
   365  0079                     _h:
   366  0079                     	ds	1
   367  007A                     _g:
   368  007A                     	ds	1
   369  007B                     _tocdo:
   370  007B                     	ds	1
   371  007C                     _sohang:
   372  007C                     	ds	1
   373  007D                     _socot:
   374  007D                     	ds	1
   375                           
   376                           	psect	bssBANK0
   377  0020                     __pbssBANK0:
   378  0020                     _khung_du_lieu:
   379  0020                     	ds	32
   380  0040                     _maled:
   381  0040                     	ds	1
   382                           
   383                           	psect	clrtext
   384  0722                     clear_ram0:	
   385                           ;	Called with FSR containing the base address, and
   386                           ;	W with the last address+1
   387                           
   388  0722  0064               	clrwdt	;clear the watchdog before getting into this loop
   389  0723                     clrloop0:
   390  0723  0180               	clrf	0	;clear RAM location pointed to by FSR
   391  0724  0A84               	incf	4,f	;increment pointer
   392  0725  0604               	xorwf	4,w	;XOR with final address
   393  0726  1903               	btfsc	3,2	;have we reached the end yet?
   394  0727  3400               	retlw	0	;all done for this memory range, return
   395  0728  0604               	xorwf	4,w	;XOR again to restore value
   396  0729  2F23               	goto	clrloop0	;do the next byte
   397                           
   398                           	psect	cstackCOMMON
   399  0070                     __pcstackCOMMON:
   400  0070                     ?_tonghop:
   401  0070                     ?_main:	
   402                           ; 1 bytes @ 0x0
   403                           
   404  0070                     ?_delay_ms:	
   405                           ; 1 bytes @ 0x0
   406                           
   407  0070                     ?_load:	
   408                           ; 1 bytes @ 0x0
   409                           
   410  0070                     delay_ms@ms:	
   411                           ; 1 bytes @ 0x0
   412                           
   413  0070                     load@u:	
   414                           ; 2 bytes @ 0x0
   415                           
   416                           
   417                           ; 2 bytes @ 0x0
   418  0070                     	ds	2
   419  0072                     ??_delay_ms:
   420  0072                     ??_load:	
   421                           ; 1 bytes @ 0x2
   422                           
   423  0072                     load@i:	
   424                           ; 1 bytes @ 0x2
   425                           
   426  0072                     delay_ms@i:	
   427                           ; 1 bytes @ 0x2
   428                           
   429                           
   430                           ; 2 bytes @ 0x2
   431  0072                     	ds	2
   432  0074                     delay_ms@j:
   433                           
   434                           ; 1 bytes @ 0x4
   435  0074                     	ds	1
   436  0075                     ??_tonghop:
   437                           
   438                           ; 1 bytes @ 0x5
   439  0075                     	ds	2
   440  0077                     tonghop@i:
   441                           
   442                           ; 1 bytes @ 0x7
   443  0077                     	ds	1
   444  0078                     ??_main:
   445                           
   446                           	psect	maintext
   447  072A                     __pmaintext:	
   448                           ; 1 bytes @ 0x8
   449 ;;
   450 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   451 ;;
   452 ;; *************** function _main *****************
   453 ;; Defined at:
   454 ;;		line 51 in file "main.c"
   455 ;; Parameters:    Size  Location     Type
   456 ;;		None
   457 ;; Auto vars:     Size  Location     Type
   458 ;;		None
   459 ;; Return value:  Size  Location     Type
   460 ;;                  1    wreg      void 
   461 ;; Registers used:
   462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   463 ;; Tracked objects:
   464 ;;		On entry : B00/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   468 ;;      Params:         0       0       0       0       0
   469 ;;      Locals:         0       0       0       0       0
   470 ;;      Temps:          0       0       0       0       0
   471 ;;      Totals:         0       0       0       0       0
   472 ;;Total ram usage:        0 bytes
   473 ;; Hardware stack levels required when called:    3
   474 ;; This function calls:
   475 ;;		_tonghop
   476 ;; This function is called by:
   477 ;;		Startup code after reset
   478 ;; This function uses a non-reentrant model
   479 ;;
   480                           
   481                           
   482                           ;psect for function _main
   483  072A                     _main:
   484  072A                     l840:	
   485                           ;incstack = 0
   486                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   487                           
   488                           
   489                           ;main.c: 53:    {
   490  072A  1683               	bsf	3,5	;RP0=1, select bank1
   491  072B  1303               	bcf	3,6	;RP1=0, select bank1
   492  072C  0188               	clrf	8	;volatile
   493                           
   494                           ;main.c: 54:      khung_du_lieu[i]=codedu_lieu_cot[u];
   495  072D  0187               	clrf	7	;volatile
   496  072E                     l842:
   497                           
   498                           ;main.c: 55:   u++;
   499  072E  30FF               	movlw	255
   500  072F  1283               	bcf	3,5	;RP0=0, select bank0
   501  0730  1303               	bcf	3,6	;RP1=0, select bank0
   502  0731  0088               	movwf	8	;volatile
   503  0732                     l844:
   504                           
   505                           ;main.c: 56:    }
   506  0732  0187               	clrf	7	;volatile
   507  0733                     l846:
   508                           
   509                           ;main.c: 58: ;main.c: 59: void tonghop(void)
   510  0733  120A  118A  277C  120A  118A  	fcall	_tonghop
   511  0738  2F33               	goto	l846
   512  0739  120A  118A  2800   	ljmp	start
   513  073C                     __end_of_main:
   514                           
   515                           	psect	text1
   516  077C                     __ptext1:	
   517 ;; *************** function _tonghop *****************
   518 ;; Defined at:
   519 ;;		line 82 in file "main.c"
   520 ;; Parameters:    Size  Location     Type
   521 ;;		None
   522 ;; Auto vars:     Size  Location     Type
   523 ;;  i               1    7[COMMON] unsigned char 
   524 ;; Return value:  Size  Location     Type
   525 ;;                  1    wreg      void 
   526 ;; Registers used:
   527 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   528 ;; Tracked objects:
   529 ;;		On entry : 0/0
   530 ;;		On exit  : 0/0
   531 ;;		Unchanged: 0/0
   532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   533 ;;      Params:         0       0       0       0       0
   534 ;;      Locals:         1       0       0       0       0
   535 ;;      Temps:          2       0       0       0       0
   536 ;;      Totals:         3       0       0       0       0
   537 ;;Total ram usage:        3 bytes
   538 ;; Hardware stack levels used:    1
   539 ;; Hardware stack levels required when called:    2
   540 ;; This function calls:
   541 ;;		_delay_ms
   542 ;;		_load
   543 ;; This function is called by:
   544 ;;		_main
   545 ;; This function uses a non-reentrant model
   546 ;;
   547                           
   548                           
   549                           ;psect for function _tonghop
   550  077C                     _tonghop:
   551  077C                     l780:	
   552                           ;incstack = 0
   553                           ; Regs used in _tonghop: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   554                           
   555                           
   556                           ;main.c: 84:      PORTD=0xff;;main.c: 85:      a=(a<<1)+1;
   557  077C  01FD               	clrf	_socot
   558  077D                     l786:
   559                           
   560                           ;main.c: 86:       };main.c: 87:    }
   561  077D  087D               	movf	_socot,w
   562  077E  00F5               	movwf	??_tonghop
   563  077F  01F6               	clrf	??_tonghop+1
   564  0780  0875               	movf	??_tonghop,w
   565  0781  00F0               	movwf	load@u
   566  0782  0876               	movf	??_tonghop+1,w
   567  0783  00F1               	movwf	load@u+1
   568  0784  120A  118A  275B  120A  118A  	fcall	_load
   569  0789                     l788:
   570                           
   571                           ;main.c: 88:      }
   572  0789  01FB               	clrf	_tocdo
   573  078A                     l794:
   574                           
   575                           ;main.c: 89: }
   576  078A  30FE               	movlw	254
   577  078B  00FF               	movwf	btemp+1
   578  078C  087F               	movf	btemp+1,w
   579  078D  00F8               	movwf	_a
   580  078E  3080               	movlw	128
   581  078F  00FF               	movwf	btemp+1
   582  0790  087F               	movf	btemp+1,w
   583  0791  00F9               	movwf	_h
   584  0792                     l796:
   585  0792  01FC               	clrf	_sohang
   586  0793                     l58:
   587  0793  1283               	bcf	3,5	;RP0=0, select bank0
   588  0794  1303               	bcf	3,6	;RP1=0, select bank0
   589  0795  1087               	bcf	7,1	;volatile
   590  0796                     l802:
   591  0796  01F7               	clrf	tonghop@i
   592  0797                     l60:
   593  0797  1107               	bcf	7,2	;volatile
   594  0798                     l808:
   595  0798  0877               	movf	tonghop@i,w
   596  0799  3E20               	addlw	(low (_khung_du_lieu| 0))& (0+255)
   597  079A  0084               	movwf	4
   598  079B  1383               	bcf	3,7	;select IRP bank0
   599  079C  0800               	movf	0,w
   600  079D  00FF               	movwf	btemp+1
   601  079E  087F               	movf	btemp+1,w
   602  079F  00FA               	movwf	_g
   603  07A0                     l810:
   604  07A0  087A               	movf	_g,w
   605  07A1  0579               	andwf	_h,w
   606  07A2  0679               	xorwf	_h,w
   607  07A3  1D03               	skipz
   608  07A4  2FA6               	goto	u121
   609  07A5  2FA7               	goto	u120
   610  07A6                     u121:
   611  07A6  2FA9               	goto	l62
   612  07A7                     u120:
   613  07A7                     l812:
   614  07A7  1407               	bsf	7,0	;volatile
   615  07A8  2FAA               	goto	l63
   616  07A9                     l62:
   617  07A9  1007               	bcf	7,0	;volatile
   618  07AA                     l63:
   619  07AA  1507               	bsf	7,2	;volatile
   620  07AB                     l814:
   621  07AB  3001               	movlw	1
   622  07AC  00FF               	movwf	btemp+1
   623  07AD  087F               	movf	btemp+1,w
   624  07AE  07F7               	addwf	tonghop@i,f
   625  07AF                     l816:
   626  07AF  3020               	movlw	32
   627  07B0  0277               	subwf	tonghop@i,w
   628  07B1  1C03               	skipc
   629  07B2  2FB4               	goto	u131
   630  07B3  2FB5               	goto	u130
   631  07B4                     u131:
   632  07B4  2F97               	goto	l60
   633  07B5                     u130:
   634  07B5                     l61:
   635  07B5  1487               	bsf	7,1	;volatile
   636  07B6                     l818:
   637  07B6  0879               	movf	_h,w
   638  07B7  00F5               	movwf	??_tonghop
   639  07B8  1003               	clrc
   640  07B9  0C75               	rrf	??_tonghop,w
   641  07BA  00FF               	movwf	btemp+1
   642  07BB  087F               	movf	btemp+1,w
   643  07BC  00F9               	movwf	_h
   644  07BD                     l820:
   645  07BD  0878               	movf	_a,w
   646  07BE  0088               	movwf	8	;volatile
   647  07BF                     l822:
   648  07BF  3001               	movlw	1
   649  07C0  00F0               	movwf	delay_ms@ms
   650  07C1  3000               	movlw	0
   651  07C2  00F1               	movwf	delay_ms@ms+1
   652  07C3  120A  118A  273C  120A  118A  	fcall	_delay_ms
   653  07C8                     l824:
   654  07C8  30FF               	movlw	255
   655  07C9  1283               	bcf	3,5	;RP0=0, select bank0
   656  07CA  1303               	bcf	3,6	;RP1=0, select bank0
   657  07CB  0088               	movwf	8	;volatile
   658  07CC                     l826:
   659  07CC  1403               	setc
   660  07CD  0DF8               	rlf	_a,f
   661  07CE                     l828:
   662  07CE  3001               	movlw	1
   663  07CF  00FF               	movwf	btemp+1
   664  07D0  087F               	movf	btemp+1,w
   665  07D1  07FC               	addwf	_sohang,f
   666  07D2                     l830:
   667  07D2  3008               	movlw	8
   668  07D3  027C               	subwf	_sohang,w
   669  07D4  1C03               	skipc
   670  07D5  2FD7               	goto	u141
   671  07D6  2FD8               	goto	u140
   672  07D7                     u141:
   673  07D7  2F93               	goto	l58
   674  07D8                     u140:
   675  07D8                     l832:
   676  07D8  3001               	movlw	1
   677  07D9  00FF               	movwf	btemp+1
   678  07DA  087F               	movf	btemp+1,w
   679  07DB  07FB               	addwf	_tocdo,f
   680  07DC                     l834:
   681  07DC  300A               	movlw	10
   682  07DD  027B               	subwf	_tocdo,w
   683  07DE  1C03               	skipc
   684  07DF  2FE1               	goto	u151
   685  07E0  2FE2               	goto	u150
   686  07E1                     u151:
   687  07E1  2F8A               	goto	l794
   688  07E2                     u150:
   689  07E2                     l836:
   690  07E2  3001               	movlw	1
   691  07E3  00FF               	movwf	btemp+1
   692  07E4  087F               	movf	btemp+1,w
   693  07E5  07FD               	addwf	_socot,f
   694  07E6                     l838:
   695  07E6  306A               	movlw	106
   696  07E7  027D               	subwf	_socot,w
   697  07E8  1C03               	skipc
   698  07E9  2FEB               	goto	u161
   699  07EA  2FEC               	goto	u160
   700  07EB                     u161:
   701  07EB  2F7D               	goto	l786
   702  07EC                     u160:
   703  07EC                     l64:
   704  07EC  0008               	return
   705  07ED                     __end_of_tonghop:
   706                           
   707                           	psect	text2
   708  075B                     __ptext2:	
   709 ;; *************** function _load *****************
   710 ;; Defined at:
   711 ;;		line 72 in file "main.c"
   712 ;; Parameters:    Size  Location     Type
   713 ;;  u               2    0[COMMON] unsigned int 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  i               1    2[COMMON] unsigned char 
   716 ;; Return value:  Size  Location     Type
   717 ;;                  1    wreg      void 
   718 ;; Registers used:
   719 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   720 ;; Tracked objects:
   721 ;;		On entry : 0/0
   722 ;;		On exit  : 0/0
   723 ;;		Unchanged: 0/0
   724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   725 ;;      Params:         2       0       0       0       0
   726 ;;      Locals:         1       0       0       0       0
   727 ;;      Temps:          0       0       0       0       0
   728 ;;      Totals:         3       0       0       0       0
   729 ;;Total ram usage:        3 bytes
   730 ;; Hardware stack levels used:    2
   731 ;; This function calls:
   732 ;;		Nothing
   733 ;; This function is called by:
   734 ;;		_tonghop
   735 ;; This function uses a non-reentrant model
   736 ;;
   737                           
   738                           
   739                           ;psect for function _load
   740  075B                     _load:
   741  075B                     l766:	
   742                           ;incstack = 0
   743                           ; Regs used in _load: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   744                           
   745                           
   746                           ;main.c: 72:         for(i=0;i<32;i++);main.c: 73:        {;main.c: 74:          PORTCbi
      +                          ts.RC2=0;;main.c: 75:          g=khung_du_lieu[i];
   747  075B  01F2               	clrf	load@i
   748  075C                     l772:
   749                           
   750                           ;main.c: 76:       if((g&h)==h) PORTCbits.RC0=1;;main.c: 77:       else PORTCbits.RC0=0;
   751  075C  0870               	movf	load@u,w
   752  075D  3E01               	addlw	low ((_codedu_lieu_cot-__stringbase)| (0+32768))
   753  075E  0084               	movwf	4
   754  075F  120A  118A  2003  120A  118A  	fcall	stringdir
   755  0764  00FF               	movwf	btemp+1
   756  0765  0872               	movf	load@i,w
   757  0766  3E20               	addlw	(low (_khung_du_lieu| 0))& (0+255)
   758  0767  0084               	movwf	4
   759  0768  087F               	movf	btemp+1,w
   760  0769  1383               	bcf	3,7	;select IRP bank0
   761  076A  0080               	movwf	0
   762  076B                     l774:
   763                           
   764                           ;main.c: 78:       PORTCbits.RC2=1;
   765  076B  3001               	movlw	1
   766  076C  07F0               	addwf	load@u,f
   767  076D  1803               	skipnc
   768  076E  0AF1               	incf	load@u+1,f
   769  076F  3000               	movlw	0
   770  0770  07F1               	addwf	load@u+1,f
   771  0771                     l776:
   772                           
   773                           ;main.c: 79:        }
   774  0771  3001               	movlw	1
   775  0772  00FF               	movwf	btemp+1
   776  0773  087F               	movf	btemp+1,w
   777  0774  07F2               	addwf	load@i,f
   778  0775                     l778:
   779  0775  3020               	movlw	32
   780  0776  0272               	subwf	load@i,w
   781  0777  1C03               	skipc
   782  0778  2F7A               	goto	u111
   783  0779  2F7B               	goto	u110
   784  077A                     u111:
   785  077A  2F5C               	goto	l772
   786  077B                     u110:
   787  077B                     l51:
   788  077B  0008               	return
   789  077C                     __end_of_load:
   790                           
   791                           	psect	text3
   792  073C                     __ptext3:	
   793 ;; *************** function _delay_ms *****************
   794 ;; Defined at:
   795 ;;		line 64 in file "main.c"
   796 ;; Parameters:    Size  Location     Type
   797 ;;  ms              2    0[COMMON] unsigned int 
   798 ;; Auto vars:     Size  Location     Type
   799 ;;  i               2    2[COMMON] unsigned int 
   800 ;;  j               1    4[COMMON] unsigned char 
   801 ;; Return value:  Size  Location     Type
   802 ;;                  1    wreg      void 
   803 ;; Registers used:
   804 ;;		wreg, status,2, status,0, btemp+1
   805 ;; Tracked objects:
   806 ;;		On entry : 0/0
   807 ;;		On exit  : 0/0
   808 ;;		Unchanged: 0/0
   809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   810 ;;      Params:         2       0       0       0       0
   811 ;;      Locals:         3       0       0       0       0
   812 ;;      Temps:          0       0       0       0       0
   813 ;;      Totals:         5       0       0       0       0
   814 ;;Total ram usage:        5 bytes
   815 ;; Hardware stack levels used:    1
   816 ;; This function calls:
   817 ;;		Nothing
   818 ;; This function is called by:
   819 ;;		_tonghop
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           
   824                           ;psect for function _delay_ms
   825  073C                     _delay_ms:
   826  073C                     l752:	
   827                           ;incstack = 0
   828                           ; Regs used in _delay_ms: [wreg+status,2+status,0+btemp+1]
   829                           
   830                           
   831                           ;main.c: 64:      load(socot);;main.c: 65:      for(tocdo=0;tocdo<10;tocdo++);main.c: 66
      +                          :        {;main.c: 67:        a=0xfe;;main.c: 68:           h=0x80;
   832  073C  01F2               	clrf	delay_ms@i
   833  073D  01F3               	clrf	delay_ms@i+1
   834  073E  2F50               	goto	l41
   835  073F                     l754:
   836                           
   837                           ;main.c: 69:        for(sohang=0;sohang<8;sohang++)
   838  073F  01F4               	clrf	delay_ms@j
   839  0740                     l760:
   840  0740  3001               	movlw	1
   841  0741  00FF               	movwf	btemp+1
   842  0742  087F               	movf	btemp+1,w
   843  0743  07F4               	addwf	delay_ms@j,f
   844  0744                     l762:
   845  0744  3078               	movlw	120
   846  0745  0274               	subwf	delay_ms@j,w
   847  0746  1C03               	skipc
   848  0747  2F49               	goto	u91
   849  0748  2F4A               	goto	u90
   850  0749                     u91:
   851  0749  2F40               	goto	l760
   852  074A                     u90:
   853  074A                     l764:
   854  074A  3001               	movlw	1
   855  074B  07F2               	addwf	delay_ms@i,f
   856  074C  1803               	skipnc
   857  074D  0AF3               	incf	delay_ms@i+1,f
   858  074E  3000               	movlw	0
   859  074F  07F3               	addwf	delay_ms@i+1,f
   860  0750                     l41:
   861  0750  0871               	movf	delay_ms@ms+1,w
   862  0751  0273               	subwf	delay_ms@i+1,w
   863  0752  1D03               	skipz
   864  0753  2F56               	goto	u105
   865  0754  0870               	movf	delay_ms@ms,w
   866  0755  0272               	subwf	delay_ms@i,w
   867  0756                     u105:
   868  0756  1C03               	skipc
   869  0757  2F59               	goto	u101
   870  0758  2F5A               	goto	u100
   871  0759                     u101:
   872  0759  2F3F               	goto	l754
   873  075A                     u100:
   874  075A                     l46:
   875  075A  0008               	return
   876  075B                     __end_of_delay_ms:
   877  007E                     btemp	set	126	;btemp
   878  007E                     wtemp0	set	126
   879                           
   880                           	psect	config
   881                           
   882                           ;Config register CONFIG @ 0x2007
   883                           ;	Oscillator Selection bits
   884                           ;	FOSC = HS, HS oscillator
   885                           ;	Watchdog Timer Enable bit
   886                           ;	WDTE = OFF, WDT disabled
   887                           ;	Power-up Timer Enable bit
   888                           ;	PWRTE = OFF, PWRT disabled
   889                           ;	Brown-out Reset Enable bit
   890                           ;	BOREN = ON, BOR enabled
   891                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   892                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   893                           ;	Data EEPROM Memory Code Protection bit
   894                           ;	CPD = OFF, Data EEPROM code protection off
   895                           ;	Flash Program Memory Write Enable bits
   896                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   897                           ;	In-Circuit Debugger Mode bit
   898                           ;	DEBUG = 0x1, unprogrammed default
   899                           ;	Flash Program Memory Code Protection bit
   900                           ;	CP = OFF, Code protection off
   901  2007                     	org	8199
   902  2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    138
    Data        0
    BSS         39
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80      0      33
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_tonghop
    _tonghop->_delay_ms

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     403
                            _tonghop
 ---------------------------------------------------------------------------------
 (1) _tonghop                                              3     3      0     403
                                              5 COMMON     3     3      0
                           _delay_ms
                               _load
 ---------------------------------------------------------------------------------
 (3) _load                                                 3     1      2     167
                                              0 COMMON     3     1      2
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             5     3      2     168
                                              0 COMMON     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _tonghop
     _delay_ms
     _load

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2F       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0      21       5       41.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2F      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Fri Dec 03 10:24:10 2021

                      _a 0078                        _g 007A                        _h 0079  
                      pc 0002                       l41 0750                       l51 077B  
                     l60 0797                       l61 07B5                       l46 075A  
                     l62 07A9                       l63 07AA                       l64 07EC  
                     l58 0793                       u90 074A                       u91 0749  
                     fsr 0004                      l810 07A0                      l802 0796  
                    l820 07BD                      l812 07A7                      l830 07D2  
                    l822 07BF                      l814 07AB                      l760 0740  
                    l752 073C                      l832 07D8                      l824 07C8  
                    l816 07AF                      l808 0798                      l840 072A  
                    l762 0744                      l754 073F                      l834 07DC  
                    l826 07CC                      l818 07B6                      l842 072E  
                    l764 074A                      l772 075C                      l836 07E2  
                    l828 07CE                      l780 077C                      l844 0732  
                    l774 076B                      l766 075B                      l838 07E6  
                    l846 0733                      l776 0771                      l778 0775  
                    l794 078A                      l786 077D                      l796 0792  
                    l788 0789                      u100 075A                      u101 0759  
                    u110 077B                      u111 077A                      u120 07A7  
                    u105 0756                      u121 07A6                      u130 07B5  
                    u131 07B4                      u140 07D8                      u141 07D7  
                    u150 07E2                      u151 07E1                      u160 07EC  
                    u161 07EB                      fsr0 0004                      indf 0000  
        _codedu_lieu_cot 0009                     _main 072A                     _load 075B  
                   btemp 007E                     start 0000                    ?_main 0070  
                  ?_load 0070                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088                    _maled 0040  
                  _tocdo 007B                    _socot 007D                    load@i 0072  
                  load@u 0070                    pclath 000A          __end_of_tonghop 07ED  
                  status 0003                    wtemp0 007E          __initialization 07ED  
           __end_of_main 073C             __end_of_load 077C  __end_of_codedu_lieu_cot 0093  
                 ??_main 0078                   ??_load 0072         __end_of_delay_ms 075B  
                 _sohang 007C                ??_tonghop 0075  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pbssBANK0 0020               __pmaintext 072A  
              ?_delay_ms 0070               __stringtab 0003            _khung_du_lieu 0020  
                __ptext1 077C                  __ptext2 075B                  __ptext3 073C  
             ??_delay_ms 0072                  _tonghop 077C                  clrloop0 0723  
             delay_ms@ms 0070     end_of_initialization 07FC                _PORTCbits 0007  
    start_initialization 07ED              __pbssCOMMON 0078                ___latbits 0002  
      __size_of_delay_ms 001F                __pstrings 0003                 ?_tonghop 0070  
              delay_ms@i 0072                delay_ms@j 0074                clear_ram0 0722  
            __stringbase 0008       __end_of__stringtab 0009                 _delay_ms 073C  
       __size_of_tonghop 0071            __size_of_main 0012            __size_of_load 0021  
              stringcode 0003                 tonghop@i 0077                 stringdir 0003  
               stringtab 0003  
