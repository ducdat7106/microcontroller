

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sun Feb 13 19:36:27 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F877A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  0007                     	;# 
    62  0008                     	;# 
    63  0009                     	;# 
    64  000A                     	;# 
    65  000B                     	;# 
    66  000C                     	;# 
    67  000D                     	;# 
    68  000E                     	;# 
    69  000E                     	;# 
    70  000F                     	;# 
    71  0010                     	;# 
    72  0011                     	;# 
    73  0012                     	;# 
    74  0013                     	;# 
    75  0014                     	;# 
    76  0015                     	;# 
    77  0015                     	;# 
    78  0016                     	;# 
    79  0017                     	;# 
    80  0018                     	;# 
    81  0019                     	;# 
    82  001A                     	;# 
    83  001B                     	;# 
    84  001B                     	;# 
    85  001C                     	;# 
    86  001D                     	;# 
    87  001E                     	;# 
    88  001F                     	;# 
    89  0081                     	;# 
    90  0085                     	;# 
    91  0086                     	;# 
    92  0087                     	;# 
    93  0088                     	;# 
    94  0089                     	;# 
    95  008C                     	;# 
    96  008D                     	;# 
    97  008E                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0098                     	;# 
   103  0099                     	;# 
   104  009C                     	;# 
   105  009D                     	;# 
   106  009E                     	;# 
   107  009F                     	;# 
   108  010C                     	;# 
   109  010D                     	;# 
   110  010E                     	;# 
   111  010F                     	;# 
   112  018C                     	;# 
   113  018D                     	;# 
   114  0000                     	;# 
   115  0001                     	;# 
   116  0002                     	;# 
   117  0003                     	;# 
   118  0004                     	;# 
   119  0005                     	;# 
   120  0006                     	;# 
   121  0007                     	;# 
   122  0008                     	;# 
   123  0009                     	;# 
   124  000A                     	;# 
   125  000B                     	;# 
   126  000C                     	;# 
   127  000D                     	;# 
   128  000E                     	;# 
   129  000E                     	;# 
   130  000F                     	;# 
   131  0010                     	;# 
   132  0011                     	;# 
   133  0012                     	;# 
   134  0013                     	;# 
   135  0014                     	;# 
   136  0015                     	;# 
   137  0015                     	;# 
   138  0016                     	;# 
   139  0017                     	;# 
   140  0018                     	;# 
   141  0019                     	;# 
   142  001A                     	;# 
   143  001B                     	;# 
   144  001B                     	;# 
   145  001C                     	;# 
   146  001D                     	;# 
   147  001E                     	;# 
   148  001F                     	;# 
   149  0081                     	;# 
   150  0085                     	;# 
   151  0086                     	;# 
   152  0087                     	;# 
   153  0088                     	;# 
   154  0089                     	;# 
   155  008C                     	;# 
   156  008D                     	;# 
   157  008E                     	;# 
   158  0091                     	;# 
   159  0092                     	;# 
   160  0093                     	;# 
   161  0094                     	;# 
   162  0098                     	;# 
   163  0099                     	;# 
   164  009C                     	;# 
   165  009D                     	;# 
   166  009E                     	;# 
   167  009F                     	;# 
   168  010C                     	;# 
   169  010D                     	;# 
   170  010E                     	;# 
   171  010F                     	;# 
   172  018C                     	;# 
   173  018D                     	;# 
   174  0000                     	;# 
   175  0001                     	;# 
   176  0002                     	;# 
   177  0003                     	;# 
   178  0004                     	;# 
   179  0005                     	;# 
   180  0006                     	;# 
   181  0007                     	;# 
   182  0008                     	;# 
   183  0009                     	;# 
   184  000A                     	;# 
   185  000B                     	;# 
   186  000C                     	;# 
   187  000D                     	;# 
   188  000E                     	;# 
   189  000E                     	;# 
   190  000F                     	;# 
   191  0010                     	;# 
   192  0011                     	;# 
   193  0012                     	;# 
   194  0013                     	;# 
   195  0014                     	;# 
   196  0015                     	;# 
   197  0015                     	;# 
   198  0016                     	;# 
   199  0017                     	;# 
   200  0018                     	;# 
   201  0019                     	;# 
   202  001A                     	;# 
   203  001B                     	;# 
   204  001B                     	;# 
   205  001C                     	;# 
   206  001D                     	;# 
   207  001E                     	;# 
   208  001F                     	;# 
   209  0081                     	;# 
   210  0085                     	;# 
   211  0086                     	;# 
   212  0087                     	;# 
   213  0088                     	;# 
   214  0089                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0091                     	;# 
   219  0092                     	;# 
   220  0093                     	;# 
   221  0094                     	;# 
   222  0098                     	;# 
   223  0099                     	;# 
   224  009C                     	;# 
   225  009D                     	;# 
   226  009E                     	;# 
   227  009F                     	;# 
   228  010C                     	;# 
   229  010D                     	;# 
   230  010E                     	;# 
   231  010F                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0047                     _RD7	set	71
   235  0046                     _RD6	set	70
   236  0045                     _RD5	set	69
   237  0044                     _RD4	set	68
   238  0043                     _RD3	set	67
   239  0042                     _RD2	set	66
   240  0088                     _TRISD	set	136
   241  009F                     _ADCON1	set	159
   242  0443                     _TRISD3	set	1091
   243  0442                     _TRISD2	set	1090
   244                           
   245                           	psect	strings
   246  0003                     __pstrings:
   247  0003                     stringtab:
   248  0003                     __stringtab:
   249  0003                     stringcode:	
   250                           ;	String table - string pointers are 1 byte each
   251                           
   252  0003                     stringdir:
   253  0003  3000               	movlw	high stringdir
   254  0004  008A               	movwf	10
   255  0005  0804               	movf	4,w
   256  0006  0A84               	incf	4,f
   257  0007  0782               	addwf	2,f
   258  0008                     __stringbase:
   259  0008  3400               	retlw	0
   260  0009                     __end_of__stringtab:
   261  0009                     STR_1:
   262  0009  3444               	retlw	68	;'D'
   263  000A  3455               	retlw	85	;'U'
   264  000B  3443               	retlw	67	;'C'
   265  000C  3420               	retlw	32	;' '
   266  000D  3444               	retlw	68	;'D'
   267  000E  3441               	retlw	65	;'A'
   268  000F  3454               	retlw	84	;'T'
   269  0010  3400               	retlw	0
   270                           
   271                           	psect	cinit
   272  07FC                     start_initialization:	
   273                           ; #config settings
   274                           
   275  07FC                     __initialization:
   276  07FC                     end_of_initialization:	
   277                           ;End of C runtime variable initialization code
   278                           
   279  07FC                     __end_of__initialization:
   280  07FC  0183               	clrf	3
   281  07FD  120A  118A  2D01   	ljmp	_main	;jump to C main() function
   282                           
   283                           	psect	cstackCOMMON
   284  0070                     __pcstackCOMMON:
   285  0070                     ?_LCD_Init:
   286  0070                     ?_LCD_Write_String:	
   287                           ; 1 bytes @ 0x0
   288                           
   289  0070                     ?_LCD_DATA:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ??_LCD_DATA:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_LCD_CMD:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_main:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_LCD_Write_Char:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?___aldiv:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ?___almod:	
   308                           ; 4 bytes @ 0x0
   309                           
   310  0070                     LCD_DATA@Data:	
   311                           ; 4 bytes @ 0x0
   312                           
   313  0070                     ___aldiv@divisor:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ___almod@divisor:	
   317                           ; 4 bytes @ 0x0
   318                           
   319                           
   320                           ; 4 bytes @ 0x0
   321  0070                     	ds	1
   322  0071                     ??_LCD_CMD:
   323  0071                     ??_LCD_Write_Char:	
   324                           ; 1 bytes @ 0x1
   325                           
   326                           
   327                           ; 1 bytes @ 0x1
   328  0071                     	ds	2
   329  0073                     LCD_Write_Char@Low4:
   330  0073                     LCD_CMD@CMD:	
   331                           ; 1 bytes @ 0x3
   332                           
   333                           
   334                           ; 1 bytes @ 0x3
   335  0073                     	ds	1
   336  0074                     ??_LCD_Init:
   337  0074                     ?_LCD_Set_Cursor:	
   338                           ; 1 bytes @ 0x4
   339                           
   340  0074                     LCD_Set_Cursor@c:	
   341                           ; 1 bytes @ 0x4
   342                           
   343  0074                     LCD_Write_Char@High4:	
   344                           ; 1 bytes @ 0x4
   345                           
   346  0074                     ___aldiv@dividend:	
   347                           ; 1 bytes @ 0x4
   348                           
   349  0074                     ___almod@dividend:	
   350                           ; 4 bytes @ 0x4
   351                           
   352                           
   353                           ; 4 bytes @ 0x4
   354  0074                     	ds	1
   355  0075                     ??_LCD_Set_Cursor:
   356  0075                     LCD_Write_Char@Data:	
   357                           ; 1 bytes @ 0x5
   358                           
   359                           
   360                           ; 1 bytes @ 0x5
   361  0075                     	ds	1
   362  0076                     ??_LCD_Write_String:
   363  0076                     LCD_Write_String@i:	
   364                           ; 1 bytes @ 0x6
   365                           
   366                           
   367                           ; 2 bytes @ 0x6
   368  0076                     	ds	1
   369  0077                     LCD_Set_Cursor@r:
   370                           
   371                           ; 1 bytes @ 0x7
   372  0077                     	ds	1
   373  0078                     ??___aldiv:
   374  0078                     ??___almod:	
   375                           ; 1 bytes @ 0x8
   376                           
   377  0078                     LCD_Set_Cursor@Low4:	
   378                           ; 1 bytes @ 0x8
   379                           
   380  0078                     LCD_Write_String@str:	
   381                           ; 1 bytes @ 0x8
   382                           
   383                           
   384                           ; 1 bytes @ 0x8
   385  0078                     	ds	1
   386  0079                     LCD_Set_Cursor@High4:
   387  0079                     ___almod@counter:	
   388                           ; 1 bytes @ 0x9
   389                           
   390                           
   391                           ; 1 bytes @ 0x9
   392  0079                     	ds	1
   393  007A                     LCD_Set_Cursor@Temp:
   394  007A                     ___almod@sign:	
   395                           ; 1 bytes @ 0xA
   396                           
   397                           
   398                           ; 1 bytes @ 0xA
   399  007A                     	ds	1
   400  007B                     ??_LCD_Write_Number:
   401                           
   402                           ; 1 bytes @ 0xB
   403  007B                     	ds	2
   404  007D                     ??_main:
   405                           
   406                           	psect	cstackBANK0
   407  0020                     __pcstackBANK0:	
   408                           ; 1 bytes @ 0xD
   409                           
   410  0020                     ___aldiv@counter:
   411                           
   412                           ; 1 bytes @ 0x0
   413  0020                     	ds	1
   414  0021                     ___aldiv@sign:
   415                           
   416                           ; 1 bytes @ 0x1
   417  0021                     	ds	1
   418  0022                     ___aldiv@quotient:
   419                           
   420                           ; 4 bytes @ 0x2
   421  0022                     	ds	4
   422  0026                     ?_LCD_Write_Number:
   423  0026                     LCD_Write_Number@number:	
   424                           ; 1 bytes @ 0x6
   425                           
   426                           
   427                           ; 4 bytes @ 0x6
   428  0026                     	ds	4
   429  002A                     LCD_Write_Number@num:
   430                           
   431                           ; 20 bytes @ 0xA
   432  002A                     	ds	20
   433  003E                     LCD_Write_Number@length:
   434                           
   435                           ; 2 bytes @ 0x1E
   436  003E                     	ds	2
   437  0040                     LCD_Write_Number@c:
   438                           
   439                           ; 1 bytes @ 0x20
   440  0040                     	ds	1
   441  0041                     LCD_Write_Number@p:
   442                           
   443                           ; 2 bytes @ 0x21
   444  0041                     	ds	2
   445                           
   446                           	psect	maintext
   447  0501                     __pmaintext:	
   448 ;;
   449 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   450 ;;
   451 ;; *************** function _main *****************
   452 ;; Defined at:
   453 ;;		line 11 in file "main.c"
   454 ;; Parameters:    Size  Location     Type
   455 ;;		None
   456 ;; Auto vars:     Size  Location     Type
   457 ;;		None
   458 ;; Return value:  Size  Location     Type
   459 ;;                  1    wreg      void 
   460 ;; Registers used:
   461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   462 ;; Tracked objects:
   463 ;;		On entry : B00/0
   464 ;;		On exit  : 0/0
   465 ;;		Unchanged: 0/0
   466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   467 ;;      Params:         0       0       0       0       0
   468 ;;      Locals:         0       0       0       0       0
   469 ;;      Temps:          0       0       0       0       0
   470 ;;      Totals:         0       0       0       0       0
   471 ;;Total ram usage:        0 bytes
   472 ;; Hardware stack levels required when called: 3
   473 ;; This function calls:
   474 ;;		_LCD_Init
   475 ;;		_LCD_Set_Cursor
   476 ;;		_LCD_Write_Number
   477 ;;		_LCD_Write_String
   478 ;; This function is called by:
   479 ;;		Startup code after reset
   480 ;; This function uses a non-reentrant model
   481 ;;
   482                           
   483                           
   484                           ;psect for function _main
   485  0501                     _main:
   486  0501                     l1155:	
   487                           ;incstack = 0
   488                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   489                           
   490                           
   491                           ;main.c: 13:     ADCON1 = 0x06;
   492  0501  3006               	movlw	6
   493  0502  1683               	bsf	3,5	;RP0=1, select bank1
   494  0503  1303               	bcf	3,6	;RP1=0, select bank1
   495  0504  009F               	movwf	31	;volatile
   496  0505                     l1157:
   497                           
   498                           ;main.c: 15:     LCD_Init();
   499  0505  120A  118A  25D8  120A  118A  	fcall	_LCD_Init
   500  050A                     l1159:
   501                           
   502                           ;main.c: 17:     LCD_Set_Cursor(1,1);
   503  050A  01F4               	clrf	LCD_Set_Cursor@c
   504  050B  0AF4               	incf	LCD_Set_Cursor@c,f
   505  050C  3001               	movlw	1
   506  050D  120A  118A  2533  120A  118A  	fcall	_LCD_Set_Cursor
   507  0512                     l1161:
   508                           
   509                           ;main.c: 18:     LCD_Write_String("DUC DAT");
   510  0512  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   511  0513  120A  118A  24AE  120A  118A  	fcall	_LCD_Write_String
   512  0518                     l1163:
   513                           
   514                           ;main.c: 19:     LCD_Set_Cursor(2,1);
   515  0518  01F4               	clrf	LCD_Set_Cursor@c
   516  0519  0AF4               	incf	LCD_Set_Cursor@c,f
   517  051A  3002               	movlw	2
   518  051B  120A  118A  2533  120A  118A  	fcall	_LCD_Set_Cursor
   519  0520                     l1165:
   520                           
   521                           ;main.c: 20:     LCD_Write_Number(300720001);
   522  0520  3011               	movlw	17
   523  0521  1283               	bcf	3,5	;RP0=0, select bank0
   524  0522  1303               	bcf	3,6	;RP1=0, select bank0
   525  0523  00A9               	movwf	LCD_Write_Number@number+3
   526  0524  30EC               	movlw	236
   527  0525  00A8               	movwf	LCD_Write_Number@number+2
   528  0526  309F               	movlw	159
   529  0527  00A7               	movwf	LCD_Write_Number@number+1
   530  0528  3081               	movlw	129
   531  0529  00A6               	movwf	LCD_Write_Number@number
   532  052A  120A  118A  2757  120A  118A  	fcall	_LCD_Write_Number
   533  052F                     l15:	
   534                           ;main.c: 22:     while(1)
   535                           
   536  052F                     l16:	
   537                           ;main.c: 23:     {;main.c: 24:     }
   538                           
   539  052F  2D2F               	goto	l15
   540  0530  120A  118A  2800   	ljmp	start
   541  0533                     __end_of_main:
   542                           
   543                           	psect	text1
   544  04AE                     __ptext1:	
   545 ;; *************** function _LCD_Write_String *****************
   546 ;; Defined at:
   547 ;;		line 73 in file "lcd.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;  str             1    wreg     PTR unsigned char 
   550 ;;		 -> STR_1(8), 
   551 ;; Auto vars:     Size  Location     Type
   552 ;;  str             1    8[COMMON] PTR unsigned char 
   553 ;;		 -> STR_1(8), 
   554 ;;  i               2    6[COMMON] int 
   555 ;; Return value:  Size  Location     Type
   556 ;;                  1    wreg      void 
   557 ;; Registers used:
   558 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   559 ;; Tracked objects:
   560 ;;		On entry : 0/0
   561 ;;		On exit  : 0/0
   562 ;;		Unchanged: 0/0
   563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   564 ;;      Params:         0       0       0       0       0
   565 ;;      Locals:         3       0       0       0       0
   566 ;;      Temps:          0       0       0       0       0
   567 ;;      Totals:         3       0       0       0       0
   568 ;;Total ram usage:        3 bytes
   569 ;; Hardware stack levels used: 1
   570 ;; Hardware stack levels required when called: 2
   571 ;; This function calls:
   572 ;;		_LCD_Write_Char
   573 ;; This function is called by:
   574 ;;		_main
   575 ;;		_LCD_Write_StringXY
   576 ;; This function uses a non-reentrant model
   577 ;;
   578                           
   579                           
   580                           ;psect for function _LCD_Write_String
   581  04AE                     _LCD_Write_String:
   582                           
   583                           ;incstack = 0
   584                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   585                           ;LCD_Write_String@str stored from wreg
   586  04AE  00F8               	movwf	LCD_Write_String@str
   587  04AF                     l1115:
   588                           
   589                           ;lcd.c: 73: void LCD_Write_String(char *str);lcd.c: 74: {;lcd.c: 75:   int i;;lcd.c: 76:
      +                             for(i=0;str[i]!='\0';i++)
   590  04AF  01F6               	clrf	LCD_Write_String@i
   591  04B0  01F7               	clrf	LCD_Write_String@i+1
   592  04B1  2CC5               	goto	l1121
   593  04B2                     l1117:
   594                           
   595                           ;lcd.c: 77:     LCD_Write_Char(str[i]);
   596  04B2  0876               	movf	LCD_Write_String@i,w
   597  04B3  0778               	addwf	LCD_Write_String@str,w
   598  04B4  0084               	movwf	4
   599  04B5  120A  118A  2003  120A  118A  	fcall	stringdir
   600  04BA  120A  118A  2585  120A  118A  	fcall	_LCD_Write_Char
   601  04BF                     l1119:
   602  04BF  3001               	movlw	1
   603  04C0  07F6               	addwf	LCD_Write_String@i,f
   604  04C1  1803               	skipnc
   605  04C2  0AF7               	incf	LCD_Write_String@i+1,f
   606  04C3  3000               	movlw	0
   607  04C4  07F7               	addwf	LCD_Write_String@i+1,f
   608  04C5                     l1121:
   609  04C5  0876               	movf	LCD_Write_String@i,w
   610  04C6  0778               	addwf	LCD_Write_String@str,w
   611  04C7  0084               	movwf	4
   612  04C8  120A  118A  2003  120A  118A  	fcall	stringdir
   613  04CD  3A00               	xorlw	0
   614  04CE  1D03               	skipz
   615  04CF  2CD1               	goto	u641
   616  04D0  2CD2               	goto	u640
   617  04D1                     u641:
   618  04D1  2CB2               	goto	l1117
   619  04D2                     u640:
   620  04D2                     l63:
   621  04D2  0008               	return
   622  04D3                     __end_of_LCD_Write_String:
   623                           
   624                           	psect	text2
   625  0757                     __ptext2:	
   626 ;; *************** function _LCD_Write_Number *****************
   627 ;; Defined at:
   628 ;;		line 92 in file "lcd.c"
   629 ;; Parameters:    Size  Location     Type
   630 ;;  number          4    6[BANK0 ] long 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  p               2   33[BANK0 ] int 
   633 ;;  num            20   10[BANK0 ] unsigned int [10]
   634 ;;  length          2   30[BANK0 ] int 
   635 ;;  c               1   32[BANK0 ] unsigned char 
   636 ;; Return value:  Size  Location     Type
   637 ;;                  1    wreg      void 
   638 ;; Registers used:
   639 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   640 ;; Tracked objects:
   641 ;;		On entry : 0/0
   642 ;;		On exit  : 0/0
   643 ;;		Unchanged: 0/0
   644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   645 ;;      Params:         0       4       0       0       0
   646 ;;      Locals:         0      25       0       0       0
   647 ;;      Temps:          2       0       0       0       0
   648 ;;      Totals:         2      29       0       0       0
   649 ;;Total ram usage:       31 bytes
   650 ;; Hardware stack levels used: 1
   651 ;; Hardware stack levels required when called: 2
   652 ;; This function calls:
   653 ;;		_LCD_Write_Char
   654 ;;		___aldiv
   655 ;;		___almod
   656 ;; This function is called by:
   657 ;;		_main
   658 ;;		_LCD_Write_NumberXY
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           
   663                           ;psect for function _LCD_Write_Number
   664  0757                     _LCD_Write_Number:
   665  0757                     l1123:	
   666                           ;incstack = 0
   667                           ; Regs used in _LCD_Write_Number: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   668                           
   669                           
   670                           ;lcd.c: 92: void LCD_Write_Number(long number);lcd.c: 93: {;lcd.c: 94:     unsigned int 
      +                          num[10];;lcd.c: 95:     char c;;lcd.c: 97:     int length=-1;
   671  0757  30FF               	movlw	255
   672  0758  1283               	bcf	3,5	;RP0=0, select bank0
   673  0759  1303               	bcf	3,6	;RP1=0, select bank0
   674  075A  00BE               	movwf	LCD_Write_Number@length
   675  075B  30FF               	movlw	255
   676  075C  00BF               	movwf	LCD_Write_Number@length+1
   677                           
   678                           ;lcd.c: 99:     if(number == 0)
   679  075D  0829               	movf	LCD_Write_Number@number+3,w
   680  075E  0428               	iorwf	LCD_Write_Number@number+2,w
   681  075F  0427               	iorwf	LCD_Write_Number@number+1,w
   682  0760  0426               	iorwf	LCD_Write_Number@number,w
   683  0761  1D03               	skipz
   684  0762  2F64               	goto	u651
   685  0763  2F65               	goto	u650
   686  0764                     u651:
   687  0764  2F71               	goto	l1129
   688  0765                     u650:
   689  0765                     l1125:
   690                           
   691                           ;lcd.c: 100:     {;lcd.c: 101:         c = (char)(number + '0');
   692  0765  0826               	movf	LCD_Write_Number@number,w
   693  0766  3E30               	addlw	48
   694  0767  00FB               	movwf	??_LCD_Write_Number
   695  0768  087B               	movf	??_LCD_Write_Number,w
   696  0769  00C0               	movwf	LCD_Write_Number@c
   697  076A                     l1127:
   698                           
   699                           ;lcd.c: 102:         LCD_Write_Char(c);
   700  076A  0840               	movf	LCD_Write_Number@c,w
   701  076B  120A  118A  2585  120A  118A  	fcall	_LCD_Write_Char
   702                           
   703                           ;lcd.c: 103:     }
   704  0770  2FFB               	goto	l80
   705  0771                     l1129:
   706  0771  0829               	movf	LCD_Write_Number@number+3,w
   707  0772  0428               	iorwf	LCD_Write_Number@number+2,w
   708  0773  0427               	iorwf	LCD_Write_Number@number+1,w
   709  0774  0426               	iorwf	LCD_Write_Number@number,w
   710  0775  1903               	skipnz
   711  0776  2F78               	goto	u661
   712  0777  2F79               	goto	u660
   713  0778                     u661:
   714  0778  2FFB               	goto	l80
   715  0779                     u660:
   716  0779  2FC3               	goto	l1139
   717  077A                     l1133:
   718                           
   719                           ;lcd.c: 107:         {;lcd.c: 108:             length++;
   720  077A  3001               	movlw	1
   721  077B  1283               	bcf	3,5	;RP0=0, select bank0
   722  077C  1303               	bcf	3,6	;RP1=0, select bank0
   723  077D  07BE               	addwf	LCD_Write_Number@length,f
   724  077E  1803               	skipnc
   725  077F  0ABF               	incf	LCD_Write_Number@length+1,f
   726  0780  3000               	movlw	0
   727  0781  07BF               	addwf	LCD_Write_Number@length+1,f
   728  0782                     l1135:
   729                           
   730                           ;lcd.c: 109:             num[length]=number%10;
   731  0782  3000               	movlw	0
   732  0783  00F3               	movwf	___almod@divisor+3
   733  0784  3000               	movlw	0
   734  0785  00F2               	movwf	___almod@divisor+2
   735  0786  3000               	movlw	0
   736  0787  00F1               	movwf	___almod@divisor+1
   737  0788  300A               	movlw	10
   738  0789  00F0               	movwf	___almod@divisor
   739  078A  0829               	movf	LCD_Write_Number@number+3,w
   740  078B  00F7               	movwf	___almod@dividend+3
   741  078C  0828               	movf	LCD_Write_Number@number+2,w
   742  078D  00F6               	movwf	___almod@dividend+2
   743  078E  0827               	movf	LCD_Write_Number@number+1,w
   744  078F  00F5               	movwf	___almod@dividend+1
   745  0790  0826               	movf	LCD_Write_Number@number,w
   746  0791  00F4               	movwf	___almod@dividend
   747  0792  120A  118A  2635  120A  118A  	fcall	___almod
   748  0797  1283               	bcf	3,5	;RP0=0, select bank0
   749  0798  1303               	bcf	3,6	;RP1=0, select bank0
   750  0799  083E               	movf	LCD_Write_Number@length,w
   751  079A  00FB               	movwf	??_LCD_Write_Number
   752  079B  077B               	addwf	??_LCD_Write_Number,w
   753  079C  3E2A               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
   754  079D  0084               	movwf	4
   755  079E  0870               	movf	?___almod,w
   756  079F  1383               	bcf	3,7	;select IRP bank0
   757  07A0  0080               	movwf	0
   758  07A1  0A84               	incf	4,f
   759  07A2  0871               	movf	?___almod+1,w
   760  07A3  0080               	movwf	0
   761  07A4                     l1137:
   762                           
   763                           ;lcd.c: 110:             number = number/10;
   764  07A4  3000               	movlw	0
   765  07A5  00F3               	movwf	___aldiv@divisor+3
   766  07A6  3000               	movlw	0
   767  07A7  00F2               	movwf	___aldiv@divisor+2
   768  07A8  3000               	movlw	0
   769  07A9  00F1               	movwf	___aldiv@divisor+1
   770  07AA  300A               	movlw	10
   771  07AB  00F0               	movwf	___aldiv@divisor
   772  07AC  0829               	movf	LCD_Write_Number@number+3,w
   773  07AD  00F7               	movwf	___aldiv@dividend+3
   774  07AE  0828               	movf	LCD_Write_Number@number+2,w
   775  07AF  00F6               	movwf	___aldiv@dividend+2
   776  07B0  0827               	movf	LCD_Write_Number@number+1,w
   777  07B1  00F5               	movwf	___aldiv@dividend+1
   778  07B2  0826               	movf	LCD_Write_Number@number,w
   779  07B3  00F4               	movwf	___aldiv@dividend
   780  07B4  120A  118A  26BA  120A  118A  	fcall	___aldiv
   781  07B9  0873               	movf	?___aldiv+3,w
   782  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   783  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   784  07BC  00A9               	movwf	LCD_Write_Number@number+3
   785  07BD  0872               	movf	?___aldiv+2,w
   786  07BE  00A8               	movwf	LCD_Write_Number@number+2
   787  07BF  0871               	movf	?___aldiv+1,w
   788  07C0  00A7               	movwf	LCD_Write_Number@number+1
   789  07C1  0870               	movf	?___aldiv,w
   790  07C2  00A6               	movwf	LCD_Write_Number@number
   791  07C3                     l1139:
   792                           
   793                           ;lcd.c: 106:         while(number>0)
   794  07C3  1BA9               	btfsc	LCD_Write_Number@number+3,7
   795  07C4  2FD6               	goto	u670
   796  07C5  0829               	movf	LCD_Write_Number@number+3,w
   797  07C6  1D03               	btfss	3,2
   798  07C7  2FD5               	goto	u671
   799  07C8  0828               	movf	LCD_Write_Number@number+2,w
   800  07C9  1D03               	btfss	3,2
   801  07CA  2FD5               	goto	u671
   802  07CB  0827               	movf	LCD_Write_Number@number+1,w
   803  07CC  1D03               	btfss	3,2
   804  07CD  2FD5               	goto	u671
   805  07CE  3001               	movlw	1
   806  07CF  0226               	subwf	LCD_Write_Number@number,w
   807  07D0  1D03               	skipz
   808  07D1  2FD2               	goto	u673
   809  07D2                     u673:
   810  07D2  1803               	btfsc	3,0
   811  07D3  2FD5               	goto	u671
   812  07D4  2FD6               	goto	u670
   813  07D5                     u671:
   814  07D5  2F7A               	goto	l1133
   815  07D6                     u670:
   816  07D6                     l1141:
   817                           
   818                           ;lcd.c: 114:         for(int p=length; p>=0; p--)
   819  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   820  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   821  07D8  083F               	movf	LCD_Write_Number@length+1,w
   822  07D9  00C2               	movwf	LCD_Write_Number@p+1
   823  07DA  083E               	movf	LCD_Write_Number@length,w
   824  07DB  00C1               	movwf	LCD_Write_Number@p
   825  07DC                     l1143:
   826  07DC  1FC2               	btfss	LCD_Write_Number@p+1,7
   827  07DD  2FDF               	goto	u681
   828  07DE  2FE0               	goto	u680
   829  07DF                     u681:
   830  07DF  2FE1               	goto	l1147
   831  07E0                     u680:
   832  07E0  2FFB               	goto	l80
   833  07E1                     l1147:
   834                           
   835                           ;lcd.c: 115:         {;lcd.c: 116:             c = (char)(num[p] + '0');
   836  07E1  0841               	movf	LCD_Write_Number@p,w
   837  07E2  00FB               	movwf	??_LCD_Write_Number
   838  07E3  077B               	addwf	??_LCD_Write_Number,w
   839  07E4  3E2A               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
   840  07E5  0084               	movwf	4
   841  07E6  1383               	bcf	3,7	;select IRP bank0
   842  07E7  0800               	movf	0,w
   843  07E8  3E30               	addlw	48
   844  07E9  00FC               	movwf	??_LCD_Write_Number+1
   845  07EA  087C               	movf	??_LCD_Write_Number+1,w
   846  07EB  00C0               	movwf	LCD_Write_Number@c
   847  07EC                     l1149:
   848                           
   849                           ;lcd.c: 117:             LCD_Write_Char(c);
   850  07EC  0840               	movf	LCD_Write_Number@c,w
   851  07ED  120A  118A  2585  120A  118A  	fcall	_LCD_Write_Char
   852  07F2                     l1151:
   853                           
   854                           ;lcd.c: 118:         }
   855  07F2  30FF               	movlw	255
   856  07F3  1283               	bcf	3,5	;RP0=0, select bank0
   857  07F4  1303               	bcf	3,6	;RP1=0, select bank0
   858  07F5  07C1               	addwf	LCD_Write_Number@p,f
   859  07F6  1803               	skipnc
   860  07F7  0AC2               	incf	LCD_Write_Number@p+1,f
   861  07F8  30FF               	movlw	255
   862  07F9  07C2               	addwf	LCD_Write_Number@p+1,f
   863  07FA  2FDC               	goto	l1143
   864  07FB                     l80:
   865  07FB  0008               	return
   866  07FC                     __end_of_LCD_Write_Number:
   867                           
   868                           	psect	text3
   869  0635                     __ptext3:	
   870 ;; *************** function ___almod *****************
   871 ;; Defined at:
   872 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\almod.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;  divisor         4    0[COMMON] long 
   875 ;;  dividend        4    4[COMMON] long 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;  sign            1   10[COMMON] unsigned char 
   878 ;;  counter         1    9[COMMON] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  4    0[COMMON] long 
   881 ;; Registers used:
   882 ;;		wreg, status,2, status,0
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   888 ;;      Params:         8       0       0       0       0
   889 ;;      Locals:         2       0       0       0       0
   890 ;;      Temps:          1       0       0       0       0
   891 ;;      Totals:        11       0       0       0       0
   892 ;;Total ram usage:       11 bytes
   893 ;; Hardware stack levels used: 1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_LCD_Write_Number
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           
   902                           ;psect for function ___almod
   903  0635                     ___almod:
   904  0635                     l1029:	
   905                           ;incstack = 0
   906                           ; Regs used in ___almod: [wreg+status,2+status,0]
   907                           
   908  0635  01FA               	clrf	___almod@sign
   909  0636                     l1031:
   910  0636  1FF7               	btfss	___almod@dividend+3,7
   911  0637  2E39               	goto	u511
   912  0638  2E3A               	goto	u510
   913  0639                     u511:
   914  0639  2E47               	goto	l269
   915  063A                     u510:
   916  063A                     l1033:
   917  063A  09F4               	comf	___almod@dividend,f
   918  063B  09F5               	comf	___almod@dividend+1,f
   919  063C  09F6               	comf	___almod@dividend+2,f
   920  063D  09F7               	comf	___almod@dividend+3,f
   921  063E  0AF4               	incf	___almod@dividend,f
   922  063F  1903               	skipnz
   923  0640  0AF5               	incf	___almod@dividend+1,f
   924  0641  1903               	skipnz
   925  0642  0AF6               	incf	___almod@dividend+2,f
   926  0643  1903               	skipnz
   927  0644  0AF7               	incf	___almod@dividend+3,f
   928  0645  01FA               	clrf	___almod@sign
   929  0646  0AFA               	incf	___almod@sign,f
   930  0647                     l269:
   931  0647  1FF3               	btfss	___almod@divisor+3,7
   932  0648  2E4A               	goto	u521
   933  0649  2E4B               	goto	u520
   934  064A                     u521:
   935  064A  2E56               	goto	l1037
   936  064B                     u520:
   937  064B                     l1035:
   938  064B  09F0               	comf	___almod@divisor,f
   939  064C  09F1               	comf	___almod@divisor+1,f
   940  064D  09F2               	comf	___almod@divisor+2,f
   941  064E  09F3               	comf	___almod@divisor+3,f
   942  064F  0AF0               	incf	___almod@divisor,f
   943  0650  1903               	skipnz
   944  0651  0AF1               	incf	___almod@divisor+1,f
   945  0652  1903               	skipnz
   946  0653  0AF2               	incf	___almod@divisor+2,f
   947  0654  1903               	skipnz
   948  0655  0AF3               	incf	___almod@divisor+3,f
   949  0656                     l1037:
   950  0656  0873               	movf	___almod@divisor+3,w
   951  0657  0472               	iorwf	___almod@divisor+2,w
   952  0658  0471               	iorwf	___almod@divisor+1,w
   953  0659  0470               	iorwf	___almod@divisor,w
   954  065A  1903               	skipnz
   955  065B  2E5D               	goto	u531
   956  065C  2E5E               	goto	u530
   957  065D                     u531:
   958  065D  2EA1               	goto	l1053
   959  065E                     u530:
   960  065E                     l1039:
   961  065E  01F9               	clrf	___almod@counter
   962  065F  0AF9               	incf	___almod@counter,f
   963  0660  2E6E               	goto	l1043
   964  0661                     l1041:
   965  0661  3001               	movlw	1
   966  0662  00F8               	movwf	??___almod
   967  0663                     u545:
   968  0663  1003               	clrc
   969  0664  0DF0               	rlf	___almod@divisor,f
   970  0665  0DF1               	rlf	___almod@divisor+1,f
   971  0666  0DF2               	rlf	___almod@divisor+2,f
   972  0667  0DF3               	rlf	___almod@divisor+3,f
   973  0668  0BF8               	decfsz	??___almod,f
   974  0669  2E63               	goto	u545
   975  066A  3001               	movlw	1
   976  066B  00F8               	movwf	??___almod
   977  066C  0878               	movf	??___almod,w
   978  066D  07F9               	addwf	___almod@counter,f
   979  066E                     l1043:
   980  066E  1FF3               	btfss	___almod@divisor+3,7
   981  066F  2E71               	goto	u551
   982  0670  2E72               	goto	u550
   983  0671                     u551:
   984  0671  2E61               	goto	l1041
   985  0672                     u550:
   986  0672                     l1045:
   987  0672  0873               	movf	___almod@divisor+3,w
   988  0673  0277               	subwf	___almod@dividend+3,w
   989  0674  1D03               	skipz
   990  0675  2E80               	goto	u565
   991  0676  0872               	movf	___almod@divisor+2,w
   992  0677  0276               	subwf	___almod@dividend+2,w
   993  0678  1D03               	skipz
   994  0679  2E80               	goto	u565
   995  067A  0871               	movf	___almod@divisor+1,w
   996  067B  0275               	subwf	___almod@dividend+1,w
   997  067C  1D03               	skipz
   998  067D  2E80               	goto	u565
   999  067E  0870               	movf	___almod@divisor,w
  1000  067F  0274               	subwf	___almod@dividend,w
  1001  0680                     u565:
  1002  0680  1C03               	skipc
  1003  0681  2E83               	goto	u561
  1004  0682  2E84               	goto	u560
  1005  0683                     u561:
  1006  0683  2E92               	goto	l1049
  1007  0684                     u560:
  1008  0684                     l1047:
  1009  0684  0870               	movf	___almod@divisor,w
  1010  0685  02F4               	subwf	___almod@dividend,f
  1011  0686  0871               	movf	___almod@divisor+1,w
  1012  0687  1C03               	skipc
  1013  0688  0F71               	incfsz	___almod@divisor+1,w
  1014  0689  02F5               	subwf	___almod@dividend+1,f
  1015  068A  0872               	movf	___almod@divisor+2,w
  1016  068B  1C03               	skipc
  1017  068C  0F72               	incfsz	___almod@divisor+2,w
  1018  068D  02F6               	subwf	___almod@dividend+2,f
  1019  068E  0873               	movf	___almod@divisor+3,w
  1020  068F  1C03               	skipc
  1021  0690  0F73               	incfsz	___almod@divisor+3,w
  1022  0691  02F7               	subwf	___almod@dividend+3,f
  1023  0692                     l1049:
  1024  0692  3001               	movlw	1
  1025  0693                     u575:
  1026  0693  1003               	clrc
  1027  0694  0CF3               	rrf	___almod@divisor+3,f
  1028  0695  0CF2               	rrf	___almod@divisor+2,f
  1029  0696  0CF1               	rrf	___almod@divisor+1,f
  1030  0697  0CF0               	rrf	___almod@divisor,f
  1031  0698  3EFF               	addlw	-1
  1032  0699  1D03               	skipz
  1033  069A  2E93               	goto	u575
  1034  069B                     l1051:
  1035  069B  3001               	movlw	1
  1036  069C  02F9               	subwf	___almod@counter,f
  1037  069D  1D03               	btfss	3,2
  1038  069E  2EA0               	goto	u581
  1039  069F  2EA1               	goto	u580
  1040  06A0                     u581:
  1041  06A0  2E72               	goto	l1045
  1042  06A1                     u580:
  1043  06A1                     l1053:
  1044  06A1  087A               	movf	___almod@sign,w
  1045  06A2  1903               	btfsc	3,2
  1046  06A3  2EA5               	goto	u591
  1047  06A4  2EA6               	goto	u590
  1048  06A5                     u591:
  1049  06A5  2EB1               	goto	l1057
  1050  06A6                     u590:
  1051  06A6                     l1055:
  1052  06A6  09F4               	comf	___almod@dividend,f
  1053  06A7  09F5               	comf	___almod@dividend+1,f
  1054  06A8  09F6               	comf	___almod@dividend+2,f
  1055  06A9  09F7               	comf	___almod@dividend+3,f
  1056  06AA  0AF4               	incf	___almod@dividend,f
  1057  06AB  1903               	skipnz
  1058  06AC  0AF5               	incf	___almod@dividend+1,f
  1059  06AD  1903               	skipnz
  1060  06AE  0AF6               	incf	___almod@dividend+2,f
  1061  06AF  1903               	skipnz
  1062  06B0  0AF7               	incf	___almod@dividend+3,f
  1063  06B1                     l1057:
  1064  06B1  0877               	movf	___almod@dividend+3,w
  1065  06B2  00F3               	movwf	?___almod+3
  1066  06B3  0876               	movf	___almod@dividend+2,w
  1067  06B4  00F2               	movwf	?___almod+2
  1068  06B5  0875               	movf	___almod@dividend+1,w
  1069  06B6  00F1               	movwf	?___almod+1
  1070  06B7  0874               	movf	___almod@dividend,w
  1071  06B8  00F0               	movwf	?___almod
  1072  06B9                     l279:
  1073  06B9  0008               	return
  1074  06BA                     __end_of___almod:
  1075                           
  1076                           	psect	text4
  1077  06BA                     __ptext4:	
  1078 ;; *************** function ___aldiv *****************
  1079 ;; Defined at:
  1080 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  1081 ;; Parameters:    Size  Location     Type
  1082 ;;  divisor         4    0[COMMON] long 
  1083 ;;  dividend        4    4[COMMON] long 
  1084 ;; Auto vars:     Size  Location     Type
  1085 ;;  quotient        4    2[BANK0 ] long 
  1086 ;;  sign            1    1[BANK0 ] unsigned char 
  1087 ;;  counter         1    0[BANK0 ] unsigned char 
  1088 ;; Return value:  Size  Location     Type
  1089 ;;                  4    0[COMMON] long 
  1090 ;; Registers used:
  1091 ;;		wreg, status,2, status,0
  1092 ;; Tracked objects:
  1093 ;;		On entry : 0/0
  1094 ;;		On exit  : 0/0
  1095 ;;		Unchanged: 0/0
  1096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1097 ;;      Params:         8       0       0       0       0
  1098 ;;      Locals:         0       6       0       0       0
  1099 ;;      Temps:          1       0       0       0       0
  1100 ;;      Totals:         9       6       0       0       0
  1101 ;;Total ram usage:       15 bytes
  1102 ;; Hardware stack levels used: 1
  1103 ;; This function calls:
  1104 ;;		Nothing
  1105 ;; This function is called by:
  1106 ;;		_LCD_Write_Number
  1107 ;; This function uses a non-reentrant model
  1108 ;;
  1109                           
  1110                           
  1111                           ;psect for function ___aldiv
  1112  06BA                     ___aldiv:
  1113  06BA                     l989:	
  1114                           ;incstack = 0
  1115                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1116                           
  1117  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1118  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1119  06BC  01A1               	clrf	___aldiv@sign
  1120  06BD                     l991:
  1121  06BD  1FF3               	btfss	___aldiv@divisor+3,7
  1122  06BE  2EC0               	goto	u411
  1123  06BF  2EC1               	goto	u410
  1124  06C0                     u411:
  1125  06C0  2ECE               	goto	l256
  1126  06C1                     u410:
  1127  06C1                     l993:
  1128  06C1  09F0               	comf	___aldiv@divisor,f
  1129  06C2  09F1               	comf	___aldiv@divisor+1,f
  1130  06C3  09F2               	comf	___aldiv@divisor+2,f
  1131  06C4  09F3               	comf	___aldiv@divisor+3,f
  1132  06C5  0AF0               	incf	___aldiv@divisor,f
  1133  06C6  1903               	skipnz
  1134  06C7  0AF1               	incf	___aldiv@divisor+1,f
  1135  06C8  1903               	skipnz
  1136  06C9  0AF2               	incf	___aldiv@divisor+2,f
  1137  06CA  1903               	skipnz
  1138  06CB  0AF3               	incf	___aldiv@divisor+3,f
  1139  06CC  01A1               	clrf	___aldiv@sign
  1140  06CD  0AA1               	incf	___aldiv@sign,f
  1141  06CE                     l256:
  1142  06CE  1FF7               	btfss	___aldiv@dividend+3,7
  1143  06CF  2ED1               	goto	u421
  1144  06D0  2ED2               	goto	u420
  1145  06D1                     u421:
  1146  06D1  2EE1               	goto	l999
  1147  06D2                     u420:
  1148  06D2                     l995:
  1149  06D2  09F4               	comf	___aldiv@dividend,f
  1150  06D3  09F5               	comf	___aldiv@dividend+1,f
  1151  06D4  09F6               	comf	___aldiv@dividend+2,f
  1152  06D5  09F7               	comf	___aldiv@dividend+3,f
  1153  06D6  0AF4               	incf	___aldiv@dividend,f
  1154  06D7  1903               	skipnz
  1155  06D8  0AF5               	incf	___aldiv@dividend+1,f
  1156  06D9  1903               	skipnz
  1157  06DA  0AF6               	incf	___aldiv@dividend+2,f
  1158  06DB  1903               	skipnz
  1159  06DC  0AF7               	incf	___aldiv@dividend+3,f
  1160  06DD                     l997:
  1161  06DD  3001               	movlw	1
  1162  06DE  00F8               	movwf	??___aldiv
  1163  06DF  0878               	movf	??___aldiv,w
  1164  06E0  06A1               	xorwf	___aldiv@sign,f
  1165  06E1                     l999:
  1166  06E1  3000               	movlw	0
  1167  06E2  00A5               	movwf	___aldiv@quotient+3
  1168  06E3  3000               	movlw	0
  1169  06E4  00A4               	movwf	___aldiv@quotient+2
  1170  06E5  3000               	movlw	0
  1171  06E6  00A3               	movwf	___aldiv@quotient+1
  1172  06E7  3000               	movlw	0
  1173  06E8  00A2               	movwf	___aldiv@quotient
  1174  06E9                     l1001:
  1175  06E9  0873               	movf	___aldiv@divisor+3,w
  1176  06EA  0472               	iorwf	___aldiv@divisor+2,w
  1177  06EB  0471               	iorwf	___aldiv@divisor+1,w
  1178  06EC  0470               	iorwf	___aldiv@divisor,w
  1179  06ED  1903               	skipnz
  1180  06EE  2EF0               	goto	u431
  1181  06EF  2EF1               	goto	u430
  1182  06F0                     u431:
  1183  06F0  2F3E               	goto	l1021
  1184  06F1                     u430:
  1185  06F1                     l1003:
  1186  06F1  01A0               	clrf	___aldiv@counter
  1187  06F2  0AA0               	incf	___aldiv@counter,f
  1188  06F3  2F01               	goto	l1007
  1189  06F4                     l1005:
  1190  06F4  3001               	movlw	1
  1191  06F5  00F8               	movwf	??___aldiv
  1192  06F6                     u445:
  1193  06F6  1003               	clrc
  1194  06F7  0DF0               	rlf	___aldiv@divisor,f
  1195  06F8  0DF1               	rlf	___aldiv@divisor+1,f
  1196  06F9  0DF2               	rlf	___aldiv@divisor+2,f
  1197  06FA  0DF3               	rlf	___aldiv@divisor+3,f
  1198  06FB  0BF8               	decfsz	??___aldiv,f
  1199  06FC  2EF6               	goto	u445
  1200  06FD  3001               	movlw	1
  1201  06FE  00F8               	movwf	??___aldiv
  1202  06FF  0878               	movf	??___aldiv,w
  1203  0700  07A0               	addwf	___aldiv@counter,f
  1204  0701                     l1007:
  1205  0701  1FF3               	btfss	___aldiv@divisor+3,7
  1206  0702  2F04               	goto	u451
  1207  0703  2F05               	goto	u450
  1208  0704                     u451:
  1209  0704  2EF4               	goto	l1005
  1210  0705                     u450:
  1211  0705                     l1009:
  1212  0705  3001               	movlw	1
  1213  0706  00F8               	movwf	??___aldiv
  1214  0707                     u465:
  1215  0707  1003               	clrc
  1216  0708  0DA2               	rlf	___aldiv@quotient,f
  1217  0709  0DA3               	rlf	___aldiv@quotient+1,f
  1218  070A  0DA4               	rlf	___aldiv@quotient+2,f
  1219  070B  0DA5               	rlf	___aldiv@quotient+3,f
  1220  070C  0BF8               	decfsz	??___aldiv,f
  1221  070D  2F07               	goto	u465
  1222  070E                     l1011:
  1223  070E  0873               	movf	___aldiv@divisor+3,w
  1224  070F  0277               	subwf	___aldiv@dividend+3,w
  1225  0710  1D03               	skipz
  1226  0711  2F1C               	goto	u475
  1227  0712  0872               	movf	___aldiv@divisor+2,w
  1228  0713  0276               	subwf	___aldiv@dividend+2,w
  1229  0714  1D03               	skipz
  1230  0715  2F1C               	goto	u475
  1231  0716  0871               	movf	___aldiv@divisor+1,w
  1232  0717  0275               	subwf	___aldiv@dividend+1,w
  1233  0718  1D03               	skipz
  1234  0719  2F1C               	goto	u475
  1235  071A  0870               	movf	___aldiv@divisor,w
  1236  071B  0274               	subwf	___aldiv@dividend,w
  1237  071C                     u475:
  1238  071C  1C03               	skipc
  1239  071D  2F1F               	goto	u471
  1240  071E  2F20               	goto	u470
  1241  071F                     u471:
  1242  071F  2F2F               	goto	l1017
  1243  0720                     u470:
  1244  0720                     l1013:
  1245  0720  0870               	movf	___aldiv@divisor,w
  1246  0721  02F4               	subwf	___aldiv@dividend,f
  1247  0722  0871               	movf	___aldiv@divisor+1,w
  1248  0723  1C03               	skipc
  1249  0724  0F71               	incfsz	___aldiv@divisor+1,w
  1250  0725  02F5               	subwf	___aldiv@dividend+1,f
  1251  0726  0872               	movf	___aldiv@divisor+2,w
  1252  0727  1C03               	skipc
  1253  0728  0F72               	incfsz	___aldiv@divisor+2,w
  1254  0729  02F6               	subwf	___aldiv@dividend+2,f
  1255  072A  0873               	movf	___aldiv@divisor+3,w
  1256  072B  1C03               	skipc
  1257  072C  0F73               	incfsz	___aldiv@divisor+3,w
  1258  072D  02F7               	subwf	___aldiv@dividend+3,f
  1259  072E                     l1015:
  1260  072E  1422               	bsf	___aldiv@quotient,0
  1261  072F                     l1017:
  1262  072F  3001               	movlw	1
  1263  0730                     u485:
  1264  0730  1003               	clrc
  1265  0731  0CF3               	rrf	___aldiv@divisor+3,f
  1266  0732  0CF2               	rrf	___aldiv@divisor+2,f
  1267  0733  0CF1               	rrf	___aldiv@divisor+1,f
  1268  0734  0CF0               	rrf	___aldiv@divisor,f
  1269  0735  3EFF               	addlw	-1
  1270  0736  1D03               	skipz
  1271  0737  2F30               	goto	u485
  1272  0738                     l1019:
  1273  0738  3001               	movlw	1
  1274  0739  02A0               	subwf	___aldiv@counter,f
  1275  073A  1D03               	btfss	3,2
  1276  073B  2F3D               	goto	u491
  1277  073C  2F3E               	goto	u490
  1278  073D                     u491:
  1279  073D  2F05               	goto	l1009
  1280  073E                     u490:
  1281  073E                     l1021:
  1282  073E  0821               	movf	___aldiv@sign,w
  1283  073F  1903               	btfsc	3,2
  1284  0740  2F42               	goto	u501
  1285  0741  2F43               	goto	u500
  1286  0742                     u501:
  1287  0742  2F4E               	goto	l1025
  1288  0743                     u500:
  1289  0743                     l1023:
  1290  0743  09A2               	comf	___aldiv@quotient,f
  1291  0744  09A3               	comf	___aldiv@quotient+1,f
  1292  0745  09A4               	comf	___aldiv@quotient+2,f
  1293  0746  09A5               	comf	___aldiv@quotient+3,f
  1294  0747  0AA2               	incf	___aldiv@quotient,f
  1295  0748  1903               	skipnz
  1296  0749  0AA3               	incf	___aldiv@quotient+1,f
  1297  074A  1903               	skipnz
  1298  074B  0AA4               	incf	___aldiv@quotient+2,f
  1299  074C  1903               	skipnz
  1300  074D  0AA5               	incf	___aldiv@quotient+3,f
  1301  074E                     l1025:
  1302  074E  0825               	movf	___aldiv@quotient+3,w
  1303  074F  00F3               	movwf	?___aldiv+3
  1304  0750  0824               	movf	___aldiv@quotient+2,w
  1305  0751  00F2               	movwf	?___aldiv+2
  1306  0752  0823               	movf	___aldiv@quotient+1,w
  1307  0753  00F1               	movwf	?___aldiv+1
  1308  0754  0822               	movf	___aldiv@quotient,w
  1309  0755  00F0               	movwf	?___aldiv
  1310  0756                     l266:
  1311  0756  0008               	return
  1312  0757                     __end_of___aldiv:
  1313                           
  1314                           	psect	text5
  1315  0585                     __ptext5:	
  1316 ;; *************** function _LCD_Write_Char *****************
  1317 ;; Defined at:
  1318 ;;		line 56 in file "lcd.c"
  1319 ;; Parameters:    Size  Location     Type
  1320 ;;  Data            1    wreg     unsigned char 
  1321 ;; Auto vars:     Size  Location     Type
  1322 ;;  Data            1    5[COMMON] unsigned char 
  1323 ;;  High4           1    4[COMMON] unsigned char 
  1324 ;;  Low4            1    3[COMMON] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;                  1    wreg      void 
  1327 ;; Registers used:
  1328 ;;		wreg, status,2, status,0, pclath, cstack
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 0/0
  1332 ;;		Unchanged: 0/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       0       0       0       0
  1335 ;;      Locals:         3       0       0       0       0
  1336 ;;      Temps:          2       0       0       0       0
  1337 ;;      Totals:         5       0       0       0       0
  1338 ;;Total ram usage:        5 bytes
  1339 ;; Hardware stack levels used: 1
  1340 ;; Hardware stack levels required when called: 1
  1341 ;; This function calls:
  1342 ;;		_LCD_DATA
  1343 ;; This function is called by:
  1344 ;;		_LCD_Write_String
  1345 ;;		_LCD_Write_Number
  1346 ;;		_LCD_Write_CharXY
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function _LCD_Write_Char
  1352  0585                     _LCD_Write_Char:
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1356                           ;LCD_Write_Char@Data stored from wreg
  1357  0585  00F5               	movwf	LCD_Write_Char@Data
  1358  0586                     l965:
  1359                           
  1360                           ;lcd.c: 56: void LCD_Write_Char(char Data);lcd.c: 57: {;lcd.c: 58:   char Low4,High4;;lc
      +                          d.c: 59:   Low4 = Data & 0x0F;
  1361  0586  0875               	movf	LCD_Write_Char@Data,w
  1362  0587  390F               	andlw	15
  1363  0588  00F1               	movwf	??_LCD_Write_Char
  1364  0589  0871               	movf	??_LCD_Write_Char,w
  1365  058A  00F3               	movwf	LCD_Write_Char@Low4
  1366                           
  1367                           ;lcd.c: 60:   High4 = Data & 0xF0;
  1368  058B  0875               	movf	LCD_Write_Char@Data,w
  1369  058C  39F0               	andlw	240
  1370  058D  00F1               	movwf	??_LCD_Write_Char
  1371  058E  0871               	movf	??_LCD_Write_Char,w
  1372  058F  00F4               	movwf	LCD_Write_Char@High4
  1373  0590                     l967:
  1374                           
  1375                           ;lcd.c: 61:   RD2 = 1;
  1376  0590  1283               	bcf	3,5	;RP0=0, select bank0
  1377  0591  1303               	bcf	3,6	;RP1=0, select bank0
  1378  0592  1508               	bsf	8,2	;volatile
  1379  0593                     l969:
  1380                           
  1381                           ;lcd.c: 62:   LCD_DATA(High4>>4);
  1382  0593  0874               	movf	LCD_Write_Char@High4,w
  1383  0594  00F1               	movwf	??_LCD_Write_Char
  1384  0595  3004               	movlw	4
  1385  0596                     u405:
  1386  0596  1003               	clrc
  1387  0597  0CF1               	rrf	??_LCD_Write_Char,f
  1388  0598  3EFF               	addlw	-1
  1389  0599  1D03               	skipz
  1390  059A  2D96               	goto	u405
  1391  059B  0871               	movf	??_LCD_Write_Char,w
  1392  059C  120A  118A  248C  120A  118A  	fcall	_LCD_DATA
  1393  05A1                     l971:
  1394                           
  1395                           ;lcd.c: 63:   RD3 = 1;
  1396  05A1  1283               	bcf	3,5	;RP0=0, select bank0
  1397  05A2  1303               	bcf	3,6	;RP1=0, select bank0
  1398  05A3  1588               	bsf	8,3	;volatile
  1399  05A4                     l973:
  1400                           
  1401                           ;lcd.c: 64:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1402  05A4  3004               	movlw	4
  1403  05A5  00F2               	movwf	??_LCD_Write_Char+1
  1404  05A6  303D               	movlw	61
  1405  05A7  00F1               	movwf	??_LCD_Write_Char
  1406  05A8                     u697:
  1407  05A8  0BF1               	decfsz	??_LCD_Write_Char,f
  1408  05A9  2DA8               	goto	u697
  1409  05AA  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1410  05AB  2DA8               	goto	u697
  1411  05AC  2DAD               	nop2
  1412  05AD                     l975:
  1413                           
  1414                           ;lcd.c: 65:   RD3 = 0;
  1415  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1416  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1417  05AF  1188               	bcf	8,3	;volatile
  1418  05B0                     l977:
  1419                           
  1420                           ;lcd.c: 66:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1421  05B0  3004               	movlw	4
  1422  05B1  00F2               	movwf	??_LCD_Write_Char+1
  1423  05B2  303D               	movlw	61
  1424  05B3  00F1               	movwf	??_LCD_Write_Char
  1425  05B4                     u707:
  1426  05B4  0BF1               	decfsz	??_LCD_Write_Char,f
  1427  05B5  2DB4               	goto	u707
  1428  05B6  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1429  05B7  2DB4               	goto	u707
  1430  05B8  2DB9               	nop2
  1431  05B9                     l979:
  1432                           
  1433                           ;lcd.c: 67:   LCD_DATA(Low4);
  1434  05B9  0873               	movf	LCD_Write_Char@Low4,w
  1435  05BA  120A  118A  248C  120A  118A  	fcall	_LCD_DATA
  1436  05BF                     l981:
  1437                           
  1438                           ;lcd.c: 68:   RD3 = 1;
  1439  05BF  1283               	bcf	3,5	;RP0=0, select bank0
  1440  05C0  1303               	bcf	3,6	;RP1=0, select bank0
  1441  05C1  1588               	bsf	8,3	;volatile
  1442  05C2                     l983:
  1443                           
  1444                           ;lcd.c: 69:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1445  05C2  3004               	movlw	4
  1446  05C3  00F2               	movwf	??_LCD_Write_Char+1
  1447  05C4  303D               	movlw	61
  1448  05C5  00F1               	movwf	??_LCD_Write_Char
  1449  05C6                     u717:
  1450  05C6  0BF1               	decfsz	??_LCD_Write_Char,f
  1451  05C7  2DC6               	goto	u717
  1452  05C8  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1453  05C9  2DC6               	goto	u717
  1454  05CA  2DCB               	nop2
  1455  05CB                     l985:
  1456                           
  1457                           ;lcd.c: 70:   RD3 = 0;
  1458  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  1459  05CC  1303               	bcf	3,6	;RP1=0, select bank0
  1460  05CD  1188               	bcf	8,3	;volatile
  1461  05CE                     l987:
  1462                           
  1463                           ;lcd.c: 71:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1464  05CE  3004               	movlw	4
  1465  05CF  00F2               	movwf	??_LCD_Write_Char+1
  1466  05D0  303D               	movlw	61
  1467  05D1  00F1               	movwf	??_LCD_Write_Char
  1468  05D2                     u727:
  1469  05D2  0BF1               	decfsz	??_LCD_Write_Char,f
  1470  05D3  2DD2               	goto	u727
  1471  05D4  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1472  05D5  2DD2               	goto	u727
  1473  05D6  2DD7               	nop2
  1474  05D7                     l57:
  1475  05D7  0008               	return
  1476  05D8                     __end_of_LCD_Write_Char:
  1477                           
  1478                           	psect	text6
  1479  0533                     __ptext6:	
  1480 ;; *************** function _LCD_Set_Cursor *****************
  1481 ;; Defined at:
  1482 ;;		line 35 in file "lcd.c"
  1483 ;; Parameters:    Size  Location     Type
  1484 ;;  r               1    wreg     unsigned char 
  1485 ;;  c               1    4[COMMON] unsigned char 
  1486 ;; Auto vars:     Size  Location     Type
  1487 ;;  r               1    7[COMMON] unsigned char 
  1488 ;;  Temp            1   10[COMMON] unsigned char 
  1489 ;;  High4           1    9[COMMON] unsigned char 
  1490 ;;  Low4            1    8[COMMON] unsigned char 
  1491 ;; Return value:  Size  Location     Type
  1492 ;;                  1    wreg      void 
  1493 ;; Registers used:
  1494 ;;		wreg, status,2, status,0, pclath, cstack
  1495 ;; Tracked objects:
  1496 ;;		On entry : 0/0
  1497 ;;		On exit  : 0/0
  1498 ;;		Unchanged: 0/0
  1499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1500 ;;      Params:         1       0       0       0       0
  1501 ;;      Locals:         4       0       0       0       0
  1502 ;;      Temps:          2       0       0       0       0
  1503 ;;      Totals:         7       0       0       0       0
  1504 ;;Total ram usage:        7 bytes
  1505 ;; Hardware stack levels used: 1
  1506 ;; Hardware stack levels required when called: 2
  1507 ;; This function calls:
  1508 ;;		_LCD_CMD
  1509 ;; This function is called by:
  1510 ;;		_main
  1511 ;;		_LCD_Write_CharXY
  1512 ;;		_LCD_Write_StringXY
  1513 ;;		_LCD_Write_NumberXY
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function _LCD_Set_Cursor
  1519  0533                     _LCD_Set_Cursor:
  1520                           
  1521                           ;incstack = 0
  1522                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1523                           ;LCD_Set_Cursor@r stored from wreg
  1524  0533  00F7               	movwf	LCD_Set_Cursor@r
  1525  0534                     l1095:
  1526                           
  1527                           ;lcd.c: 35: void LCD_Set_Cursor(unsigned char r, unsigned char c);lcd.c: 36: {;lcd.c: 37
      +                          :   unsigned char Temp,Low4,High4;;lcd.c: 38:   if(r == 1)
  1528  0534  0377               	decf	LCD_Set_Cursor@r,w
  1529  0535  1D03               	btfss	3,2
  1530  0536  2D38               	goto	u601
  1531  0537  2D39               	goto	u600
  1532  0538                     u601:
  1533  0538  2D5C               	goto	l1105
  1534  0539                     u600:
  1535  0539                     l1097:
  1536                           
  1537                           ;lcd.c: 39:   {;lcd.c: 40:     Temp = 0x80 + c - 1;
  1538  0539  0874               	movf	LCD_Set_Cursor@c,w
  1539  053A  3E7F               	addlw	127
  1540  053B  00F5               	movwf	??_LCD_Set_Cursor
  1541  053C  0875               	movf	??_LCD_Set_Cursor,w
  1542  053D  00FA               	movwf	LCD_Set_Cursor@Temp
  1543                           
  1544                           ;lcd.c: 41:     High4 = Temp >> 4;
  1545  053E  087A               	movf	LCD_Set_Cursor@Temp,w
  1546  053F  00F5               	movwf	??_LCD_Set_Cursor
  1547  0540  3004               	movlw	4
  1548  0541                     u615:
  1549  0541  1003               	clrc
  1550  0542  0CF5               	rrf	??_LCD_Set_Cursor,f
  1551  0543  3EFF               	addlw	-1
  1552  0544  1D03               	skipz
  1553  0545  2D41               	goto	u615
  1554  0546  0875               	movf	??_LCD_Set_Cursor,w
  1555  0547  00F6               	movwf	??_LCD_Set_Cursor+1
  1556  0548  0876               	movf	??_LCD_Set_Cursor+1,w
  1557  0549  00F9               	movwf	LCD_Set_Cursor@High4
  1558  054A                     l1099:
  1559                           
  1560                           ;lcd.c: 42:     Low4 = Temp & 0x0F;
  1561  054A  087A               	movf	LCD_Set_Cursor@Temp,w
  1562  054B  390F               	andlw	15
  1563  054C  00F5               	movwf	??_LCD_Set_Cursor
  1564  054D  0875               	movf	??_LCD_Set_Cursor,w
  1565  054E  00F8               	movwf	LCD_Set_Cursor@Low4
  1566  054F                     l1101:
  1567                           
  1568                           ;lcd.c: 43:     LCD_CMD(High4);
  1569  054F  0879               	movf	LCD_Set_Cursor@High4,w
  1570  0550  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1571  0555                     l1103:
  1572                           
  1573                           ;lcd.c: 44:     LCD_CMD(Low4);
  1574  0555  0878               	movf	LCD_Set_Cursor@Low4,w
  1575  0556  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1576                           
  1577                           ;lcd.c: 45:   }
  1578  055B  2D84               	goto	l54
  1579  055C                     l1105:
  1580  055C  3002               	movlw	2
  1581  055D  0677               	xorwf	LCD_Set_Cursor@r,w
  1582  055E  1D03               	btfss	3,2
  1583  055F  2D61               	goto	u621
  1584  0560  2D62               	goto	u620
  1585  0561                     u621:
  1586  0561  2D84               	goto	l54
  1587  0562                     u620:
  1588  0562                     l1107:
  1589                           
  1590                           ;lcd.c: 47:   {;lcd.c: 48:     Temp = 0xC0 + c - 1;
  1591  0562  0874               	movf	LCD_Set_Cursor@c,w
  1592  0563  3EBF               	addlw	191
  1593  0564  00F5               	movwf	??_LCD_Set_Cursor
  1594  0565  0875               	movf	??_LCD_Set_Cursor,w
  1595  0566  00FA               	movwf	LCD_Set_Cursor@Temp
  1596                           
  1597                           ;lcd.c: 49:     High4 = Temp >> 4;
  1598  0567  087A               	movf	LCD_Set_Cursor@Temp,w
  1599  0568  00F5               	movwf	??_LCD_Set_Cursor
  1600  0569  3004               	movlw	4
  1601  056A                     u635:
  1602  056A  1003               	clrc
  1603  056B  0CF5               	rrf	??_LCD_Set_Cursor,f
  1604  056C  3EFF               	addlw	-1
  1605  056D  1D03               	skipz
  1606  056E  2D6A               	goto	u635
  1607  056F  0875               	movf	??_LCD_Set_Cursor,w
  1608  0570  00F6               	movwf	??_LCD_Set_Cursor+1
  1609  0571  0876               	movf	??_LCD_Set_Cursor+1,w
  1610  0572  00F9               	movwf	LCD_Set_Cursor@High4
  1611  0573                     l1109:
  1612                           
  1613                           ;lcd.c: 50:     Low4 = Temp & 0x0F;
  1614  0573  087A               	movf	LCD_Set_Cursor@Temp,w
  1615  0574  390F               	andlw	15
  1616  0575  00F5               	movwf	??_LCD_Set_Cursor
  1617  0576  0875               	movf	??_LCD_Set_Cursor,w
  1618  0577  00F8               	movwf	LCD_Set_Cursor@Low4
  1619  0578                     l1111:
  1620                           
  1621                           ;lcd.c: 51:     LCD_CMD(High4);
  1622  0578  0879               	movf	LCD_Set_Cursor@High4,w
  1623  0579  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1624  057E                     l1113:
  1625                           
  1626                           ;lcd.c: 52:     LCD_CMD(Low4);
  1627  057E  0878               	movf	LCD_Set_Cursor@Low4,w
  1628  057F  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1629  0584                     l54:
  1630  0584  0008               	return
  1631  0585                     __end_of_LCD_Set_Cursor:
  1632                           
  1633                           	psect	text7
  1634  05D8                     __ptext7:	
  1635 ;; *************** function _LCD_Init *****************
  1636 ;; Defined at:
  1637 ;;		line 3 in file "lcd.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      void 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0, pclath, cstack
  1646 ;; Tracked objects:
  1647 ;;		On entry : 0/0
  1648 ;;		On exit  : 0/0
  1649 ;;		Unchanged: 0/0
  1650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1651 ;;      Params:         0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0
  1653 ;;      Temps:          2       0       0       0       0
  1654 ;;      Totals:         2       0       0       0       0
  1655 ;;Total ram usage:        2 bytes
  1656 ;; Hardware stack levels used: 1
  1657 ;; Hardware stack levels required when called: 2
  1658 ;; This function calls:
  1659 ;;		_LCD_CMD
  1660 ;;		_LCD_DATA
  1661 ;; This function is called by:
  1662 ;;		_main
  1663 ;; This function uses a non-reentrant model
  1664 ;;
  1665                           
  1666                           
  1667                           ;psect for function _LCD_Init
  1668  05D8                     _LCD_Init:
  1669  05D8                     l1061:	
  1670                           ;incstack = 0
  1671                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1672                           
  1673                           
  1674                           ;lcd.c: 5:   TRISD = 0x00;
  1675  05D8  1683               	bsf	3,5	;RP0=1, select bank1
  1676  05D9  1303               	bcf	3,6	;RP1=0, select bank1
  1677  05DA  0188               	clrf	8	;volatile
  1678  05DB                     l1063:
  1679                           
  1680                           ;lcd.c: 6:   TRISD2 = 0;
  1681  05DB  1108               	bcf	8,2	;volatile
  1682  05DC                     l1065:
  1683                           
  1684                           ;lcd.c: 7:   TRISD3 = 0;
  1685  05DC  1188               	bcf	8,3	;volatile
  1686  05DD                     l1067:
  1687                           
  1688                           ;lcd.c: 10:   LCD_DATA(0x00);
  1689  05DD  3000               	movlw	0
  1690  05DE  120A  118A  248C  120A  118A  	fcall	_LCD_DATA
  1691  05E3                     l1069:
  1692                           
  1693                           ;lcd.c: 11:   _delay((unsigned long)((30)*(20000000/4000.0)));
  1694  05E3  30C3               	movlw	195
  1695  05E4  00F5               	movwf	??_LCD_Init+1
  1696  05E5  30CD               	movlw	205
  1697  05E6  00F4               	movwf	??_LCD_Init
  1698  05E7                     u737:
  1699  05E7  0BF4               	decfsz	??_LCD_Init,f
  1700  05E8  2DE7               	goto	u737
  1701  05E9  0BF5               	decfsz	??_LCD_Init+1,f
  1702  05EA  2DE7               	goto	u737
  1703  05EB                     l1071:
  1704                           
  1705                           ;lcd.c: 13:   LCD_CMD(0x03);
  1706  05EB  3003               	movlw	3
  1707  05EC  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1708  05F1                     l1073:
  1709                           
  1710                           ;lcd.c: 14:   _delay((unsigned long)((5)*(20000000/4000.0)));
  1711  05F1  3021               	movlw	33
  1712  05F2  00F5               	movwf	??_LCD_Init+1
  1713  05F3  3076               	movlw	118
  1714  05F4  00F4               	movwf	??_LCD_Init
  1715  05F5                     u747:
  1716  05F5  0BF4               	decfsz	??_LCD_Init,f
  1717  05F6  2DF5               	goto	u747
  1718  05F7  0BF5               	decfsz	??_LCD_Init+1,f
  1719  05F8  2DF5               	goto	u747
  1720  05F9  0000               	nop
  1721  05FA                     l1075:
  1722                           
  1723                           ;lcd.c: 15:   LCD_CMD(0x03);
  1724  05FA  3003               	movlw	3
  1725  05FB  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1726  0600                     l1077:
  1727                           
  1728                           ;lcd.c: 16:   _delay((unsigned long)((5)*(20000000/4000000.0)));
  1729  0600  3008               	movlw	8
  1730  0601  00F4               	movwf	??_LCD_Init
  1731  0602                     u757:
  1732  0602  0BF4               	decfsz	??_LCD_Init,f
  1733  0603  2E02               	goto	u757
  1734  0604                     l1079:
  1735                           
  1736                           ;lcd.c: 17:   LCD_CMD(0x03);
  1737  0604  3003               	movlw	3
  1738  0605  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1739  060A                     l1081:
  1740                           
  1741                           ;lcd.c: 19:   LCD_CMD(0x02);
  1742  060A  3002               	movlw	2
  1743  060B  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1744  0610                     l1083:
  1745                           
  1746                           ;lcd.c: 20:   LCD_CMD(0x02);
  1747  0610  3002               	movlw	2
  1748  0611  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1749  0616                     l1085:
  1750                           
  1751                           ;lcd.c: 21:   LCD_CMD(0x08);
  1752  0616  3008               	movlw	8
  1753  0617  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1754  061C                     l1087:
  1755                           
  1756                           ;lcd.c: 22:   LCD_CMD(0x00);
  1757  061C  3000               	movlw	0
  1758  061D  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1759  0622                     l1089:
  1760                           
  1761                           ;lcd.c: 23:   LCD_CMD(0x0C);
  1762  0622  300C               	movlw	12
  1763  0623  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1764  0628                     l1091:
  1765                           
  1766                           ;lcd.c: 24:   LCD_CMD(0x00);
  1767  0628  3000               	movlw	0
  1768  0629  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1769  062E                     l1093:
  1770                           
  1771                           ;lcd.c: 25:   LCD_CMD(0x06);
  1772  062E  3006               	movlw	6
  1773  062F  120A  118A  24D3  120A  118A  	fcall	_LCD_CMD
  1774  0634                     l45:
  1775  0634  0008               	return
  1776  0635                     __end_of_LCD_Init:
  1777                           
  1778                           	psect	text8
  1779  04D3                     __ptext8:	
  1780 ;; *************** function _LCD_CMD *****************
  1781 ;; Defined at:
  1782 ;;		line 142 in file "lcd.c"
  1783 ;; Parameters:    Size  Location     Type
  1784 ;;  CMD             1    wreg     unsigned char 
  1785 ;; Auto vars:     Size  Location     Type
  1786 ;;  CMD             1    3[COMMON] unsigned char 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  1    wreg      void 
  1789 ;; Registers used:
  1790 ;;		wreg, status,2, status,0, pclath, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1796 ;;      Params:         0       0       0       0       0
  1797 ;;      Locals:         1       0       0       0       0
  1798 ;;      Temps:          2       0       0       0       0
  1799 ;;      Totals:         3       0       0       0       0
  1800 ;;Total ram usage:        3 bytes
  1801 ;; Hardware stack levels used: 1
  1802 ;; Hardware stack levels required when called: 1
  1803 ;; This function calls:
  1804 ;;		_LCD_DATA
  1805 ;; This function is called by:
  1806 ;;		_LCD_Init
  1807 ;;		_LCD_Set_Cursor
  1808 ;;		_LCD_Clear
  1809 ;;		_LCD_SL
  1810 ;;		_LCD_SR
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813                           
  1814                           
  1815                           ;psect for function _LCD_CMD
  1816  04D3                     _LCD_CMD:
  1817                           
  1818                           ;incstack = 0
  1819                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  1820                           ;LCD_CMD@CMD stored from wreg
  1821  04D3  00F3               	movwf	LCD_CMD@CMD
  1822  04D4                     l951:
  1823                           
  1824                           ;lcd.c: 142: void LCD_CMD(unsigned char CMD);lcd.c: 143: {;lcd.c: 145:   RD2 = 0;
  1825  04D4  1283               	bcf	3,5	;RP0=0, select bank0
  1826  04D5  1303               	bcf	3,6	;RP1=0, select bank0
  1827  04D6  1108               	bcf	8,2	;volatile
  1828  04D7                     l953:
  1829                           
  1830                           ;lcd.c: 147:   LCD_DATA(CMD);
  1831  04D7  0873               	movf	LCD_CMD@CMD,w
  1832  04D8  120A  118A  248C  120A  118A  	fcall	_LCD_DATA
  1833  04DD                     l955:
  1834                           
  1835                           ;lcd.c: 149:   RD3 = 1;
  1836  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1837  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1838  04DF  1588               	bsf	8,3	;volatile
  1839  04E0                     l957:
  1840                           
  1841                           ;lcd.c: 151:   if(CMD<=0x02)
  1842  04E0  3003               	movlw	3
  1843  04E1  0273               	subwf	LCD_CMD@CMD,w
  1844  04E2  1803               	skipnc
  1845  04E3  2CE5               	goto	u391
  1846  04E4  2CE6               	goto	u390
  1847  04E5                     u391:
  1848  04E5  2CF0               	goto	l961
  1849  04E6                     u390:
  1850  04E6                     l959:
  1851                           
  1852                           ;lcd.c: 152:   {;lcd.c: 153:       _delay((unsigned long)((2)*(20000000/4000.0)));
  1853  04E6  300D               	movlw	13
  1854  04E7  00F2               	movwf	??_LCD_CMD+1
  1855  04E8  30FB               	movlw	251
  1856  04E9  00F1               	movwf	??_LCD_CMD
  1857  04EA                     u767:
  1858  04EA  0BF1               	decfsz	??_LCD_CMD,f
  1859  04EB  2CEA               	goto	u767
  1860  04EC  0BF2               	decfsz	??_LCD_CMD+1,f
  1861  04ED  2CEA               	goto	u767
  1862  04EE  2CEF               	nop2
  1863                           
  1864                           ;lcd.c: 154:   }else{
  1865  04EF  2CF4               	goto	l95
  1866  04F0                     l961:
  1867                           
  1868                           ;lcd.c: 155:       _delay((unsigned long)((50)*(20000000/4000000.0)));
  1869  04F0  3053               	movlw	83
  1870  04F1  00F1               	movwf	??_LCD_CMD
  1871  04F2                     u777:
  1872  04F2  0BF1               	decfsz	??_LCD_CMD,f
  1873  04F3  2CF2               	goto	u777
  1874  04F4                     l95:	
  1875                           ;lcd.c: 156:   }
  1876                           
  1877                           
  1878                           ;lcd.c: 157:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1879  04F4  3004               	movlw	4
  1880  04F5  00F2               	movwf	??_LCD_CMD+1
  1881  04F6  303D               	movlw	61
  1882  04F7  00F1               	movwf	??_LCD_CMD
  1883  04F8                     u787:
  1884  04F8  0BF1               	decfsz	??_LCD_CMD,f
  1885  04F9  2CF8               	goto	u787
  1886  04FA  0BF2               	decfsz	??_LCD_CMD+1,f
  1887  04FB  2CF8               	goto	u787
  1888  04FC  2CFD               	nop2
  1889  04FD                     l963:
  1890                           
  1891                           ;lcd.c: 158:   RD3 = 0;
  1892  04FD  1283               	bcf	3,5	;RP0=0, select bank0
  1893  04FE  1303               	bcf	3,6	;RP1=0, select bank0
  1894  04FF  1188               	bcf	8,3	;volatile
  1895  0500                     l96:
  1896  0500  0008               	return
  1897  0501                     __end_of_LCD_CMD:
  1898                           
  1899                           	psect	text9
  1900  048C                     __ptext9:	
  1901 ;; *************** function _LCD_DATA *****************
  1902 ;; Defined at:
  1903 ;;		line 122 in file "lcd.c"
  1904 ;; Parameters:    Size  Location     Type
  1905 ;;  Data            1    wreg     unsigned char 
  1906 ;; Auto vars:     Size  Location     Type
  1907 ;;  Data            1    0[COMMON] unsigned char 
  1908 ;; Return value:  Size  Location     Type
  1909 ;;                  1    wreg      void 
  1910 ;; Registers used:
  1911 ;;		wreg
  1912 ;; Tracked objects:
  1913 ;;		On entry : 0/0
  1914 ;;		On exit  : 0/0
  1915 ;;		Unchanged: 0/0
  1916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1917 ;;      Params:         0       0       0       0       0
  1918 ;;      Locals:         1       0       0       0       0
  1919 ;;      Temps:          0       0       0       0       0
  1920 ;;      Totals:         1       0       0       0       0
  1921 ;;Total ram usage:        1 bytes
  1922 ;; Hardware stack levels used: 1
  1923 ;; This function calls:
  1924 ;;		Nothing
  1925 ;; This function is called by:
  1926 ;;		_LCD_Init
  1927 ;;		_LCD_Write_Char
  1928 ;;		_LCD_CMD
  1929 ;; This function uses a non-reentrant model
  1930 ;;
  1931                           
  1932                           
  1933                           ;psect for function _LCD_DATA
  1934  048C                     _LCD_DATA:
  1935                           
  1936                           ;incstack = 0
  1937                           ; Regs used in _LCD_DATA: [wreg]
  1938                           ;LCD_DATA@Data stored from wreg
  1939  048C  00F0               	movwf	LCD_DATA@Data
  1940  048D                     l941:
  1941                           
  1942                           ;lcd.c: 122: void LCD_DATA(unsigned char Data);lcd.c: 123: {;lcd.c: 124:   if(Data & 1)
  1943  048D  1C70               	btfss	LCD_DATA@Data,0
  1944  048E  2C90               	goto	u351
  1945  048F  2C91               	goto	u350
  1946  0490                     u351:
  1947  0490  2C95               	goto	l83
  1948  0491                     u350:
  1949  0491                     l943:
  1950                           
  1951                           ;lcd.c: 125:     RD4 = 1;
  1952  0491  1283               	bcf	3,5	;RP0=0, select bank0
  1953  0492  1303               	bcf	3,6	;RP1=0, select bank0
  1954  0493  1608               	bsf	8,4	;volatile
  1955  0494  2C98               	goto	l84
  1956  0495                     l83:	
  1957                           ;lcd.c: 126:   else
  1958                           
  1959                           
  1960                           ;lcd.c: 127:     RD4 = 0;
  1961  0495  1283               	bcf	3,5	;RP0=0, select bank0
  1962  0496  1303               	bcf	3,6	;RP1=0, select bank0
  1963  0497  1208               	bcf	8,4	;volatile
  1964  0498                     l84:
  1965                           
  1966                           ;lcd.c: 128:   if(Data & 2)
  1967  0498  1CF0               	btfss	LCD_DATA@Data,1
  1968  0499  2C9B               	goto	u361
  1969  049A  2C9C               	goto	u360
  1970  049B                     u361:
  1971  049B  2C9E               	goto	l85
  1972  049C                     u360:
  1973  049C                     l945:
  1974                           
  1975                           ;lcd.c: 129:     RD5 = 1;
  1976  049C  1688               	bsf	8,5	;volatile
  1977  049D  2C9F               	goto	l86
  1978  049E                     l85:	
  1979                           ;lcd.c: 130:   else
  1980                           
  1981                           
  1982                           ;lcd.c: 131:     RD5 = 0;
  1983  049E  1288               	bcf	8,5	;volatile
  1984  049F                     l86:
  1985                           
  1986                           ;lcd.c: 132:   if(Data & 4)
  1987  049F  1D70               	btfss	LCD_DATA@Data,2
  1988  04A0  2CA2               	goto	u371
  1989  04A1  2CA3               	goto	u370
  1990  04A2                     u371:
  1991  04A2  2CA5               	goto	l87
  1992  04A3                     u370:
  1993  04A3                     l947:
  1994                           
  1995                           ;lcd.c: 133:     RD6 = 1;
  1996  04A3  1708               	bsf	8,6	;volatile
  1997  04A4  2CA6               	goto	l88
  1998  04A5                     l87:	
  1999                           ;lcd.c: 134:   else
  2000                           
  2001                           
  2002                           ;lcd.c: 135:     RD6 = 0;
  2003  04A5  1308               	bcf	8,6	;volatile
  2004  04A6                     l88:
  2005                           
  2006                           ;lcd.c: 136:   if(Data & 8)
  2007  04A6  1DF0               	btfss	LCD_DATA@Data,3
  2008  04A7  2CA9               	goto	u381
  2009  04A8  2CAA               	goto	u380
  2010  04A9                     u381:
  2011  04A9  2CAC               	goto	l89
  2012  04AA                     u380:
  2013  04AA                     l949:
  2014                           
  2015                           ;lcd.c: 137:     RD7 = 1;
  2016  04AA  1788               	bsf	8,7	;volatile
  2017  04AB  2CAD               	goto	l91
  2018  04AC                     l89:	
  2019                           ;lcd.c: 138:   else
  2020                           
  2021                           
  2022                           ;lcd.c: 139:     RD7 = 0;
  2023  04AC  1388               	bcf	8,7	;volatile
  2024  04AD                     l91:
  2025  04AD  0008               	return
  2026  04AE                     __end_of_LCD_DATA:
  2027  007E                     btemp	set	126	;btemp
  2028  007E                     wtemp0	set	126

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     35      35
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write_Number
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Number->___almod
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    _main->_LCD_Write_Number
    _LCD_Write_Number->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2906
                           _LCD_Init
                     _LCD_Set_Cursor
                   _LCD_Write_Number
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     334
                                              6 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Number                                    31    27      4    1570
                                             11 COMMON     2     2      0
                                              6 BANK0     29    25      4
                     _LCD_Write_Char
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             11     3      8     448
                                              0 COMMON    11     3      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       5     5      0     178
                                              1 COMMON     5     5      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     782
                                              4 COMMON     7     6      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     220
                                              4 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0     132
                                              1 COMMON     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Init
     _LCD_CMD
       _LCD_DATA
     _LCD_DATA
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_Number
     _LCD_Write_Char
       _LCD_DATA
     ___aldiv
     ___almod
   _LCD_Write_String
     _LCD_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     23      23       5       43.8%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sun Feb 13 19:36:27 2022

                        pc 0002                         l15 052F                         l16 052F  
                       l45 0634                         l54 0584                         l63 04D2  
                       l80 07FB                         l57 05D7                         l91 04AD  
                       l83 0495                         l84 0498                         l85 049E  
                       l86 049F                         l87 04A5                         l95 04F4  
                       l88 04A6                         l96 0500                         l89 04AC  
                       fsr 0004                        l256 06CE                        l266 0756  
                      l269 0647                        l279 06B9                        l941 048D  
                      l943 0491                        l951 04D4                        l945 049C  
                      l961 04F0                        l953 04D7                        l947 04A3  
                      l963 04FD                        l955 04DD                        l971 05A1  
                      l949 04AA                        l957 04E0                        l981 05BF  
                      l973 05A4                        l965 0586                        l959 04E6  
                      l983 05C2                        l975 05AD                        l967 0590  
                      l991 06BD                        l985 05CB                        l977 05B0  
                      l969 0593                        l993 06C1                        l987 05CE  
                      l979 05B9                        l995 06D2                        l997 06DD  
                      l989 06BA                        l999 06E1                        _RD2 0042  
                      _RD3 0043                        _RD4 0044                        _RD5 0045  
                      _RD6 0046                        _RD7 0047                        u410 06C1  
                      u411 06C0                        u500 0743                        u420 06D2  
                      u405 0596                        u501 0742                        u421 06D1  
                      u350 0491                        u430 06F1                        u510 063A  
                      u351 0490                        u431 06F0                        u511 0639  
                      u360 049C                        u600 0539                        u520 064B  
                      u361 049B                        u601 0538                        u521 064A  
                      u370 04A3                        u450 0705                        u530 065E  
                      u371 04A2                        u451 0704                        u531 065D  
                      u380 04AA                        u620 0562                        u381 04A9  
                      u621 0561                        u445 06F6                        u390 04E6  
                      u470 0720                        u550 0672                        u391 04E5  
                      u615 0541                        u471 071F                        u551 0671  
                      u560 0684                        u640 04D2                        u465 0707  
                      u561 0683                        u545 0663                        u641 04D1  
                      u490 073E                        u650 0765                        u635 056A  
                      u707 05B4                        u491 073D                        u475 071C  
                      u651 0764                        u580 06A1                        u660 0779  
                      u717 05C6                        u485 0730                        u581 06A0  
                      u565 0680                        u661 0778                        u590 06A6  
                      u670 07D6                        u727 05D2                        u591 06A5  
                      u575 0693                        u671 07D5                        u680 07E0  
                      u737 05E7                        u681 07DF                        u673 07D2  
                      u747 05F5                        u757 0602                        u767 04EA  
                      u777 04F2                        u697 05A8                        u787 04F8  
                      fsr0 0004                        indf 0000            __end_of_LCD_CMD 0501  
           _LCD_Set_Cursor 0533                       l1001 06E9                       l1011 070E  
                     l1003 06F1                       l1101 054F                       l1013 0720  
                     l1005 06F4                       l1021 073E                       l1111 0578  
                     l1103 0555                       l1023 0743                       l1015 072E  
                     l1007 0701                       l1031 0636                       l1113 057E  
                     l1105 055C                       l1025 074E                       l1017 072F  
                     l1009 0705                       l1041 0661                       l1033 063A  
                     l1121 04C5                       l1107 0562                       l1019 0738  
                     l1051 069B                       l1043 066E                       l1035 064B  
                     l1123 0757                       l1115 04AF                       l1061 05D8  
                     l1109 0573                       l1045 0672                       l1053 06A1  
                     l1037 0656                       l1029 0635                       l1141 07D6  
                     l1133 077A                       l1125 0765                       l1117 04B2  
                     l1071 05EB                       l1063 05DB                       l1055 06A6  
                     l1047 0684                       l1039 065E                       l1151 07F2  
                     l1143 07DC                       l1135 0782                       l1127 076A  
                     l1119 04BF                       l1081 060A                       l1073 05F1  
                     l1065 05DC                       l1057 06B1                       l1049 0692  
                     l1137 07A4                       l1129 0771                       l1161 0512  
                     l1091 0628                       l1083 0610                       l1075 05FA  
                     l1067 05DD                       l1147 07E1                       l1139 07C3  
                     l1163 0518                       l1155 0501                       l1093 062E  
                     l1085 0616                       l1077 0600                       l1069 05E3  
                     l1149 07EC                       l1165 0520                       l1157 0505  
                     l1087 061C                       l1079 0604                       l1095 0534  
                     l1159 050A                       l1089 0622                       l1097 0539  
                     l1099 054A        LCD_Write_String@str 0078                       STR_1 0009  
        ?_LCD_Write_Number 0026          ?_LCD_Write_String 0070                       _main 0501  
                     btemp 007E         ??_LCD_Write_Number 007B                       start 0000  
       ??_LCD_Write_String 0076           __end_of_LCD_DATA 04AE           __end_of_LCD_Init 0635  
          __end_of___aldiv 0757            __end_of___almod 06BA                      ?_main 0070  
                    _TRISD 0088     __end_of_LCD_Set_Cursor 0585                      pclath 000A  
                    status 0003                      wtemp0 007E             _LCD_Write_Char 0585  
          __initialization 07FC               __end_of_main 0533                     ??_main 007D  
                ??_LCD_CMD 0071            ?_LCD_Set_Cursor 0074                     _ADCON1 009F  
                   _TRISD2 0442                     _TRISD3 0443     __end_of_LCD_Write_Char 05D8  
                ??___aldiv 0078                  ??___almod 0078            LCD_Set_Cursor@c 0074  
          LCD_Set_Cursor@r 0077                  ?_LCD_DATA 0070    __end_of__initialization 07FC  
                ?_LCD_Init 0070            ?_LCD_Write_Char 0070             __pcstackCOMMON 0070  
               ??_LCD_DATA 0070                 ??_LCD_Init 0074                 __pmaintext 0501  
__size_of_LCD_Write_Number 00A5  __size_of_LCD_Write_String 0025                    _LCD_CMD 04D3  
               __stringtab 0003                    ___aldiv 06BA                    ___almod 0635  
         ??_LCD_Set_Cursor 0075                    __ptext1 04AE                    __ptext2 0757  
                  __ptext3 0635                    __ptext4 06BA                    __ptext5 0585  
                  __ptext6 0533                    __ptext7 05D8                    __ptext8 04D3  
                  __ptext9 048C           ___aldiv@dividend 0074       end_of_initialization 07FC  
         ___aldiv@quotient 0022                 LCD_CMD@CMD 0073          LCD_Write_Number@c 0040  
        LCD_Write_Number@p 0041          LCD_Write_String@i 0076           ??_LCD_Write_Char 0071  
        __size_of_LCD_DATA 0022          __size_of_LCD_Init 005D           _LCD_Write_Number 0757  
         _LCD_Write_String 04AE        start_initialization 07FC                   ?_LCD_CMD 0070  
                ___latbits 0002              __pcstackBANK0 0020                   ?___aldiv 0070  
                 ?___almod 0070           ___almod@dividend 0074                  __pstrings 0003  
                 _LCD_DATA 048C            ___aldiv@divisor 0070            ___aldiv@counter 0020  
                 _LCD_Init 05D8                __stringbase 0008           __size_of_LCD_CMD 002E  
 __end_of_LCD_Write_Number 07FC   __end_of_LCD_Write_String 04D3        LCD_Write_Char@High4 0074  
         __size_of___aldiv 009D           __size_of___almod 0085         __end_of__stringtab 0009  
          ___almod@divisor 0070    __size_of_LCD_Set_Cursor 0052            ___almod@counter 0079  
            __size_of_main 0032     LCD_Write_Number@length 003E        LCD_Set_Cursor@High4 0079  
   LCD_Write_Number@number 0026         LCD_Write_Char@Data 0075         LCD_Write_Char@Low4 0073  
                stringcode 0003    __size_of_LCD_Write_Char 0053         LCD_Set_Cursor@Low4 0078  
       LCD_Set_Cursor@Temp 007A               LCD_DATA@Data 0070                   stringdir 0003  
                 stringtab 0003               ___aldiv@sign 0021               ___almod@sign 007A  
      LCD_Write_Number@num 002A  
