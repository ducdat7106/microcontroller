

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Jan 24 17:45:26 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2,group=1
    28                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    29                           	dabs	1,0x7E,2
    30  0000                     
    31                           ; Version 2.20
    32                           ; Generated 12/02/2020 GMT
    33                           ; 
    34                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    35                           ; All rights reserved.
    36                           ; 
    37                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    38                           ; 
    39                           ; Redistribution and use in source and binary forms, with or without modification, are
    40                           ; permitted provided that the following conditions are met:
    41                           ; 
    42                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    43                           ;        conditions and the following disclaimer.
    44                           ; 
    45                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    46                           ;        of conditions and the following disclaimer in the documentation and/or other
    47                           ;        materials provided with the distribution.
    48                           ; 
    49                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    50                           ;        software without specific prior written permission.
    51                           ; 
    52                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    53                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    54                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    55                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    56                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    57                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    58                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    59                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    60                           ; 
    61                           ; 
    62                           ; Code-generator required, PIC16F877A Definitions
    63                           ; 
    64                           ; SFR Addresses
    65  0000                     	;# 
    66  0001                     	;# 
    67  0002                     	;# 
    68  0003                     	;# 
    69  0004                     	;# 
    70  0005                     	;# 
    71  0006                     	;# 
    72  0007                     	;# 
    73  0008                     	;# 
    74  0009                     	;# 
    75  000A                     	;# 
    76  000B                     	;# 
    77  000C                     	;# 
    78  000D                     	;# 
    79  000E                     	;# 
    80  000E                     	;# 
    81  000F                     	;# 
    82  0010                     	;# 
    83  0011                     	;# 
    84  0012                     	;# 
    85  0013                     	;# 
    86  0014                     	;# 
    87  0015                     	;# 
    88  0015                     	;# 
    89  0016                     	;# 
    90  0017                     	;# 
    91  0018                     	;# 
    92  0019                     	;# 
    93  001A                     	;# 
    94  001B                     	;# 
    95  001B                     	;# 
    96  001C                     	;# 
    97  001D                     	;# 
    98  001E                     	;# 
    99  001F                     	;# 
   100  0081                     	;# 
   101  0085                     	;# 
   102  0086                     	;# 
   103  0087                     	;# 
   104  0088                     	;# 
   105  0089                     	;# 
   106  008C                     	;# 
   107  008D                     	;# 
   108  008E                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0093                     	;# 
   112  0094                     	;# 
   113  0098                     	;# 
   114  0099                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  009F                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  018C                     	;# 
   124  018D                     	;# 
   125  0000                     	;# 
   126  0001                     	;# 
   127  0002                     	;# 
   128  0003                     	;# 
   129  0004                     	;# 
   130  0005                     	;# 
   131  0006                     	;# 
   132  0007                     	;# 
   133  0008                     	;# 
   134  0009                     	;# 
   135  000A                     	;# 
   136  000B                     	;# 
   137  000C                     	;# 
   138  000D                     	;# 
   139  000E                     	;# 
   140  000E                     	;# 
   141  000F                     	;# 
   142  0010                     	;# 
   143  0011                     	;# 
   144  0012                     	;# 
   145  0013                     	;# 
   146  0014                     	;# 
   147  0015                     	;# 
   148  0015                     	;# 
   149  0016                     	;# 
   150  0017                     	;# 
   151  0018                     	;# 
   152  0019                     	;# 
   153  001A                     	;# 
   154  001B                     	;# 
   155  001B                     	;# 
   156  001C                     	;# 
   157  001D                     	;# 
   158  001E                     	;# 
   159  001F                     	;# 
   160  0081                     	;# 
   161  0085                     	;# 
   162  0086                     	;# 
   163  0087                     	;# 
   164  0088                     	;# 
   165  0089                     	;# 
   166  008C                     	;# 
   167  008D                     	;# 
   168  008E                     	;# 
   169  0091                     	;# 
   170  0092                     	;# 
   171  0093                     	;# 
   172  0094                     	;# 
   173  0098                     	;# 
   174  0099                     	;# 
   175  009C                     	;# 
   176  009D                     	;# 
   177  009E                     	;# 
   178  009F                     	;# 
   179  010C                     	;# 
   180  010D                     	;# 
   181  010E                     	;# 
   182  010F                     	;# 
   183  018C                     	;# 
   184  018D                     	;# 
   185  0000                     	;# 
   186  0001                     	;# 
   187  0002                     	;# 
   188  0003                     	;# 
   189  0004                     	;# 
   190  0005                     	;# 
   191  0006                     	;# 
   192  0007                     	;# 
   193  0008                     	;# 
   194  0009                     	;# 
   195  000A                     	;# 
   196  000B                     	;# 
   197  000C                     	;# 
   198  000D                     	;# 
   199  000E                     	;# 
   200  000E                     	;# 
   201  000F                     	;# 
   202  0010                     	;# 
   203  0011                     	;# 
   204  0012                     	;# 
   205  0013                     	;# 
   206  0014                     	;# 
   207  0015                     	;# 
   208  0015                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001B                     	;# 
   216  001C                     	;# 
   217  001D                     	;# 
   218  001E                     	;# 
   219  001F                     	;# 
   220  0081                     	;# 
   221  0085                     	;# 
   222  0086                     	;# 
   223  0087                     	;# 
   224  0088                     	;# 
   225  0089                     	;# 
   226  008C                     	;# 
   227  008D                     	;# 
   228  008E                     	;# 
   229  0091                     	;# 
   230  0092                     	;# 
   231  0093                     	;# 
   232  0094                     	;# 
   233  0098                     	;# 
   234  0099                     	;# 
   235  009C                     	;# 
   236  009D                     	;# 
   237  009E                     	;# 
   238  009F                     	;# 
   239  010C                     	;# 
   240  010D                     	;# 
   241  010E                     	;# 
   242  010F                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245                           
   246                           	psect	idataBANK0
   247  04FA                     __pidataBANK0:
   248                           
   249                           ;initializer for _BackLight_State
   250  04FA  3408               	retlw	8
   251                           
   252                           	psect	nvBANK0
   253  002A                     __pnvBANK0:
   254  002A                     _i2c_add:
   255  002A                     	ds	1
   256  0013                     _SSPBUF	set	19
   257  0014                     _SSPCON	set	20
   258  0063                     _SSPIF	set	99
   259  009F                     _ADCON1	set	159
   260  0093                     _SSPADD	set	147
   261  0094                     _SSPSTAT	set	148
   262  0091                     _SSPCON2	set	145
   263  048B                     _RCEN	set	1163
   264  048E                     _ACKSTAT	set	1166
   265  048C                     _ACKEN	set	1164
   266  048D                     _ACKDT	set	1165
   267  048A                     _PEN	set	1162
   268  0489                     _RSEN	set	1161
   269  0488                     _SEN	set	1160
   270  043C                     _TRISC4	set	1084
   271  043B                     _TRISC3	set	1083
   272                           
   273                           	psect	strings
   274  0003                     __pstrings:
   275  0003                     stringtab:
   276  0003                     __stringtab:
   277  0003                     stringcode:	
   278                           ;	String table - string pointers are 1 byte each
   279                           
   280  0003                     stringdir:
   281  0003  3000               	movlw	high stringdir
   282  0004  008A               	movwf	10
   283  0005  0804               	movf	4,w
   284  0006  0A84               	incf	4,f
   285  0007  0782               	addwf	2,f
   286  0008                     __stringbase:
   287  0008  3400               	retlw	0
   288  0009                     __end_of__stringtab:
   289  0009                     STR_2:
   290  0009  3420               	retlw	32	;' '
   291  000A  3420               	retlw	32	;' '
   292  000B  344E               	retlw	78	;'N'
   293  000C  3453               	retlw	83	;'S'
   294  000D  3420               	retlw	32	;' '
   295  000E  3432               	retlw	50	;'2'
   296  000F  3430               	retlw	48	;'0'
   297  0010  3430               	retlw	48	;'0'
   298  0011  3430               	retlw	48	;'0'
   299  0012  3400               	retlw	0
   300  0013                     STR_1:
   301  0013  3420               	retlw	32	;' '
   302  0014  3420               	retlw	32	;' '
   303  0015  3444               	retlw	68	;'D'
   304  0016  3475               	retlw	117	;'u'
   305  0017  3463               	retlw	99	;'c'
   306  0018  3420               	retlw	32	;' '
   307  0019  3444               	retlw	68	;'D'
   308  001A  3461               	retlw	97	;'a'
   309  001B  3474               	retlw	116	;'t'
   310  001C  3400               	retlw	0
   311                           
   312                           	psect	cinit
   313  07F5                     start_initialization:	
   314                           ; #config settings
   315                           
   316  07F5                     __initialization:
   317                           
   318                           ; Initialize objects allocated to BANK0
   319  07F5  120A  118A  24FA  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   320  07FA  00AB               	movwf	__pdataBANK0& (0+127)
   321                           
   322                           ; Clear objects allocated to COMMON
   323  07FB  01FD               	clrf	__pbssCOMMON& (0+127)
   324  07FC                     end_of_initialization:	
   325                           ;End of C runtime variable initialization code
   326                           
   327  07FC                     __end_of__initialization:
   328  07FC  0183               	clrf	3
   329  07FD  120A  118A  2E30   	ljmp	_main	;jump to C main() function
   330                           
   331                           	psect	bssCOMMON
   332  007D                     __pbssCOMMON:
   333  007D                     _RS:
   334  007D                     	ds	1
   335                           
   336                           	psect	dataBANK0
   337  002B                     __pdataBANK0:
   338  002B                     _BackLight_State:
   339  002B                     	ds	1
   340                           
   341                           	psect	cstackCOMMON
   342  0070                     __pcstackCOMMON:
   343  0070                     ?_IO_Expander_Write:
   344  0070                     ?_LCD_Cmd:	
   345                           ; 1 bytes @ 0x0
   346                           
   347  0070                     ?_I2C_Wait:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ??_I2C_Wait:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_I2C_Start:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ??_I2C_Start:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_I2C_Stop:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ??_I2C_Stop:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_I2C_Write_Char:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ??_I2C_Write_Char:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_LCD_Init:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ?_LCD_Write_4Bit:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     ?_LCD_Write_Char:	
   378                           ; 1 bytes @ 0x0
   379                           
   380  0070                     ?_LCD_Write_String:	
   381                           ; 1 bytes @ 0x0
   382                           
   383  0070                     ?_LCD_SL:	
   384                           ; 1 bytes @ 0x0
   385                           
   386  0070                     ?_LCD_SR:	
   387                           ; 1 bytes @ 0x0
   388                           
   389  0070                     ?_main:	
   390                           ; 1 bytes @ 0x0
   391                           
   392  0070                     ?___aldiv:	
   393                           ; 1 bytes @ 0x0
   394                           
   395  0070                     I2C_Write_Char@Data:	
   396                           ; 4 bytes @ 0x0
   397                           
   398  0070                     ___aldiv@divisor:	
   399                           ; 1 bytes @ 0x0
   400                           
   401                           
   402                           ; 4 bytes @ 0x0
   403  0070                     	ds	1
   404  0071                     ??_IO_Expander_Write:
   405  0071                     IO_Expander_Write@Data:	
   406                           ; 1 bytes @ 0x1
   407                           
   408                           
   409                           ; 1 bytes @ 0x1
   410  0071                     	ds	1
   411  0072                     ??_LCD_Write_4Bit:
   412                           
   413                           ; 1 bytes @ 0x2
   414  0072                     	ds	1
   415  0073                     LCD_Write_4Bit@Nibble:
   416                           
   417                           ; 1 bytes @ 0x3
   418  0073                     	ds	1
   419  0074                     ??_LCD_Cmd:
   420  0074                     ??_LCD_Write_Char:	
   421                           ; 1 bytes @ 0x4
   422                           
   423  0074                     ___aldiv@dividend:	
   424                           ; 1 bytes @ 0x4
   425                           
   426                           
   427                           ; 4 bytes @ 0x4
   428  0074                     	ds	1
   429  0075                     LCD_Cmd@Cmd:
   430  0075                     LCD_Write_Char@Data:	
   431                           ; 1 bytes @ 0x5
   432                           
   433                           
   434                           ; 1 bytes @ 0x5
   435  0075                     	ds	1
   436  0076                     ??_LCD_Init:
   437  0076                     ??_LCD_Write_String:	
   438                           ; 1 bytes @ 0x6
   439                           
   440  0076                     ?_LCD_Set_Cursor:	
   441                           ; 1 bytes @ 0x6
   442                           
   443  0076                     ??_LCD_SL:	
   444                           ; 1 bytes @ 0x6
   445                           
   446  0076                     ??_LCD_SR:	
   447                           ; 1 bytes @ 0x6
   448                           
   449  0076                     LCD_Set_Cursor@COL:	
   450                           ; 1 bytes @ 0x6
   451                           
   452  0076                     LCD_Write_String@i:	
   453                           ; 1 bytes @ 0x6
   454                           
   455                           
   456                           ; 2 bytes @ 0x6
   457  0076                     	ds	1
   458  0077                     ??_LCD_Set_Cursor:
   459                           
   460                           ; 1 bytes @ 0x7
   461  0077                     	ds	1
   462  0078                     ??___aldiv:
   463  0078                     LCD_Write_String@Str:	
   464                           ; 1 bytes @ 0x8
   465                           
   466                           
   467                           ; 1 bytes @ 0x8
   468  0078                     	ds	1
   469  0079                     ??_I2C_Init:
   470  0079                     LCD_Init@I2C_Add:	
   471                           ; 1 bytes @ 0x9
   472                           
   473  0079                     LCD_Set_Cursor@ROW:	
   474                           ; 1 bytes @ 0x9
   475                           
   476                           
   477                           ; 1 bytes @ 0x9
   478  0079                     	ds	1
   479  007A                     ??_main:
   480                           
   481                           ; 1 bytes @ 0xA
   482  007A                     	ds	3
   483                           
   484                           	psect	cstackBANK0
   485  0020                     __pcstackBANK0:
   486  0020                     ___aldiv@counter:
   487                           
   488                           ; 1 bytes @ 0x0
   489  0020                     	ds	1
   490  0021                     ___aldiv@sign:
   491                           
   492                           ; 1 bytes @ 0x1
   493  0021                     	ds	1
   494  0022                     ___aldiv@quotient:
   495                           
   496                           ; 4 bytes @ 0x2
   497  0022                     	ds	4
   498  0026                     ?_I2C_Init:
   499  0026                     I2C_Init@I2C_BaudRate:	
   500                           ; 1 bytes @ 0x6
   501                           
   502                           
   503                           ; 4 bytes @ 0x6
   504  0026                     	ds	4
   505                           
   506                           	psect	maintext
   507  0630                     __pmaintext:	
   508 ;;
   509 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   510 ;;
   511 ;; *************** function _main *****************
   512 ;; Defined at:
   513 ;;		line 13 in file "main_i2c_lcd.c"
   514 ;; Parameters:    Size  Location     Type
   515 ;;		None
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   522 ;; Tracked objects:
   523 ;;		On entry : B00/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   527 ;;      Params:         0       0       0       0       0
   528 ;;      Locals:         0       0       0       0       0
   529 ;;      Temps:          3       0       0       0       0
   530 ;;      Totals:         3       0       0       0       0
   531 ;;Total ram usage:        3 bytes
   532 ;; Hardware stack levels required when called: 6
   533 ;; This function calls:
   534 ;;		_I2C_Init
   535 ;;		_LCD_Init
   536 ;;		_LCD_SL
   537 ;;		_LCD_SR
   538 ;;		_LCD_Set_Cursor
   539 ;;		_LCD_Write_String
   540 ;; This function is called by:
   541 ;;		Startup code after reset
   542 ;; This function uses a non-reentrant model
   543 ;;
   544                           
   545                           
   546                           ;psect for function _main
   547  0630                     _main:
   548  0630                     l1149:	
   549                           ;incstack = 0
   550                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   551                           
   552                           
   553                           ;main_i2c_lcd.c: 15:     ADCON1=0x07;
   554  0630  3007               	movlw	7
   555  0631  1683               	bsf	3,5	;RP0=1, select bank1
   556  0632  1303               	bcf	3,6	;RP1=0, select bank1
   557  0633  009F               	movwf	31	;volatile
   558  0634                     l1151:
   559                           
   560                           ;main_i2c_lcd.c: 16:     I2C_Init(100000);
   561  0634  3000               	movlw	0
   562  0635  1283               	bcf	3,5	;RP0=0, select bank0
   563  0636  1303               	bcf	3,6	;RP1=0, select bank0
   564  0637  00A9               	movwf	I2C_Init@I2C_BaudRate+3
   565  0638  3001               	movlw	1
   566  0639  00A8               	movwf	I2C_Init@I2C_BaudRate+2
   567  063A  3086               	movlw	134
   568  063B  00A7               	movwf	I2C_Init@I2C_BaudRate+1
   569  063C  30A0               	movlw	160
   570  063D  00A6               	movwf	I2C_Init@I2C_BaudRate
   571  063E  120A  118A  25D0  120A  118A  	fcall	_I2C_Init
   572  0643                     l1153:
   573                           
   574                           ;main_i2c_lcd.c: 17:     LCD_Init(0x4E);
   575  0643  304E               	movlw	78
   576  0644  120A  118A  2757  120A  118A  	fcall	_LCD_Init
   577  0649                     l1155:
   578                           
   579                           ;main_i2c_lcd.c: 19:     LCD_Set_Cursor(1,1);
   580  0649  01F6               	clrf	LCD_Set_Cursor@COL
   581  064A  0AF6               	incf	LCD_Set_Cursor@COL,f
   582  064B  3001               	movlw	1
   583  064C  120A  118A  25F7  120A  118A  	fcall	_LCD_Set_Cursor
   584  0651                     l1157:
   585                           
   586                           ;main_i2c_lcd.c: 20:     LCD_Write_String("  Duc Dat");
   587  0651  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   588  0652  120A  118A  25AB  120A  118A  	fcall	_LCD_Write_String
   589  0657                     l1159:
   590                           
   591                           ;main_i2c_lcd.c: 21:     LCD_Set_Cursor(2,1);
   592  0657  01F6               	clrf	LCD_Set_Cursor@COL
   593  0658  0AF6               	incf	LCD_Set_Cursor@COL,f
   594  0659  3002               	movlw	2
   595  065A  120A  118A  25F7  120A  118A  	fcall	_LCD_Set_Cursor
   596  065F                     l1161:
   597                           
   598                           ;main_i2c_lcd.c: 22:     LCD_Write_String("  NS 2000");
   599  065F  3001               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   600  0660  120A  118A  25AB  120A  118A  	fcall	_LCD_Write_String
   601                           
   602                           ;main_i2c_lcd.c: 23:     _delay((unsigned long)((2500)*(16000000/4000.0)));
   603  0665  3033               	movlw	51
   604  0666  00FC               	movwf	??_main+2
   605  0667  30BB               	movlw	187
   606  0668  00FB               	movwf	??_main+1
   607  0669  30DF               	movlw	223
   608  066A  00FA               	movwf	??_main
   609  066B                     u357:
   610  066B  0BFA               	decfsz	??_main,f
   611  066C  2E6B               	goto	u357
   612  066D  0BFB               	decfsz	??_main+1,f
   613  066E  2E6B               	goto	u357
   614  066F  0BFC               	decfsz	??_main+2,f
   615  0670  2E6B               	goto	u357
   616  0671  2E72               	nop2
   617  0672                     l1163:
   618                           
   619                           ;main_i2c_lcd.c: 26:   {;main_i2c_lcd.c: 27:     LCD_SR();
   620  0672  120A  118A  2518  120A  118A  	fcall	_LCD_SR
   621  0677                     l1165:
   622                           
   623                           ;main_i2c_lcd.c: 28:     _delay((unsigned long)((350)*(16000000/4000.0)));
   624  0677  3008               	movlw	8
   625  0678  00FC               	movwf	??_main+2
   626  0679  301B               	movlw	27
   627  067A  00FB               	movwf	??_main+1
   628  067B  3027               	movlw	39
   629  067C  00FA               	movwf	??_main
   630  067D                     u367:
   631  067D  0BFA               	decfsz	??_main,f
   632  067E  2E7D               	goto	u367
   633  067F  0BFB               	decfsz	??_main+1,f
   634  0680  2E7D               	goto	u367
   635  0681  0BFC               	decfsz	??_main+2,f
   636  0682  2E7D               	goto	u367
   637                           
   638                           ;main_i2c_lcd.c: 29:     LCD_SR();
   639  0683  120A  118A  2518  120A  118A  	fcall	_LCD_SR
   640  0688                     l1167:
   641                           
   642                           ;main_i2c_lcd.c: 30:     _delay((unsigned long)((350)*(16000000/4000.0)));
   643  0688  3008               	movlw	8
   644  0689  00FC               	movwf	??_main+2
   645  068A  301B               	movlw	27
   646  068B  00FB               	movwf	??_main+1
   647  068C  3027               	movlw	39
   648  068D  00FA               	movwf	??_main
   649  068E                     u377:
   650  068E  0BFA               	decfsz	??_main,f
   651  068F  2E8E               	goto	u377
   652  0690  0BFB               	decfsz	??_main+1,f
   653  0691  2E8E               	goto	u377
   654  0692  0BFC               	decfsz	??_main+2,f
   655  0693  2E8E               	goto	u377
   656  0694                     l1169:
   657                           
   658                           ;main_i2c_lcd.c: 31:     LCD_SL();
   659  0694  120A  118A  250D  120A  118A  	fcall	_LCD_SL
   660                           
   661                           ;main_i2c_lcd.c: 32:     _delay((unsigned long)((350)*(16000000/4000.0)));
   662  0699  3008               	movlw	8
   663  069A  00FC               	movwf	??_main+2
   664  069B  301B               	movlw	27
   665  069C  00FB               	movwf	??_main+1
   666  069D  3027               	movlw	39
   667  069E  00FA               	movwf	??_main
   668  069F                     u387:
   669  069F  0BFA               	decfsz	??_main,f
   670  06A0  2E9F               	goto	u387
   671  06A1  0BFB               	decfsz	??_main+1,f
   672  06A2  2E9F               	goto	u387
   673  06A3  0BFC               	decfsz	??_main+2,f
   674  06A4  2E9F               	goto	u387
   675  06A5                     l1171:
   676                           
   677                           ;main_i2c_lcd.c: 33:     LCD_SL();
   678  06A5  120A  118A  250D  120A  118A  	fcall	_LCD_SL
   679  06AA                     l1173:
   680                           
   681                           ;main_i2c_lcd.c: 34:     _delay((unsigned long)((350)*(16000000/4000.0)));
   682  06AA  3008               	movlw	8
   683  06AB  00FC               	movwf	??_main+2
   684  06AC  301B               	movlw	27
   685  06AD  00FB               	movwf	??_main+1
   686  06AE  3027               	movlw	39
   687  06AF  00FA               	movwf	??_main
   688  06B0                     u397:
   689  06B0  0BFA               	decfsz	??_main,f
   690  06B1  2EB0               	goto	u397
   691  06B2  0BFB               	decfsz	??_main+1,f
   692  06B3  2EB0               	goto	u397
   693  06B4  0BFC               	decfsz	??_main+2,f
   694  06B5  2EB0               	goto	u397
   695  06B6  2E72               	goto	l1163
   696  06B7  120A  118A  2800   	ljmp	start
   697  06BA                     __end_of_main:
   698                           
   699                           	psect	text1
   700  05AB                     __ptext1:	
   701 ;; *************** function _LCD_Write_String *****************
   702 ;; Defined at:
   703 ;;		line 122 in file "i2c_lcd.c"
   704 ;; Parameters:    Size  Location     Type
   705 ;;  Str             1    wreg     PTR unsigned char 
   706 ;;		 -> STR_2(10), STR_1(10), 
   707 ;; Auto vars:     Size  Location     Type
   708 ;;  Str             1    8[COMMON] PTR unsigned char 
   709 ;;		 -> STR_2(10), STR_1(10), 
   710 ;;  i               2    6[COMMON] int 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         3       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0
   723 ;;      Totals:         3       0       0       0       0
   724 ;;Total ram usage:        3 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 5
   727 ;; This function calls:
   728 ;;		_LCD_Write_Char
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           
   735                           ;psect for function _LCD_Write_String
   736  05AB                     _LCD_Write_String:
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   740                           ;LCD_Write_String@Str stored from wreg
   741  05AB  00F8               	movwf	LCD_Write_String@Str
   742  05AC                     l1079:
   743                           
   744                           ;i2c_lcd.c: 122: void LCD_Write_String(char* Str);i2c_lcd.c: 123: {;i2c_lcd.c: 124:   fo
      +                          r(int i=0; Str[i]!='\0'; i++)
   745  05AC  01F6               	clrf	LCD_Write_String@i
   746  05AD  01F7               	clrf	LCD_Write_String@i+1
   747  05AE  2DC2               	goto	l1085
   748  05AF                     l1081:
   749                           
   750                           ;i2c_lcd.c: 125:     LCD_Write_Char(Str[i]);
   751  05AF  0876               	movf	LCD_Write_String@i,w
   752  05B0  0778               	addwf	LCD_Write_String@Str,w
   753  05B1  0084               	movwf	4
   754  05B2  120A  118A  2003  120A  118A  	fcall	stringdir
   755  05B7  120A  118A  2573  120A  118A  	fcall	_LCD_Write_Char
   756  05BC                     l1083:
   757  05BC  3001               	movlw	1
   758  05BD  07F6               	addwf	LCD_Write_String@i,f
   759  05BE  1803               	skipnc
   760  05BF  0AF7               	incf	LCD_Write_String@i+1,f
   761  05C0  3000               	movlw	0
   762  05C1  07F7               	addwf	LCD_Write_String@i+1,f
   763  05C2                     l1085:
   764  05C2  0876               	movf	LCD_Write_String@i,w
   765  05C3  0778               	addwf	LCD_Write_String@Str,w
   766  05C4  0084               	movwf	4
   767  05C5  120A  118A  2003  120A  118A  	fcall	stringdir
   768  05CA  3A00               	xorlw	0
   769  05CB  1D03               	skipz
   770  05CC  2DCE               	goto	u331
   771  05CD  2DCF               	goto	u330
   772  05CE                     u331:
   773  05CE  2DAF               	goto	l1081
   774  05CF                     u330:
   775  05CF                     l99:
   776  05CF  0008               	return
   777  05D0                     __end_of_LCD_Write_String:
   778                           
   779                           	psect	text2
   780  0573                     __ptext2:	
   781 ;; *************** function _LCD_Write_Char *****************
   782 ;; Defined at:
   783 ;;		line 115 in file "i2c_lcd.c"
   784 ;; Parameters:    Size  Location     Type
   785 ;;  Data            1    wreg     unsigned char 
   786 ;; Auto vars:     Size  Location     Type
   787 ;;  Data            1    5[COMMON] unsigned char 
   788 ;; Return value:  Size  Location     Type
   789 ;;                  1    wreg      void 
   790 ;; Registers used:
   791 ;;		wreg, status,2, status,0, pclath, cstack
   792 ;; Tracked objects:
   793 ;;		On entry : 0/0
   794 ;;		On exit  : 0/0
   795 ;;		Unchanged: 0/0
   796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   797 ;;      Params:         0       0       0       0       0
   798 ;;      Locals:         1       0       0       0       0
   799 ;;      Temps:          1       0       0       0       0
   800 ;;      Totals:         2       0       0       0       0
   801 ;;Total ram usage:        2 bytes
   802 ;; Hardware stack levels used: 1
   803 ;; Hardware stack levels required when called: 4
   804 ;; This function calls:
   805 ;;		_LCD_Write_4Bit
   806 ;; This function is called by:
   807 ;;		_LCD_Write_String
   808 ;; This function uses a non-reentrant model
   809 ;;
   810                           
   811                           
   812                           ;psect for function _LCD_Write_Char
   813  0573                     _LCD_Write_Char:
   814                           
   815                           ;incstack = 0
   816                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
   817                           ;LCD_Write_Char@Data stored from wreg
   818  0573  00F5               	movwf	LCD_Write_Char@Data
   819  0574                     l997:
   820                           
   821                           ;i2c_lcd.c: 115: void LCD_Write_Char(char Data);i2c_lcd.c: 116: {;i2c_lcd.c: 117:   RS =
      +                           1;
   822  0574  01FD               	clrf	_RS
   823  0575  0AFD               	incf	_RS,f
   824  0576                     l999:
   825                           
   826                           ;i2c_lcd.c: 118:   LCD_Write_4Bit(Data & 0xF0);
   827  0576  0875               	movf	LCD_Write_Char@Data,w
   828  0577  39F0               	andlw	240
   829  0578  120A  118A  2540  120A  118A  	fcall	_LCD_Write_4Bit
   830                           
   831                           ;i2c_lcd.c: 119:   LCD_Write_4Bit((Data << 4) & 0xF0);
   832  057D  0875               	movf	LCD_Write_Char@Data,w
   833  057E  00F4               	movwf	??_LCD_Write_Char
   834  057F  3003               	movlw	3
   835  0580                     u225:
   836  0580  1003               	clrc
   837  0581  0DF4               	rlf	??_LCD_Write_Char,f
   838  0582  3EFF               	addlw	-1
   839  0583  1D03               	skipz
   840  0584  2D80               	goto	u225
   841  0585  1003               	clrc
   842  0586  0D74               	rlf	??_LCD_Write_Char,w
   843  0587  39F0               	andlw	240
   844  0588  120A  118A  2540  120A  118A  	fcall	_LCD_Write_4Bit
   845  058D                     l93:
   846  058D  0008               	return
   847  058E                     __end_of_LCD_Write_Char:
   848                           
   849                           	psect	text3
   850  05F7                     __ptext3:	
   851 ;; *************** function _LCD_Set_Cursor *****************
   852 ;; Defined at:
   853 ;;		line 128 in file "i2c_lcd.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  ROW             1    wreg     unsigned char 
   856 ;;  COL             1    6[COMMON] unsigned char 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  ROW             1    9[COMMON] unsigned char 
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   868 ;;      Params:         1       0       0       0       0
   869 ;;      Locals:         1       0       0       0       0
   870 ;;      Temps:          2       0       0       0       0
   871 ;;      Totals:         4       0       0       0       0
   872 ;;Total ram usage:        4 bytes
   873 ;; Hardware stack levels used: 1
   874 ;; Hardware stack levels required when called: 5
   875 ;; This function calls:
   876 ;;		_LCD_Cmd
   877 ;; This function is called by:
   878 ;;		_main
   879 ;; This function uses a non-reentrant model
   880 ;;
   881                           
   882                           
   883                           ;psect for function _LCD_Set_Cursor
   884  05F7                     _LCD_Set_Cursor:
   885                           
   886                           ;incstack = 0
   887                           ; Regs used in _LCD_Set_Cursor: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   888                           ;LCD_Set_Cursor@ROW stored from wreg
   889  05F7  00F9               	movwf	LCD_Set_Cursor@ROW
   890  05F8                     l1087:
   891                           
   892                           ;i2c_lcd.c: 129:   switch(ROW){
   893  05F8  2E19               	goto	l1097
   894  05F9                     l1089:
   895                           
   896                           ;i2c_lcd.c: 131:       LCD_Cmd(0x80 + COL-1);
   897  05F9  0876               	movf	LCD_Set_Cursor@COL,w
   898  05FA  3E7F               	addlw	127
   899  05FB  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
   900                           
   901                           ;i2c_lcd.c: 132:       break;
   902  0600  2E2F               	goto	l108
   903  0601                     l1091:
   904                           
   905                           ;i2c_lcd.c: 134:       LCD_Cmd(0xC0 + COL-1);
   906  0601  0876               	movf	LCD_Set_Cursor@COL,w
   907  0602  3EBF               	addlw	191
   908  0603  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
   909                           
   910                           ;i2c_lcd.c: 135:       break;
   911  0608  2E2F               	goto	l108
   912  0609                     l1093:
   913                           
   914                           ;i2c_lcd.c: 137:       LCD_Cmd(0x94 + COL-1);
   915  0609  0876               	movf	LCD_Set_Cursor@COL,w
   916  060A  3E93               	addlw	147
   917  060B  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
   918                           
   919                           ;i2c_lcd.c: 138:       break;
   920  0610  2E2F               	goto	l108
   921  0611                     l1095:
   922                           
   923                           ;i2c_lcd.c: 140:       LCD_Cmd(0xD4 + COL-1);
   924  0611  0876               	movf	LCD_Set_Cursor@COL,w
   925  0612  3ED3               	addlw	211
   926  0613  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
   927                           
   928                           ;i2c_lcd.c: 141:   }
   929  0618  2E2F               	goto	l108
   930  0619                     l1097:
   931  0619  0879               	movf	LCD_Set_Cursor@ROW,w
   932  061A  00F7               	movwf	??_LCD_Set_Cursor
   933  061B  01F8               	clrf	??_LCD_Set_Cursor+1
   934                           
   935                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   936                           ; Switch size 1, requested type "simple"
   937                           ; Number of cases is 1, Range of values is 0 to 0
   938                           ; switch strategies available:
   939                           ; Name         Instructions Cycles
   940                           ; simple_byte            4     3 (average)
   941                           ; direct_byte           11     8 (fixed)
   942                           ; jumptable            260     6 (fixed)
   943                           ;	Chosen strategy is simple_byte
   944  061C  0878               	movf	??_LCD_Set_Cursor+1,w
   945  061D  3A00               	xorlw	0	; case 0
   946  061E  1903               	skipnz
   947  061F  2E21               	goto	l1195
   948  0620  2E2F               	goto	l108
   949  0621                     l1195:
   950                           
   951                           ; Switch size 1, requested type "simple"
   952                           ; Number of cases is 4, Range of values is 1 to 4
   953                           ; switch strategies available:
   954                           ; Name         Instructions Cycles
   955                           ; simple_byte           13     7 (average)
   956                           ; direct_byte           23    11 (fixed)
   957                           ; jumptable            263     9 (fixed)
   958                           ;	Chosen strategy is simple_byte
   959  0621  0877               	movf	??_LCD_Set_Cursor,w
   960  0622  3A01               	xorlw	1	; case 1
   961  0623  1903               	skipnz
   962  0624  2DF9               	goto	l1089
   963  0625  3A03               	xorlw	3	; case 2
   964  0626  1903               	skipnz
   965  0627  2E01               	goto	l1091
   966  0628  3A01               	xorlw	1	; case 3
   967  0629  1903               	skipnz
   968  062A  2E09               	goto	l1093
   969  062B  3A07               	xorlw	7	; case 4
   970  062C  1903               	skipnz
   971  062D  2E11               	goto	l1095
   972  062E  2E2F               	goto	l108
   973  062F                     l108:
   974  062F  0008               	return
   975  0630                     __end_of_LCD_Set_Cursor:
   976                           
   977                           	psect	text4
   978  0518                     __ptext4:	
   979 ;; *************** function _LCD_SR *****************
   980 ;; Defined at:
   981 ;;		line 162 in file "i2c_lcd.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0, pclath, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   995 ;;      Params:         0       0       0       0       0
   996 ;;      Locals:         0       0       0       0       0
   997 ;;      Temps:          1       0       0       0       0
   998 ;;      Totals:         1       0       0       0       0
   999 ;;Total ram usage:        1 bytes
  1000 ;; Hardware stack levels used: 1
  1001 ;; Hardware stack levels required when called: 5
  1002 ;; This function calls:
  1003 ;;		_LCD_Cmd
  1004 ;; This function is called by:
  1005 ;;		_main
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _LCD_SR
  1011  0518                     _LCD_SR:
  1012  0518                     l1107:	
  1013                           ;incstack = 0
  1014                           ; Regs used in _LCD_SR: [wreg+status,2+status,0+pclath+cstack]
  1015                           
  1016                           
  1017                           ;i2c_lcd.c: 164:   LCD_Cmd(0x1C);
  1018  0518  301C               	movlw	28
  1019  0519  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1020  051E                     l1109:
  1021                           
  1022                           ;i2c_lcd.c: 165:   _delay((unsigned long)((40)*(16000000/4000000.0)));
  1023  051E  3035               	movlw	53
  1024  051F  00F6               	movwf	??_LCD_SR
  1025  0520                     u407:
  1026  0520  0BF6               	decfsz	??_LCD_SR,f
  1027  0521  2D20               	goto	u407
  1028  0522                     l120:
  1029  0522  0008               	return
  1030  0523                     __end_of_LCD_SR:
  1031                           
  1032                           	psect	text5
  1033  050D                     __ptext5:	
  1034 ;; *************** function _LCD_SL *****************
  1035 ;; Defined at:
  1036 ;;		line 156 in file "i2c_lcd.c"
  1037 ;; Parameters:    Size  Location     Type
  1038 ;;		None
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;		None
  1041 ;; Return value:  Size  Location     Type
  1042 ;;                  1    wreg      void 
  1043 ;; Registers used:
  1044 ;;		wreg, status,2, status,0, pclath, cstack
  1045 ;; Tracked objects:
  1046 ;;		On entry : 0/0
  1047 ;;		On exit  : 0/0
  1048 ;;		Unchanged: 0/0
  1049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1050 ;;      Params:         0       0       0       0       0
  1051 ;;      Locals:         0       0       0       0       0
  1052 ;;      Temps:          1       0       0       0       0
  1053 ;;      Totals:         1       0       0       0       0
  1054 ;;Total ram usage:        1 bytes
  1055 ;; Hardware stack levels used: 1
  1056 ;; Hardware stack levels required when called: 5
  1057 ;; This function calls:
  1058 ;;		_LCD_Cmd
  1059 ;; This function is called by:
  1060 ;;		_main
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064                           
  1065                           ;psect for function _LCD_SL
  1066  050D                     _LCD_SL:
  1067  050D                     l1103:	
  1068                           ;incstack = 0
  1069                           ; Regs used in _LCD_SL: [wreg+status,2+status,0+pclath+cstack]
  1070                           
  1071                           
  1072                           ;i2c_lcd.c: 158:   LCD_Cmd(0x18);
  1073  050D  3018               	movlw	24
  1074  050E  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1075  0513                     l1105:
  1076                           
  1077                           ;i2c_lcd.c: 159:   _delay((unsigned long)((40)*(16000000/4000000.0)));
  1078  0513  3035               	movlw	53
  1079  0514  00F6               	movwf	??_LCD_SL
  1080  0515                     u417:
  1081  0515  0BF6               	decfsz	??_LCD_SL,f
  1082  0516  2D15               	goto	u417
  1083  0517                     l117:
  1084  0517  0008               	return
  1085  0518                     __end_of_LCD_SL:
  1086                           
  1087                           	psect	text6
  1088  0757                     __ptext6:	
  1089 ;; *************** function _LCD_Init *****************
  1090 ;; Defined at:
  1091 ;;		line 68 in file "i2c_lcd.c"
  1092 ;; Parameters:    Size  Location     Type
  1093 ;;  I2C_Add         1    wreg     unsigned char 
  1094 ;; Auto vars:     Size  Location     Type
  1095 ;;  I2C_Add         1    9[COMMON] unsigned char 
  1096 ;; Return value:  Size  Location     Type
  1097 ;;                  1    wreg      void 
  1098 ;; Registers used:
  1099 ;;		wreg, status,2, status,0, pclath, cstack
  1100 ;; Tracked objects:
  1101 ;;		On entry : 0/0
  1102 ;;		On exit  : 0/0
  1103 ;;		Unchanged: 0/0
  1104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1105 ;;      Params:         0       0       0       0       0
  1106 ;;      Locals:         1       0       0       0       0
  1107 ;;      Temps:          3       0       0       0       0
  1108 ;;      Totals:         4       0       0       0       0
  1109 ;;Total ram usage:        4 bytes
  1110 ;; Hardware stack levels used: 1
  1111 ;; Hardware stack levels required when called: 5
  1112 ;; This function calls:
  1113 ;;		_IO_Expander_Write
  1114 ;;		_LCD_Cmd
  1115 ;; This function is called by:
  1116 ;;		_main
  1117 ;; This function uses a non-reentrant model
  1118 ;;
  1119                           
  1120                           
  1121                           ;psect for function _LCD_Init
  1122  0757                     _LCD_Init:
  1123                           
  1124                           ;incstack = 0
  1125                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1126                           ;LCD_Init@I2C_Add stored from wreg
  1127  0757  00F9               	movwf	LCD_Init@I2C_Add
  1128  0758                     l1053:
  1129                           
  1130                           ;i2c_lcd.c: 68: void LCD_Init(unsigned char I2C_Add);i2c_lcd.c: 69: {;i2c_lcd.c: 70:   i
      +                          2c_add = I2C_Add;
  1131  0758  0879               	movf	LCD_Init@I2C_Add,w
  1132  0759  00F6               	movwf	??_LCD_Init
  1133  075A  0876               	movf	??_LCD_Init,w
  1134  075B  1283               	bcf	3,5	;RP0=0, select bank0
  1135  075C  1303               	bcf	3,6	;RP1=0, select bank0
  1136  075D  00AA               	movwf	_i2c_add
  1137  075E                     l1055:
  1138                           
  1139                           ;i2c_lcd.c: 71:   IO_Expander_Write(0x00);
  1140  075E  3000               	movlw	0
  1141  075F  120A  118A  258E  120A  118A  	fcall	_IO_Expander_Write
  1142  0764                     l1057:
  1143                           
  1144                           ;i2c_lcd.c: 72:   _delay((unsigned long)((30)*(16000000/4000.0)));
  1145  0764  309C               	movlw	156
  1146  0765  00F7               	movwf	??_LCD_Init+1
  1147  0766  30D7               	movlw	215
  1148  0767  00F6               	movwf	??_LCD_Init
  1149  0768                     u427:
  1150  0768  0BF6               	decfsz	??_LCD_Init,f
  1151  0769  2F68               	goto	u427
  1152  076A  0BF7               	decfsz	??_LCD_Init+1,f
  1153  076B  2F68               	goto	u427
  1154                           
  1155                           ;i2c_lcd.c: 73:   LCD_Cmd(0x03);
  1156  076C  3003               	movlw	3
  1157  076D  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1158  0772                     l1059:
  1159                           
  1160                           ;i2c_lcd.c: 74:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1161  0772  301A               	movlw	26
  1162  0773  00F7               	movwf	??_LCD_Init+1
  1163  0774  30F8               	movlw	248
  1164  0775  00F6               	movwf	??_LCD_Init
  1165  0776                     u437:
  1166  0776  0BF6               	decfsz	??_LCD_Init,f
  1167  0777  2F76               	goto	u437
  1168  0778  0BF7               	decfsz	??_LCD_Init+1,f
  1169  0779  2F76               	goto	u437
  1170  077A  0000               	nop
  1171  077B                     l1061:
  1172                           
  1173                           ;i2c_lcd.c: 75:   LCD_Cmd(0x03);
  1174  077B  3003               	movlw	3
  1175  077C  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1176                           
  1177                           ;i2c_lcd.c: 76:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1178  0781  301A               	movlw	26
  1179  0782  00F7               	movwf	??_LCD_Init+1
  1180  0783  30F8               	movlw	248
  1181  0784  00F6               	movwf	??_LCD_Init
  1182  0785                     u447:
  1183  0785  0BF6               	decfsz	??_LCD_Init,f
  1184  0786  2F85               	goto	u447
  1185  0787  0BF7               	decfsz	??_LCD_Init+1,f
  1186  0788  2F85               	goto	u447
  1187  0789  0000               	nop
  1188  078A                     l1063:
  1189                           
  1190                           ;i2c_lcd.c: 77:   LCD_Cmd(0x03);
  1191  078A  3003               	movlw	3
  1192  078B  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1193  0790                     l1065:
  1194                           
  1195                           ;i2c_lcd.c: 78:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1196  0790  301A               	movlw	26
  1197  0791  00F7               	movwf	??_LCD_Init+1
  1198  0792  30F8               	movlw	248
  1199  0793  00F6               	movwf	??_LCD_Init
  1200  0794                     u457:
  1201  0794  0BF6               	decfsz	??_LCD_Init,f
  1202  0795  2F94               	goto	u457
  1203  0796  0BF7               	decfsz	??_LCD_Init+1,f
  1204  0797  2F94               	goto	u457
  1205  0798  0000               	nop
  1206                           
  1207                           ;i2c_lcd.c: 79:   LCD_Cmd(0x02);
  1208  0799  3002               	movlw	2
  1209  079A  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1210  079F                     l1067:
  1211                           
  1212                           ;i2c_lcd.c: 80:   _delay((unsigned long)((5)*(16000000/4000.0)));
  1213  079F  301A               	movlw	26
  1214  07A0  00F7               	movwf	??_LCD_Init+1
  1215  07A1  30F8               	movlw	248
  1216  07A2  00F6               	movwf	??_LCD_Init
  1217  07A3                     u467:
  1218  07A3  0BF6               	decfsz	??_LCD_Init,f
  1219  07A4  2FA3               	goto	u467
  1220  07A5  0BF7               	decfsz	??_LCD_Init+1,f
  1221  07A6  2FA3               	goto	u467
  1222  07A7  0000               	nop
  1223  07A8                     l1069:
  1224                           
  1225                           ;i2c_lcd.c: 81:   LCD_Cmd(0x20 | (2 << 2));
  1226  07A8  3028               	movlw	40
  1227  07A9  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1228                           
  1229                           ;i2c_lcd.c: 82:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1230  07AE  3002               	movlw	2
  1231  07AF  00F8               	movwf	??_LCD_Init+2
  1232  07B0  3004               	movlw	4
  1233  07B1  00F7               	movwf	??_LCD_Init+1
  1234  07B2  30BA               	movlw	186
  1235  07B3  00F6               	movwf	??_LCD_Init
  1236  07B4                     u477:
  1237  07B4  0BF6               	decfsz	??_LCD_Init,f
  1238  07B5  2FB4               	goto	u477
  1239  07B6  0BF7               	decfsz	??_LCD_Init+1,f
  1240  07B7  2FB4               	goto	u477
  1241  07B8  0BF8               	decfsz	??_LCD_Init+2,f
  1242  07B9  2FB4               	goto	u477
  1243  07BA  0000               	nop
  1244  07BB                     l1071:
  1245                           
  1246                           ;i2c_lcd.c: 83:   LCD_Cmd(0x0C);
  1247  07BB  300C               	movlw	12
  1248  07BC  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1249  07C1                     l1073:
  1250                           
  1251                           ;i2c_lcd.c: 84:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1252  07C1  3002               	movlw	2
  1253  07C2  00F8               	movwf	??_LCD_Init+2
  1254  07C3  3004               	movlw	4
  1255  07C4  00F7               	movwf	??_LCD_Init+1
  1256  07C5  30BA               	movlw	186
  1257  07C6  00F6               	movwf	??_LCD_Init
  1258  07C7                     u487:
  1259  07C7  0BF6               	decfsz	??_LCD_Init,f
  1260  07C8  2FC7               	goto	u487
  1261  07C9  0BF7               	decfsz	??_LCD_Init+1,f
  1262  07CA  2FC7               	goto	u487
  1263  07CB  0BF8               	decfsz	??_LCD_Init+2,f
  1264  07CC  2FC7               	goto	u487
  1265  07CD  0000               	nop
  1266                           
  1267                           ;i2c_lcd.c: 85:   LCD_Cmd(0x01);
  1268  07CE  3001               	movlw	1
  1269  07CF  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1270  07D4                     l1075:
  1271                           
  1272                           ;i2c_lcd.c: 86:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1273  07D4  3002               	movlw	2
  1274  07D5  00F8               	movwf	??_LCD_Init+2
  1275  07D6  3004               	movlw	4
  1276  07D7  00F7               	movwf	??_LCD_Init+1
  1277  07D8  30BA               	movlw	186
  1278  07D9  00F6               	movwf	??_LCD_Init
  1279  07DA                     u497:
  1280  07DA  0BF6               	decfsz	??_LCD_Init,f
  1281  07DB  2FDA               	goto	u497
  1282  07DC  0BF7               	decfsz	??_LCD_Init+1,f
  1283  07DD  2FDA               	goto	u497
  1284  07DE  0BF8               	decfsz	??_LCD_Init+2,f
  1285  07DF  2FDA               	goto	u497
  1286  07E0  0000               	nop
  1287  07E1                     l1077:
  1288                           
  1289                           ;i2c_lcd.c: 87:   LCD_Cmd(0x04 | 0x02);
  1290  07E1  3006               	movlw	6
  1291  07E2  120A  118A  2559  120A  118A  	fcall	_LCD_Cmd
  1292                           
  1293                           ;i2c_lcd.c: 88:   _delay((unsigned long)((50)*(16000000/4000.0)));
  1294  07E7  3002               	movlw	2
  1295  07E8  00F8               	movwf	??_LCD_Init+2
  1296  07E9  3004               	movlw	4
  1297  07EA  00F7               	movwf	??_LCD_Init+1
  1298  07EB  30BA               	movlw	186
  1299  07EC  00F6               	movwf	??_LCD_Init
  1300  07ED                     u507:
  1301  07ED  0BF6               	decfsz	??_LCD_Init,f
  1302  07EE  2FED               	goto	u507
  1303  07EF  0BF7               	decfsz	??_LCD_Init+1,f
  1304  07F0  2FED               	goto	u507
  1305  07F1  0BF8               	decfsz	??_LCD_Init+2,f
  1306  07F2  2FED               	goto	u507
  1307  07F3  0000               	nop
  1308  07F4                     l81:
  1309  07F4  0008               	return
  1310  07F5                     __end_of_LCD_Init:
  1311                           
  1312                           	psect	text7
  1313  0559                     __ptext7:	
  1314 ;; *************** function _LCD_Cmd *****************
  1315 ;; Defined at:
  1316 ;;		line 108 in file "i2c_lcd.c"
  1317 ;; Parameters:    Size  Location     Type
  1318 ;;  Cmd             1    wreg     unsigned char 
  1319 ;; Auto vars:     Size  Location     Type
  1320 ;;  Cmd             1    5[COMMON] unsigned char 
  1321 ;; Return value:  Size  Location     Type
  1322 ;;                  1    wreg      void 
  1323 ;; Registers used:
  1324 ;;		wreg, status,2, status,0, pclath, cstack
  1325 ;; Tracked objects:
  1326 ;;		On entry : 0/0
  1327 ;;		On exit  : 0/0
  1328 ;;		Unchanged: 0/0
  1329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1330 ;;      Params:         0       0       0       0       0
  1331 ;;      Locals:         1       0       0       0       0
  1332 ;;      Temps:          1       0       0       0       0
  1333 ;;      Totals:         2       0       0       0       0
  1334 ;;Total ram usage:        2 bytes
  1335 ;; Hardware stack levels used: 1
  1336 ;; Hardware stack levels required when called: 4
  1337 ;; This function calls:
  1338 ;;		_LCD_Write_4Bit
  1339 ;; This function is called by:
  1340 ;;		_LCD_Init
  1341 ;;		_LCD_Set_Cursor
  1342 ;;		_LCD_SL
  1343 ;;		_LCD_SR
  1344 ;;		_LCD_Clear
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347                           
  1348                           
  1349                           ;psect for function _LCD_Cmd
  1350  0559                     _LCD_Cmd:
  1351                           
  1352                           ;incstack = 0
  1353                           ; Regs used in _LCD_Cmd: [wreg+status,2+status,0+pclath+cstack]
  1354                           ;LCD_Cmd@Cmd stored from wreg
  1355  0559  00F5               	movwf	LCD_Cmd@Cmd
  1356  055A                     l991:
  1357                           
  1358                           ;i2c_lcd.c: 108: void LCD_Cmd(unsigned char Cmd);i2c_lcd.c: 109: {;i2c_lcd.c: 110:   RS 
      +                          = 0;
  1359  055A  01FD               	clrf	_RS
  1360  055B                     l993:
  1361                           
  1362                           ;i2c_lcd.c: 111:   LCD_Write_4Bit(Cmd & 0xF0);
  1363  055B  0875               	movf	LCD_Cmd@Cmd,w
  1364  055C  39F0               	andlw	240
  1365  055D  120A  118A  2540  120A  118A  	fcall	_LCD_Write_4Bit
  1366  0562                     l995:
  1367                           
  1368                           ;i2c_lcd.c: 112:   LCD_Write_4Bit((Cmd << 4) & 0xF0);
  1369  0562  0875               	movf	LCD_Cmd@Cmd,w
  1370  0563  00F4               	movwf	??_LCD_Cmd
  1371  0564  3003               	movlw	3
  1372  0565                     u215:
  1373  0565  1003               	clrc
  1374  0566  0DF4               	rlf	??_LCD_Cmd,f
  1375  0567  3EFF               	addlw	-1
  1376  0568  1D03               	skipz
  1377  0569  2D65               	goto	u215
  1378  056A  1003               	clrc
  1379  056B  0D74               	rlf	??_LCD_Cmd,w
  1380  056C  39F0               	andlw	240
  1381  056D  120A  118A  2540  120A  118A  	fcall	_LCD_Write_4Bit
  1382  0572                     l90:
  1383  0572  0008               	return
  1384  0573                     __end_of_LCD_Cmd:
  1385                           
  1386                           	psect	text8
  1387  0540                     __ptext8:	
  1388 ;; *************** function _LCD_Write_4Bit *****************
  1389 ;; Defined at:
  1390 ;;		line 99 in file "i2c_lcd.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  Nibble          1    wreg     unsigned char 
  1393 ;; Auto vars:     Size  Location     Type
  1394 ;;  Nibble          1    3[COMMON] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      void 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0, pclath, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       0       0       0       0
  1405 ;;      Locals:         1       0       0       0       0
  1406 ;;      Temps:          1       0       0       0       0
  1407 ;;      Totals:         2       0       0       0       0
  1408 ;;Total ram usage:        2 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; Hardware stack levels required when called: 3
  1411 ;; This function calls:
  1412 ;;		_IO_Expander_Write
  1413 ;; This function is called by:
  1414 ;;		_LCD_Cmd
  1415 ;;		_LCD_Write_Char
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           
  1420                           ;psect for function _LCD_Write_4Bit
  1421  0540                     _LCD_Write_4Bit:
  1422                           
  1423                           ;incstack = 0
  1424                           ; Regs used in _LCD_Write_4Bit: [wreg+status,2+status,0+pclath+cstack]
  1425                           ;LCD_Write_4Bit@Nibble stored from wreg
  1426  0540  00F3               	movwf	LCD_Write_4Bit@Nibble
  1427  0541                     l985:
  1428                           
  1429                           ;i2c_lcd.c: 99: void LCD_Write_4Bit(unsigned char Nibble);i2c_lcd.c: 100: {;i2c_lcd.c: 1
      +                          02:   Nibble |= RS;
  1430  0541  087D               	movf	_RS,w
  1431  0542  00F2               	movwf	??_LCD_Write_4Bit
  1432  0543  0872               	movf	??_LCD_Write_4Bit,w
  1433  0544  04F3               	iorwf	LCD_Write_4Bit@Nibble,f
  1434  0545                     l987:
  1435                           
  1436                           ;i2c_lcd.c: 103:   IO_Expander_Write(Nibble | 0x04);
  1437  0545  0873               	movf	LCD_Write_4Bit@Nibble,w
  1438  0546  3804               	iorlw	4
  1439  0547  120A  118A  258E  120A  118A  	fcall	_IO_Expander_Write
  1440  054C                     l989:
  1441                           
  1442                           ;i2c_lcd.c: 104:   IO_Expander_Write(Nibble & 0xFB);
  1443  054C  0873               	movf	LCD_Write_4Bit@Nibble,w
  1444  054D  39FB               	andlw	251
  1445  054E  120A  118A  258E  120A  118A  	fcall	_IO_Expander_Write
  1446                           
  1447                           ;i2c_lcd.c: 105:   _delay((unsigned long)((50)*(16000000/4000000.0)));
  1448  0553  3042               	movlw	66
  1449  0554  00F2               	movwf	??_LCD_Write_4Bit
  1450  0555                     u517:
  1451  0555  0BF2               	decfsz	??_LCD_Write_4Bit,f
  1452  0556  2D55               	goto	u517
  1453  0557  0000               	nop
  1454  0558                     l87:
  1455  0558  0008               	return
  1456  0559                     __end_of_LCD_Write_4Bit:
  1457                           
  1458                           	psect	text9
  1459  058E                     __ptext9:	
  1460 ;; *************** function _IO_Expander_Write *****************
  1461 ;; Defined at:
  1462 ;;		line 91 in file "i2c_lcd.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;  Data            1    wreg     unsigned char 
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;  Data            1    1[COMMON] unsigned char 
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2, status,0, pclath, cstack
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1476 ;;      Params:         0       0       0       0       0
  1477 ;;      Locals:         1       0       0       0       0
  1478 ;;      Temps:          0       0       0       0       0
  1479 ;;      Totals:         1       0       0       0       0
  1480 ;;Total ram usage:        1 bytes
  1481 ;; Hardware stack levels used: 1
  1482 ;; Hardware stack levels required when called: 2
  1483 ;; This function calls:
  1484 ;;		_I2C_Start
  1485 ;;		_I2C_Stop
  1486 ;;		_I2C_Write_Char
  1487 ;; This function is called by:
  1488 ;;		_LCD_Init
  1489 ;;		_LCD_Write_4Bit
  1490 ;;		_Backlight
  1491 ;;		_noBacklight
  1492 ;; This function uses a non-reentrant model
  1493 ;;
  1494                           
  1495                           
  1496                           ;psect for function _IO_Expander_Write
  1497  058E                     _IO_Expander_Write:
  1498                           
  1499                           ;incstack = 0
  1500                           ; Regs used in _IO_Expander_Write: [wreg+status,2+status,0+pclath+cstack]
  1501                           ;IO_Expander_Write@Data stored from wreg
  1502  058E  00F1               	movwf	IO_Expander_Write@Data
  1503  058F                     l983:
  1504                           
  1505                           ;i2c_lcd.c: 91: void IO_Expander_Write(unsigned char Data);i2c_lcd.c: 92: {;i2c_lcd.c: 9
      +                          3:   I2C_Start();
  1506  058F  120A  118A  24FB  120A  118A  	fcall	_I2C_Start
  1507                           
  1508                           ;i2c_lcd.c: 94:   I2C_Write_Char(i2c_add);
  1509  0594  1283               	bcf	3,5	;RP0=0, select bank0
  1510  0595  1303               	bcf	3,6	;RP1=0, select bank0
  1511  0596  082A               	movf	_i2c_add,w
  1512  0597  120A  118A  2530  120A  118A  	fcall	_I2C_Write_Char
  1513                           
  1514                           ;i2c_lcd.c: 95:   I2C_Write_Char(Data | BackLight_State);
  1515  059C  0871               	movf	IO_Expander_Write@Data,w
  1516  059D  1283               	bcf	3,5	;RP0=0, select bank0
  1517  059E  1303               	bcf	3,6	;RP1=0, select bank0
  1518  059F  042B               	iorwf	_BackLight_State,w
  1519  05A0  120A  118A  2530  120A  118A  	fcall	_I2C_Write_Char
  1520                           
  1521                           ;i2c_lcd.c: 96:   I2C_Stop();
  1522  05A5  120A  118A  2504  120A  118A  	fcall	_I2C_Stop
  1523  05AA                     l84:
  1524  05AA  0008               	return
  1525  05AB                     __end_of_IO_Expander_Write:
  1526                           
  1527                           	psect	text10
  1528  0530                     __ptext10:	
  1529 ;; *************** function _I2C_Write_Char *****************
  1530 ;; Defined at:
  1531 ;;		line 46 in file "i2c_lcd.c"
  1532 ;; Parameters:    Size  Location     Type
  1533 ;;  Data            1    wreg     unsigned char 
  1534 ;; Auto vars:     Size  Location     Type
  1535 ;;  Data            1    0[COMMON] unsigned char 
  1536 ;; Return value:  Size  Location     Type
  1537 ;;                  1    wreg      unsigned char 
  1538 ;; Registers used:
  1539 ;;		wreg, status,2, status,0, pclath, cstack
  1540 ;; Tracked objects:
  1541 ;;		On entry : 0/0
  1542 ;;		On exit  : 0/0
  1543 ;;		Unchanged: 0/0
  1544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1545 ;;      Params:         0       0       0       0       0
  1546 ;;      Locals:         1       0       0       0       0
  1547 ;;      Temps:          0       0       0       0       0
  1548 ;;      Totals:         1       0       0       0       0
  1549 ;;Total ram usage:        1 bytes
  1550 ;; Hardware stack levels used: 1
  1551 ;; Hardware stack levels required when called: 1
  1552 ;; This function calls:
  1553 ;;		_I2C_Wait
  1554 ;; This function is called by:
  1555 ;;		_IO_Expander_Write
  1556 ;; This function uses a non-reentrant model
  1557 ;;
  1558                           
  1559                           
  1560                           ;psect for function _I2C_Write_Char
  1561  0530                     _I2C_Write_Char:
  1562                           
  1563                           ;incstack = 0
  1564                           ; Regs used in _I2C_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1565                           ;I2C_Write_Char@Data stored from wreg
  1566  0530  00F0               	movwf	I2C_Write_Char@Data
  1567  0531                     l979:
  1568                           
  1569                           ;i2c_lcd.c: 47:   I2C_Wait();
  1570  0531  120A  118A  2523  120A  118A  	fcall	_I2C_Wait
  1571  0536                     l981:
  1572                           
  1573                           ;i2c_lcd.c: 48:   SSPBUF = Data;
  1574  0536  0870               	movf	I2C_Write_Char@Data,w
  1575  0537  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0538  1303               	bcf	3,6	;RP1=0, select bank0
  1577  0539  0093               	movwf	19	;volatile
  1578  053A                     l69:	
  1579                           ;i2c_lcd.c: 49:   while(!SSPIF);
  1580                           
  1581  053A  1D8C               	btfss	12,3	;volatile
  1582  053B  2D3D               	goto	u201
  1583  053C  2D3E               	goto	u200
  1584  053D                     u201:
  1585  053D  2D3A               	goto	l69
  1586  053E                     u200:
  1587  053E                     l71:
  1588                           
  1589                           ;i2c_lcd.c: 50:   SSPIF = 0;
  1590  053E  118C               	bcf	12,3	;volatile
  1591  053F                     l72:	
  1592                           ;i2c_lcd.c: 51:   return ACKSTAT;;	Return value of _I2C_Write_Char is never used
  1593                           
  1594  053F  0008               	return
  1595  0540                     __end_of_I2C_Write_Char:
  1596                           
  1597                           	psect	text11
  1598  0504                     __ptext11:	
  1599 ;; *************** function _I2C_Stop *****************
  1600 ;; Defined at:
  1601 ;;		line 28 in file "i2c_lcd.c"
  1602 ;; Parameters:    Size  Location     Type
  1603 ;;		None
  1604 ;; Auto vars:     Size  Location     Type
  1605 ;;		None
  1606 ;; Return value:  Size  Location     Type
  1607 ;;                  1    wreg      void 
  1608 ;; Registers used:
  1609 ;;		wreg, status,2, status,0, pclath, cstack
  1610 ;; Tracked objects:
  1611 ;;		On entry : 0/0
  1612 ;;		On exit  : 0/0
  1613 ;;		Unchanged: 0/0
  1614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1615 ;;      Params:         0       0       0       0       0
  1616 ;;      Locals:         0       0       0       0       0
  1617 ;;      Temps:          0       0       0       0       0
  1618 ;;      Totals:         0       0       0       0       0
  1619 ;;Total ram usage:        0 bytes
  1620 ;; Hardware stack levels used: 1
  1621 ;; Hardware stack levels required when called: 1
  1622 ;; This function calls:
  1623 ;;		_I2C_Wait
  1624 ;; This function is called by:
  1625 ;;		_IO_Expander_Write
  1626 ;; This function uses a non-reentrant model
  1627 ;;
  1628                           
  1629                           
  1630                           ;psect for function _I2C_Stop
  1631  0504                     _I2C_Stop:
  1632  0504                     l975:	
  1633                           ;incstack = 0
  1634                           ; Regs used in _I2C_Stop: [wreg+status,2+status,0+pclath+cstack]
  1635                           
  1636                           
  1637                           ;i2c_lcd.c: 30:   I2C_Wait();
  1638  0504  120A  118A  2523  120A  118A  	fcall	_I2C_Wait
  1639  0509                     l977:
  1640                           
  1641                           ;i2c_lcd.c: 31:   PEN = 1;
  1642  0509  1683               	bsf	3,5	;RP0=1, select bank1
  1643  050A  1303               	bcf	3,6	;RP1=0, select bank1
  1644  050B  1511               	bsf	17,2	;volatile
  1645  050C                     l60:
  1646  050C  0008               	return
  1647  050D                     __end_of_I2C_Stop:
  1648                           
  1649                           	psect	text12
  1650  04FB                     __ptext12:	
  1651 ;; *************** function _I2C_Start *****************
  1652 ;; Defined at:
  1653 ;;		line 18 in file "i2c_lcd.c"
  1654 ;; Parameters:    Size  Location     Type
  1655 ;;		None
  1656 ;; Auto vars:     Size  Location     Type
  1657 ;;		None
  1658 ;; Return value:  Size  Location     Type
  1659 ;;                  1    wreg      void 
  1660 ;; Registers used:
  1661 ;;		wreg, status,2, status,0, pclath, cstack
  1662 ;; Tracked objects:
  1663 ;;		On entry : 0/0
  1664 ;;		On exit  : 0/0
  1665 ;;		Unchanged: 0/0
  1666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1667 ;;      Params:         0       0       0       0       0
  1668 ;;      Locals:         0       0       0       0       0
  1669 ;;      Temps:          0       0       0       0       0
  1670 ;;      Totals:         0       0       0       0       0
  1671 ;;Total ram usage:        0 bytes
  1672 ;; Hardware stack levels used: 1
  1673 ;; Hardware stack levels required when called: 1
  1674 ;; This function calls:
  1675 ;;		_I2C_Wait
  1676 ;; This function is called by:
  1677 ;;		_IO_Expander_Write
  1678 ;; This function uses a non-reentrant model
  1679 ;;
  1680                           
  1681                           
  1682                           ;psect for function _I2C_Start
  1683  04FB                     _I2C_Start:
  1684  04FB                     l971:	
  1685                           ;incstack = 0
  1686                           ; Regs used in _I2C_Start: [wreg+status,2+status,0+pclath+cstack]
  1687                           
  1688                           
  1689                           ;i2c_lcd.c: 19:   I2C_Wait();
  1690  04FB  120A  118A  2523  120A  118A  	fcall	_I2C_Wait
  1691  0500                     l973:
  1692                           
  1693                           ;i2c_lcd.c: 20:   SEN = 1;
  1694  0500  1683               	bsf	3,5	;RP0=1, select bank1
  1695  0501  1303               	bcf	3,6	;RP1=0, select bank1
  1696  0502  1411               	bsf	17,0	;volatile
  1697  0503                     l54:
  1698  0503  0008               	return
  1699  0504                     __end_of_I2C_Start:
  1700                           
  1701                           	psect	text13
  1702  0523                     __ptext13:	
  1703 ;; *************** function _I2C_Wait *****************
  1704 ;; Defined at:
  1705 ;;		line 14 in file "i2c_lcd.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;		None
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;		None
  1710 ;; Return value:  Size  Location     Type
  1711 ;;                  1    wreg      void 
  1712 ;; Registers used:
  1713 ;;		wreg, status,2
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 0/0
  1717 ;;		Unchanged: 0/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         0       0       0       0       0
  1720 ;;      Locals:         0       0       0       0       0
  1721 ;;      Temps:          0       0       0       0       0
  1722 ;;      Totals:         0       0       0       0       0
  1723 ;;Total ram usage:        0 bytes
  1724 ;; Hardware stack levels used: 1
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_I2C_Start
  1729 ;;		_I2C_Stop
  1730 ;;		_I2C_Write_Char
  1731 ;;		_I2C_ReStart
  1732 ;;		_I2C_ACK
  1733 ;;		_I2C_NACK
  1734 ;;		_I2C_Read_Char
  1735 ;; This function uses a non-reentrant model
  1736 ;;
  1737                           
  1738                           
  1739                           ;psect for function _I2C_Wait
  1740  0523                     _I2C_Wait:
  1741  0523                     l967:	
  1742                           ;incstack = 0
  1743                           ; Regs used in _I2C_Wait: [wreg+status,2]
  1744                           
  1745  0523                     l48:	
  1746                           ;i2c_lcd.c: 15:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  1747                           
  1748  0523  1683               	bsf	3,5	;RP0=1, select bank1
  1749  0524  1303               	bcf	3,6	;RP1=0, select bank1
  1750  0525  1914               	btfsc	20,2	;volatile
  1751  0526  2D28               	goto	u181
  1752  0527  2D29               	goto	u180
  1753  0528                     u181:
  1754  0528  2D23               	goto	l48
  1755  0529                     u180:
  1756  0529                     l969:
  1757  0529  0811               	movf	17,w	;volatile
  1758  052A  391F               	andlw	31
  1759  052B  1D03               	btfss	3,2
  1760  052C  2D2E               	goto	u191
  1761  052D  2D2F               	goto	u190
  1762  052E                     u191:
  1763  052E  2D23               	goto	l48
  1764  052F                     u190:
  1765  052F                     l51:
  1766  052F  0008               	return
  1767  0530                     __end_of_I2C_Wait:
  1768                           
  1769                           	psect	text14
  1770  05D0                     __ptext14:	
  1771 ;; *************** function _I2C_Init *****************
  1772 ;; Defined at:
  1773 ;;		line 5 in file "i2c_lcd.c"
  1774 ;; Parameters:    Size  Location     Type
  1775 ;;  I2C_BaudRate    4    6[BANK0 ] long 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;		None
  1778 ;; Return value:  Size  Location     Type
  1779 ;;                  1    wreg      void 
  1780 ;; Registers used:
  1781 ;;		wreg, status,2, status,0, pclath, cstack
  1782 ;; Tracked objects:
  1783 ;;		On entry : 0/0
  1784 ;;		On exit  : 0/0
  1785 ;;		Unchanged: 0/0
  1786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1787 ;;      Params:         0       4       0       0       0
  1788 ;;      Locals:         0       0       0       0       0
  1789 ;;      Temps:          0       0       0       0       0
  1790 ;;      Totals:         0       4       0       0       0
  1791 ;;Total ram usage:        4 bytes
  1792 ;; Hardware stack levels used: 1
  1793 ;; Hardware stack levels required when called: 1
  1794 ;; This function calls:
  1795 ;;		___aldiv
  1796 ;; This function is called by:
  1797 ;;		_main
  1798 ;; This function uses a non-reentrant model
  1799 ;;
  1800                           
  1801                           
  1802                           ;psect for function _I2C_Init
  1803  05D0                     _I2C_Init:
  1804  05D0                     l1041:	
  1805                           ;incstack = 0
  1806                           ; Regs used in _I2C_Init: [wreg+status,2+status,0+pclath+cstack]
  1807                           
  1808                           
  1809                           ;i2c_lcd.c: 6:   SSPCON = 0x28;
  1810  05D0  3028               	movlw	40
  1811  05D1  1283               	bcf	3,5	;RP0=0, select bank0
  1812  05D2  1303               	bcf	3,6	;RP1=0, select bank0
  1813  05D3  0094               	movwf	20	;volatile
  1814  05D4                     l1043:
  1815                           
  1816                           ;i2c_lcd.c: 7:   SSPCON2 = 0x00;
  1817  05D4  1683               	bsf	3,5	;RP0=1, select bank1
  1818  05D5  1303               	bcf	3,6	;RP1=0, select bank1
  1819  05D6  0191               	clrf	17	;volatile
  1820  05D7                     l1045:
  1821                           
  1822                           ;i2c_lcd.c: 8:   SSPSTAT = 0x00;
  1823  05D7  0194               	clrf	20	;volatile
  1824  05D8                     l1047:
  1825                           
  1826                           ;i2c_lcd.c: 9:   SSPADD = (unsigned char)( (16000000/4)/I2C_BaudRate ) - 1;
  1827  05D8  1283               	bcf	3,5	;RP0=0, select bank0
  1828  05D9  1303               	bcf	3,6	;RP1=0, select bank0
  1829  05DA  0829               	movf	I2C_Init@I2C_BaudRate+3,w
  1830  05DB  00F3               	movwf	___aldiv@divisor+3
  1831  05DC  0828               	movf	I2C_Init@I2C_BaudRate+2,w
  1832  05DD  00F2               	movwf	___aldiv@divisor+2
  1833  05DE  0827               	movf	I2C_Init@I2C_BaudRate+1,w
  1834  05DF  00F1               	movwf	___aldiv@divisor+1
  1835  05E0  0826               	movf	I2C_Init@I2C_BaudRate,w
  1836  05E1  00F0               	movwf	___aldiv@divisor
  1837  05E2  3000               	movlw	0
  1838  05E3  00F7               	movwf	___aldiv@dividend+3
  1839  05E4  303D               	movlw	61
  1840  05E5  00F6               	movwf	___aldiv@dividend+2
  1841  05E6  3009               	movlw	9
  1842  05E7  00F5               	movwf	___aldiv@dividend+1
  1843  05E8  3000               	movlw	0
  1844  05E9  00F4               	movwf	___aldiv@dividend
  1845  05EA  120A  118A  26BA  120A  118A  	fcall	___aldiv
  1846  05EF  0870               	movf	?___aldiv,w
  1847  05F0  3EFF               	addlw	255
  1848  05F1  1683               	bsf	3,5	;RP0=1, select bank1
  1849  05F2  1303               	bcf	3,6	;RP1=0, select bank1
  1850  05F3  0093               	movwf	19	;volatile
  1851  05F4                     l1049:
  1852                           
  1853                           ;i2c_lcd.c: 10:   TRISC3 = 1;
  1854  05F4  1587               	bsf	7,3	;volatile
  1855  05F5                     l1051:
  1856                           
  1857                           ;i2c_lcd.c: 11:   TRISC4 = 1;
  1858  05F5  1607               	bsf	7,4	;volatile
  1859  05F6                     l45:
  1860  05F6  0008               	return
  1861  05F7                     __end_of_I2C_Init:
  1862                           
  1863                           	psect	text15
  1864  06BA                     __ptext15:	
  1865 ;; *************** function ___aldiv *****************
  1866 ;; Defined at:
  1867 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  divisor         4    0[COMMON] long 
  1870 ;;  dividend        4    4[COMMON] long 
  1871 ;; Auto vars:     Size  Location     Type
  1872 ;;  quotient        4    2[BANK0 ] long 
  1873 ;;  sign            1    1[BANK0 ] unsigned char 
  1874 ;;  counter         1    0[BANK0 ] unsigned char 
  1875 ;; Return value:  Size  Location     Type
  1876 ;;                  4    0[COMMON] long 
  1877 ;; Registers used:
  1878 ;;		wreg, status,2, status,0
  1879 ;; Tracked objects:
  1880 ;;		On entry : 0/0
  1881 ;;		On exit  : 0/0
  1882 ;;		Unchanged: 0/0
  1883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1884 ;;      Params:         8       0       0       0       0
  1885 ;;      Locals:         0       6       0       0       0
  1886 ;;      Temps:          1       0       0       0       0
  1887 ;;      Totals:         9       6       0       0       0
  1888 ;;Total ram usage:       15 bytes
  1889 ;; Hardware stack levels used: 1
  1890 ;; This function calls:
  1891 ;;		Nothing
  1892 ;; This function is called by:
  1893 ;;		_I2C_Init
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function ___aldiv
  1899  06BA                     ___aldiv:
  1900  06BA                     l1001:	
  1901                           ;incstack = 0
  1902                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1903                           
  1904  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  1905  06BB  1303               	bcf	3,6	;RP1=0, select bank0
  1906  06BC  01A1               	clrf	___aldiv@sign
  1907  06BD                     l1003:
  1908  06BD  1FF3               	btfss	___aldiv@divisor+3,7
  1909  06BE  2EC0               	goto	u231
  1910  06BF  2EC1               	goto	u230
  1911  06C0                     u231:
  1912  06C0  2ECE               	goto	l298
  1913  06C1                     u230:
  1914  06C1                     l1005:
  1915  06C1  09F0               	comf	___aldiv@divisor,f
  1916  06C2  09F1               	comf	___aldiv@divisor+1,f
  1917  06C3  09F2               	comf	___aldiv@divisor+2,f
  1918  06C4  09F3               	comf	___aldiv@divisor+3,f
  1919  06C5  0AF0               	incf	___aldiv@divisor,f
  1920  06C6  1903               	skipnz
  1921  06C7  0AF1               	incf	___aldiv@divisor+1,f
  1922  06C8  1903               	skipnz
  1923  06C9  0AF2               	incf	___aldiv@divisor+2,f
  1924  06CA  1903               	skipnz
  1925  06CB  0AF3               	incf	___aldiv@divisor+3,f
  1926  06CC  01A1               	clrf	___aldiv@sign
  1927  06CD  0AA1               	incf	___aldiv@sign,f
  1928  06CE                     l298:
  1929  06CE  1FF7               	btfss	___aldiv@dividend+3,7
  1930  06CF  2ED1               	goto	u241
  1931  06D0  2ED2               	goto	u240
  1932  06D1                     u241:
  1933  06D1  2EE1               	goto	l1011
  1934  06D2                     u240:
  1935  06D2                     l1007:
  1936  06D2  09F4               	comf	___aldiv@dividend,f
  1937  06D3  09F5               	comf	___aldiv@dividend+1,f
  1938  06D4  09F6               	comf	___aldiv@dividend+2,f
  1939  06D5  09F7               	comf	___aldiv@dividend+3,f
  1940  06D6  0AF4               	incf	___aldiv@dividend,f
  1941  06D7  1903               	skipnz
  1942  06D8  0AF5               	incf	___aldiv@dividend+1,f
  1943  06D9  1903               	skipnz
  1944  06DA  0AF6               	incf	___aldiv@dividend+2,f
  1945  06DB  1903               	skipnz
  1946  06DC  0AF7               	incf	___aldiv@dividend+3,f
  1947  06DD                     l1009:
  1948  06DD  3001               	movlw	1
  1949  06DE  00F8               	movwf	??___aldiv
  1950  06DF  0878               	movf	??___aldiv,w
  1951  06E0  06A1               	xorwf	___aldiv@sign,f
  1952  06E1                     l1011:
  1953  06E1  3000               	movlw	0
  1954  06E2  00A5               	movwf	___aldiv@quotient+3
  1955  06E3  3000               	movlw	0
  1956  06E4  00A4               	movwf	___aldiv@quotient+2
  1957  06E5  3000               	movlw	0
  1958  06E6  00A3               	movwf	___aldiv@quotient+1
  1959  06E7  3000               	movlw	0
  1960  06E8  00A2               	movwf	___aldiv@quotient
  1961  06E9                     l1013:
  1962  06E9  0873               	movf	___aldiv@divisor+3,w
  1963  06EA  0472               	iorwf	___aldiv@divisor+2,w
  1964  06EB  0471               	iorwf	___aldiv@divisor+1,w
  1965  06EC  0470               	iorwf	___aldiv@divisor,w
  1966  06ED  1903               	skipnz
  1967  06EE  2EF0               	goto	u251
  1968  06EF  2EF1               	goto	u250
  1969  06F0                     u251:
  1970  06F0  2F3E               	goto	l1033
  1971  06F1                     u250:
  1972  06F1                     l1015:
  1973  06F1  01A0               	clrf	___aldiv@counter
  1974  06F2  0AA0               	incf	___aldiv@counter,f
  1975  06F3  2F01               	goto	l1019
  1976  06F4                     l1017:
  1977  06F4  3001               	movlw	1
  1978  06F5  00F8               	movwf	??___aldiv
  1979  06F6                     u265:
  1980  06F6  1003               	clrc
  1981  06F7  0DF0               	rlf	___aldiv@divisor,f
  1982  06F8  0DF1               	rlf	___aldiv@divisor+1,f
  1983  06F9  0DF2               	rlf	___aldiv@divisor+2,f
  1984  06FA  0DF3               	rlf	___aldiv@divisor+3,f
  1985  06FB  0BF8               	decfsz	??___aldiv,f
  1986  06FC  2EF6               	goto	u265
  1987  06FD  3001               	movlw	1
  1988  06FE  00F8               	movwf	??___aldiv
  1989  06FF  0878               	movf	??___aldiv,w
  1990  0700  07A0               	addwf	___aldiv@counter,f
  1991  0701                     l1019:
  1992  0701  1FF3               	btfss	___aldiv@divisor+3,7
  1993  0702  2F04               	goto	u271
  1994  0703  2F05               	goto	u270
  1995  0704                     u271:
  1996  0704  2EF4               	goto	l1017
  1997  0705                     u270:
  1998  0705                     l1021:
  1999  0705  3001               	movlw	1
  2000  0706  00F8               	movwf	??___aldiv
  2001  0707                     u285:
  2002  0707  1003               	clrc
  2003  0708  0DA2               	rlf	___aldiv@quotient,f
  2004  0709  0DA3               	rlf	___aldiv@quotient+1,f
  2005  070A  0DA4               	rlf	___aldiv@quotient+2,f
  2006  070B  0DA5               	rlf	___aldiv@quotient+3,f
  2007  070C  0BF8               	decfsz	??___aldiv,f
  2008  070D  2F07               	goto	u285
  2009  070E                     l1023:
  2010  070E  0873               	movf	___aldiv@divisor+3,w
  2011  070F  0277               	subwf	___aldiv@dividend+3,w
  2012  0710  1D03               	skipz
  2013  0711  2F1C               	goto	u295
  2014  0712  0872               	movf	___aldiv@divisor+2,w
  2015  0713  0276               	subwf	___aldiv@dividend+2,w
  2016  0714  1D03               	skipz
  2017  0715  2F1C               	goto	u295
  2018  0716  0871               	movf	___aldiv@divisor+1,w
  2019  0717  0275               	subwf	___aldiv@dividend+1,w
  2020  0718  1D03               	skipz
  2021  0719  2F1C               	goto	u295
  2022  071A  0870               	movf	___aldiv@divisor,w
  2023  071B  0274               	subwf	___aldiv@dividend,w
  2024  071C                     u295:
  2025  071C  1C03               	skipc
  2026  071D  2F1F               	goto	u291
  2027  071E  2F20               	goto	u290
  2028  071F                     u291:
  2029  071F  2F2F               	goto	l1029
  2030  0720                     u290:
  2031  0720                     l1025:
  2032  0720  0870               	movf	___aldiv@divisor,w
  2033  0721  02F4               	subwf	___aldiv@dividend,f
  2034  0722  0871               	movf	___aldiv@divisor+1,w
  2035  0723  1C03               	skipc
  2036  0724  0F71               	incfsz	___aldiv@divisor+1,w
  2037  0725  02F5               	subwf	___aldiv@dividend+1,f
  2038  0726  0872               	movf	___aldiv@divisor+2,w
  2039  0727  1C03               	skipc
  2040  0728  0F72               	incfsz	___aldiv@divisor+2,w
  2041  0729  02F6               	subwf	___aldiv@dividend+2,f
  2042  072A  0873               	movf	___aldiv@divisor+3,w
  2043  072B  1C03               	skipc
  2044  072C  0F73               	incfsz	___aldiv@divisor+3,w
  2045  072D  02F7               	subwf	___aldiv@dividend+3,f
  2046  072E                     l1027:
  2047  072E  1422               	bsf	___aldiv@quotient,0
  2048  072F                     l1029:
  2049  072F  3001               	movlw	1
  2050  0730                     u305:
  2051  0730  1003               	clrc
  2052  0731  0CF3               	rrf	___aldiv@divisor+3,f
  2053  0732  0CF2               	rrf	___aldiv@divisor+2,f
  2054  0733  0CF1               	rrf	___aldiv@divisor+1,f
  2055  0734  0CF0               	rrf	___aldiv@divisor,f
  2056  0735  3EFF               	addlw	-1
  2057  0736  1D03               	skipz
  2058  0737  2F30               	goto	u305
  2059  0738                     l1031:
  2060  0738  3001               	movlw	1
  2061  0739  02A0               	subwf	___aldiv@counter,f
  2062  073A  1D03               	btfss	3,2
  2063  073B  2F3D               	goto	u311
  2064  073C  2F3E               	goto	u310
  2065  073D                     u311:
  2066  073D  2F05               	goto	l1021
  2067  073E                     u310:
  2068  073E                     l1033:
  2069  073E  0821               	movf	___aldiv@sign,w
  2070  073F  1903               	btfsc	3,2
  2071  0740  2F42               	goto	u321
  2072  0741  2F43               	goto	u320
  2073  0742                     u321:
  2074  0742  2F4E               	goto	l1037
  2075  0743                     u320:
  2076  0743                     l1035:
  2077  0743  09A2               	comf	___aldiv@quotient,f
  2078  0744  09A3               	comf	___aldiv@quotient+1,f
  2079  0745  09A4               	comf	___aldiv@quotient+2,f
  2080  0746  09A5               	comf	___aldiv@quotient+3,f
  2081  0747  0AA2               	incf	___aldiv@quotient,f
  2082  0748  1903               	skipnz
  2083  0749  0AA3               	incf	___aldiv@quotient+1,f
  2084  074A  1903               	skipnz
  2085  074B  0AA4               	incf	___aldiv@quotient+2,f
  2086  074C  1903               	skipnz
  2087  074D  0AA5               	incf	___aldiv@quotient+3,f
  2088  074E                     l1037:
  2089  074E  0825               	movf	___aldiv@quotient+3,w
  2090  074F  00F3               	movwf	?___aldiv+3
  2091  0750  0824               	movf	___aldiv@quotient+2,w
  2092  0751  00F2               	movwf	?___aldiv+2
  2093  0752  0823               	movf	___aldiv@quotient+1,w
  2094  0753  00F1               	movwf	?___aldiv+1
  2095  0754  0822               	movf	___aldiv@quotient,w
  2096  0755  00F0               	movwf	?___aldiv
  2097  0756                     l308:
  2098  0756  0008               	return
  2099  0757                     __end_of___aldiv:
  2100  007E                     btemp	set	126	;btemp
  2101  007E                     wtemp0	set	126
  2102                           
  2103                           	psect	config
  2104                           
  2105                           ;Config register CONFIG @ 0x2007
  2106                           ;	Oscillator Selection bits
  2107                           ;	FOSC = XT, XT oscillator
  2108                           ;	Watchdog Timer Enable bit
  2109                           ;	WDTE = OFF, WDT disabled
  2110                           ;	Power-up Timer Enable bit
  2111                           ;	PWRTE = ON, PWRT enabled
  2112                           ;	Brown-out Reset Enable bit
  2113                           ;	BOREN = ON, BOR enabled
  2114                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2115                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2116                           ;	Data EEPROM Memory Code Protection bit
  2117                           ;	CPD = OFF, Data EEPROM code protection off
  2118                           ;	Flash Program Memory Write Enable bits
  2119                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2120                           ;	In-Circuit Debugger Mode bit
  2121                           ;	DEBUG = 0x1, unprogrammed default
  2122                           ;	Flash Program Memory Code Protection bit
  2123                           ;	CP = OFF, Code protection off
  2124  2007                     	org	8199
  2125  2007  3FF1               	dw	16369

Data Sizes:
    Strings     20
    Constant    0
    Data        1
    BSS         1
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     10      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@Str	PTR unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[10]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->_LCD_Init
    _main->_LCD_Set_Cursor
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Char->_LCD_Write_4Bit
    _LCD_Set_Cursor->_LCD_Cmd
    _LCD_SR->_LCD_Cmd
    _LCD_SL->_LCD_Cmd
    _LCD_Init->_LCD_Cmd
    _LCD_Cmd->_LCD_Write_4Bit
    _LCD_Write_4Bit->_IO_Expander_Write
    _IO_Expander_Write->_I2C_Write_Char
    _I2C_Init->___aldiv

Critical Paths under _main in BANK0

    _main->_I2C_Init
    _I2C_Init->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1699
                                             10 COMMON     3     3      0
                           _I2C_Init
                           _LCD_Init
                             _LCD_SL
                             _LCD_SR
                     _LCD_Set_Cursor
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     289
                                              6 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       4     3      1     395
                                              6 COMMON     4     3      1
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_SR                                               1     1      0     133
                                              6 COMMON     1     1      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               1     1      0     133
                                              6 COMMON     1     1      0
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0     199
                                              6 COMMON     4     4      0
                  _IO_Expander_Write
                            _LCD_Cmd
 ---------------------------------------------------------------------------------
 (2) _LCD_Cmd                                              2     2      0     133
                                              4 COMMON     2     2      0
                     _LCD_Write_4Bit
 ---------------------------------------------------------------------------------
 (3) _LCD_Write_4Bit                                       2     2      0      89
                                              2 COMMON     2     2      0
                  _IO_Expander_Write
 ---------------------------------------------------------------------------------
 (4) _IO_Expander_Write                                    1     1      0      44
                                              1 COMMON     1     1      0
                          _I2C_Start
                           _I2C_Stop
                     _I2C_Write_Char
 ---------------------------------------------------------------------------------
 (5) _I2C_Write_Char                                       1     1      0      22
                                              0 COMMON     1     1      0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Stop                                             0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Start                                            0     0      0       0
                           _I2C_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Wait                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             4     0      4     550
                                              6 BANK0      4     0      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Init
     ___aldiv
   _LCD_Init
     _IO_Expander_Write
       _I2C_Start
         _I2C_Wait
       _I2C_Stop
         _I2C_Wait
       _I2C_Write_Char
         _I2C_Wait
     _LCD_Cmd
       _LCD_Write_4Bit
         _IO_Expander_Write
   _LCD_SL
     _LCD_Cmd
   _LCD_SR
     _LCD_Cmd
   _LCD_Set_Cursor
     _LCD_Cmd
   _LCD_Write_String
     _LCD_Write_Char
       _LCD_Write_4Bit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      A       C       5       15.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      1A      12        0.0%
ABS                  0      0      1A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Jan 24 17:45:26 2022

                         pc 0002          __size_of_I2C_Start 0009                          l51 052F  
                        l60 050C                          l45 05F6                          l54 0503  
                        l71 053E                          l48 0523                          l72 053F  
                        l81 07F4                          l90 0572                          l84 05AA  
                        l69 053A                          l93 058D                          l87 0558  
                        l99 05CF                          _RS 007D                          fsr 0004  
                       l120 0522                         l108 062F                         l117 0517  
                       l308 0756                         l298 06CE                         l971 04FB  
                       l973 0500                         l981 0536                         l967 0523  
                       l975 0504                         l983 058F                         l991 055A  
                       l969 0529                         l977 0509                         l985 0541  
                       l993 055B                         l979 0531                         l987 0545  
                       l995 0562                         l989 054C                         l997 0574  
                       l999 0576                         u200 053E                         u201 053D  
                       u310 073E                         u230 06C1                         u311 073D  
                       u231 06C0                         u215 0565                         u320 0743  
                       u240 06D2                         u321 0742                         u305 0730  
                       u241 06D1                         u225 0580                         u250 06F1  
                       u330 05CF                         u251 06F0                         u331 05CE  
                       u180 0529                         u181 0528                         u270 0705  
                       u190 052F                         u271 0704                         u191 052E  
                       u407 0520                         _PEN 048A                         u265 06F6  
                       u417 0515                         u290 0720                         u291 071F  
                       u507 07ED                         u427 0768                         u285 0707  
                       u517 0555                         u437 0776                         u357 066B  
                       u295 071C                         u447 0785                         u367 067D  
                       u457 0794                         u377 068E                         u467 07A3  
                       u387 069F                         _SEN 0488                         u477 07B4  
                       u397 06B0                         u487 07C7                         u497 07DA  
                       fsr0 0004             __end_of_LCD_Cmd 0573         LCD_Write_String@Str 0078  
            _LCD_Set_Cursor 05F7                        l1001 06BA                        l1011 06E1  
                      l1003 06BD                        l1021 0705                        l1013 06E9  
                      l1005 06C1                        l1031 0738                        l1023 070E  
                      l1015 06F1                        l1007 06D2                        l1103 050D  
                      l1025 0720                        l1017 06F4                        l1033 073E  
                      l1009 06DD                        l1041 05D0                        l1105 0513  
                      l1035 0743                        l1027 072E                        l1019 0701  
                      l1051 05F5                        l1043 05D4                        l1107 0518  
                      l1037 074E                        l1029 072F                        l1045 05D7  
                      l1061 077B                        l1053 0758                        l1109 051E  
                      l1047 05D8                        l1071 07BB                        l1063 078A  
                      l1055 075E                        l1151 0634                        l1049 05F4  
                      l1073 07C1                        l1065 0790                        l1057 0764  
                      l1081 05AF                        l1161 065F                        l1153 0643  
                      l1075 07D4                        l1067 079F                        l1059 0772  
                      l1091 0601                        l1083 05BC                        l1171 06A5  
                      l1163 0672                        l1155 0649                        l1077 07E1  
                      l1069 07A8                        l1093 0609                        l1085 05C2  
                      l1173 06AA                        l1165 0677                        l1157 0651  
                      l1149 0630                        l1095 0611                        l1087 05F8  
                      l1079 05AC                        l1167 0688                        l1159 0657  
                      l1089 05F9                        l1097 0619                        l1169 0694  
                      l1195 0621                        STR_1 0013                        STR_2 0009  
                      _RCEN 048B                        _RSEN 0489           ?_LCD_Write_String 0070  
                      _main 0630            __end_of_I2C_Init 05F7                        btemp 007E  
          __end_of_I2C_Wait 0530            __end_of_I2C_Stop 050D                        start 0000  
        ??_LCD_Write_String 0076        LCD_Write_4Bit@Nibble 0073            __end_of_LCD_Init 07F5  
           __end_of___aldiv 0757                       ?_main 0070                       _ACKEN 048C  
                     _ACKDT 048D                       _SSPIF 0063      __end_of_LCD_Set_Cursor 0630  
         __end_of_I2C_Start 0504                       pclath 000A                       status 0003  
                     wtemp0 007E              _LCD_Write_4Bit 0540              _LCD_Write_Char 0573  
           __initialization 07F5                __end_of_main 06BA           _IO_Expander_Write 058E  
        ?_IO_Expander_Write 0070                      ??_main 007A                   ??_LCD_Cmd 0074  
       ??_IO_Expander_Write 0071             ?_LCD_Set_Cursor 0076                      _ADCON1 009F  
                    _LCD_SL 050D                      _LCD_SR 0518                      _SSPADD 0093  
                    _TRISC3 043B                      _TRISC4 043C                      _SSPCON 0014  
                    _SSPBUF 0013      __end_of_LCD_Write_4Bit 0559      __end_of_LCD_Write_Char 058E  
 __end_of_IO_Expander_Write 05AB                   ??___aldiv 0078                   ?_I2C_Init 0026  
                 ?_I2C_Wait 0070                   ?_I2C_Stop 0070     __end_of__initialization 07FC  
                 ?_LCD_Init 0070             ?_LCD_Write_4Bit 0070             ?_LCD_Write_Char 0070  
            __pcstackCOMMON 0070                __pidataBANK0 04FA                  ??_I2C_Init 0079  
                ??_I2C_Wait 0070                  ??_I2C_Stop 0070                     ?_LCD_SL 0070  
                   ?_LCD_SR 0070                  ??_LCD_Init 0076  __size_of_IO_Expander_Write 001D  
                __pmaintext 0630     __size_of_I2C_Write_Char 0010                     _ACKSTAT 048E  
 __size_of_LCD_Write_String 0025                     _LCD_Cmd 0559                     _SSPCON2 0091  
                   _SSPSTAT 0094                  __stringtab 0003             __size_of_LCD_SL 000B  
           __size_of_LCD_SR 000B                     _i2c_add 002A                   _I2C_Start 04FB  
                   ___aldiv 06BA            ??_LCD_Set_Cursor 0077                     __ptext1 05AB  
                   __ptext2 0573                     __ptext3 05F7                     __ptext4 0518  
                   __ptext5 050D                     __ptext6 0757                     __ptext7 0559  
                   __ptext8 0540                     __ptext9 058E            ___aldiv@dividend 0074  
      end_of_initialization 07FC                  ?_I2C_Start 0070            ___aldiv@quotient 0022  
         __size_of_I2C_Init 0027           __size_of_I2C_Wait 000D           __size_of_I2C_Stop 0009  
          ??_LCD_Write_4Bit 0072           LCD_Write_String@i 0076            ??_LCD_Write_Char 0074  
                LCD_Cmd@Cmd 0075              __end_of_LCD_SL 0518              __end_of_LCD_SR 0523  
         __size_of_LCD_Init 009E              _I2C_Write_Char 0530            _LCD_Write_String 05AB  
       start_initialization 07F5                    ??_LCD_SL 0076                    ??_LCD_SR 0076  
               ??_I2C_Start 0070      __end_of_I2C_Write_Char 0540                 __pdataBANK0 002B  
                  ?_LCD_Cmd 0070                 __pbssCOMMON 007D                   ___latbits 0002  
             __pcstackBANK0 0020                   __pnvBANK0 002A       IO_Expander_Write@Data 0071  
           ?_I2C_Write_Char 0070                    ?___aldiv 0070                   __pstrings 0003  
      I2C_Init@I2C_BaudRate 0026                    _I2C_Init 05D0                    _I2C_Wait 0523  
                  _I2C_Stop 0504             ___aldiv@divisor 0070             ___aldiv@counter 0020  
                  _LCD_Init 0757                 __stringbase 0008            __size_of_LCD_Cmd 001A  
  __end_of_LCD_Write_String 05D0            __size_of___aldiv 009D          __end_of__stringtab 0009  
                  __ptext10 0530                    __ptext11 0504                    __ptext12 04FB  
                  __ptext13 0523                    __ptext14 05D0                    __ptext15 06BA  
   __size_of_LCD_Set_Cursor 0039             _BackLight_State 002B               __size_of_main 008A  
        LCD_Write_Char@Data 0075            ??_I2C_Write_Char 0070                   stringcode 0003  
   __size_of_LCD_Write_4Bit 0019     __size_of_LCD_Write_Char 001B             LCD_Init@I2C_Add 0079  
                  stringdir 0003                    stringtab 0003                ___aldiv@sign 0021  
         LCD_Set_Cursor@COL 0076           LCD_Set_Cursor@ROW 0079          I2C_Write_Char@Data 0070  
