

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Sat Jun 04 17:07:27 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	text7,local,class=CODE,merge=1,delta=2
    16                           	psect	text8,local,class=CODE,merge=1,delta=2
    17                           	psect	text9,local,class=CODE,merge=1,delta=2
    18                           	psect	text10,local,class=CODE,merge=1,delta=2
    19                           	psect	text11,local,class=CODE,merge=1,delta=2
    20                           	psect	text12,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 12/02/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0043                     _RD3	set	67
   238  0042                     _RD2	set	66
   239  0047                     _RD7	set	71
   240  0046                     _RD6	set	70
   241  0045                     _RD5	set	69
   242  0044                     _RD4	set	68
   243  0088                     _TRISD	set	136
   244  009F                     _ADCON1	set	159
   245  0443                     _TRISD3	set	1091
   246  0442                     _TRISD2	set	1090
   247                           
   248                           	psect	strings
   249  0003                     __pstrings:
   250  0003                     stringtab:
   251  0003                     __stringtab:
   252  0003                     stringcode:	
   253                           ;	String table - string pointers are 1 byte each
   254                           
   255  0003                     stringdir:
   256  0003  3000               	movlw	high stringdir
   257  0004  008A               	movwf	10
   258  0005  0804               	movf	4,w
   259  0006  0A84               	incf	4,f
   260  0007  0782               	addwf	2,f
   261  0008                     __stringbase:
   262  0008  3400               	retlw	0
   263  0009                     __end_of__stringtab:
   264  0009                     STR_1:
   265  0009  3444               	retlw	68	;'D'
   266  000A  3455               	retlw	85	;'U'
   267  000B  3443               	retlw	67	;'C'
   268  000C  3420               	retlw	32	;' '
   269  000D  3444               	retlw	68	;'D'
   270  000E  3441               	retlw	65	;'A'
   271  000F  3454               	retlw	84	;'T'
   272  0010  3400               	retlw	0
   273                           
   274                           	psect	cinit
   275  07FC                     start_initialization:	
   276                           ; #config settings
   277                           
   278  07FC                     __initialization:
   279  07FC                     end_of_initialization:	
   280                           ;End of C runtime variable initialization code
   281                           
   282  07FC                     __end_of__initialization:
   283  07FC  0183               	clrf	3
   284  07FD  120A  118A  2EBA   	ljmp	_main	;jump to C main() function
   285                           
   286                           	psect	cstackCOMMON
   287  0070                     __pcstackCOMMON:
   288  0070                     ?_LCD_Init:
   289  0070                     ?_LCD_Clear:	
   290                           ; 1 bytes @ 0x0
   291                           
   292  0070                     ?_LCD_Write_String:	
   293                           ; 1 bytes @ 0x0
   294                           
   295  0070                     ?_LCD_SR:	
   296                           ; 1 bytes @ 0x0
   297                           
   298  0070                     ?_LCD_SL:	
   299                           ; 1 bytes @ 0x0
   300                           
   301  0070                     ?_main:	
   302                           ; 1 bytes @ 0x0
   303                           
   304  0070                     ?_LCD_DATA:	
   305                           ; 1 bytes @ 0x0
   306                           
   307  0070                     ??_LCD_DATA:	
   308                           ; 1 bytes @ 0x0
   309                           
   310  0070                     ?_LCD_CMD:	
   311                           ; 1 bytes @ 0x0
   312                           
   313  0070                     ?_LCD_Write_Char:	
   314                           ; 1 bytes @ 0x0
   315                           
   316  0070                     ?___aldiv:	
   317                           ; 1 bytes @ 0x0
   318                           
   319  0070                     ?___almod:	
   320                           ; 4 bytes @ 0x0
   321                           
   322  0070                     LCD_DATA@Data:	
   323                           ; 4 bytes @ 0x0
   324                           
   325  0070                     ___aldiv@divisor:	
   326                           ; 1 bytes @ 0x0
   327                           
   328  0070                     ___almod@divisor:	
   329                           ; 4 bytes @ 0x0
   330                           
   331                           
   332                           ; 4 bytes @ 0x0
   333  0070                     	ds	1
   334  0071                     ??_LCD_CMD:
   335  0071                     ??_LCD_Write_Char:	
   336                           ; 1 bytes @ 0x1
   337                           
   338                           
   339                           ; 1 bytes @ 0x1
   340  0071                     	ds	2
   341  0073                     LCD_CMD@CMD:
   342  0073                     LCD_Write_Char@Low4:	
   343                           ; 1 bytes @ 0x3
   344                           
   345                           
   346                           ; 1 bytes @ 0x3
   347  0073                     	ds	1
   348  0074                     ??_LCD_Init:
   349  0074                     ??_LCD_Clear:	
   350                           ; 1 bytes @ 0x4
   351                           
   352  0074                     ?_LCD_Set_Cursor:	
   353                           ; 1 bytes @ 0x4
   354                           
   355  0074                     ??_LCD_SR:	
   356                           ; 1 bytes @ 0x4
   357                           
   358  0074                     ??_LCD_SL:	
   359                           ; 1 bytes @ 0x4
   360                           
   361  0074                     LCD_Write_Char@High4:	
   362                           ; 1 bytes @ 0x4
   363                           
   364  0074                     LCD_Set_Cursor@c:	
   365                           ; 1 bytes @ 0x4
   366                           
   367  0074                     ___aldiv@dividend:	
   368                           ; 1 bytes @ 0x4
   369                           
   370  0074                     ___almod@dividend:	
   371                           ; 4 bytes @ 0x4
   372                           
   373                           
   374                           ; 4 bytes @ 0x4
   375  0074                     	ds	1
   376  0075                     ??_LCD_Set_Cursor:
   377  0075                     LCD_Write_Char@Data:	
   378                           ; 1 bytes @ 0x5
   379                           
   380                           
   381                           ; 1 bytes @ 0x5
   382  0075                     	ds	1
   383  0076                     ??_LCD_Write_String:
   384  0076                     LCD_Write_String@i:	
   385                           ; 1 bytes @ 0x6
   386                           
   387                           
   388                           ; 2 bytes @ 0x6
   389  0076                     	ds	1
   390  0077                     LCD_Set_Cursor@r:
   391                           
   392                           ; 1 bytes @ 0x7
   393  0077                     	ds	1
   394  0078                     ??___aldiv:
   395  0078                     ??___almod:	
   396                           ; 1 bytes @ 0x8
   397                           
   398  0078                     LCD_Write_String@str:	
   399                           ; 1 bytes @ 0x8
   400                           
   401  0078                     LCD_Set_Cursor@Low4:	
   402                           ; 1 bytes @ 0x8
   403                           
   404                           
   405                           ; 1 bytes @ 0x8
   406  0078                     	ds	1
   407  0079                     LCD_Set_Cursor@High4:
   408  0079                     ___almod@counter:	
   409                           ; 1 bytes @ 0x9
   410                           
   411                           
   412                           ; 1 bytes @ 0x9
   413  0079                     	ds	1
   414  007A                     LCD_Set_Cursor@Temp:
   415  007A                     ___almod@sign:	
   416                           ; 1 bytes @ 0xA
   417                           
   418                           
   419                           ; 1 bytes @ 0xA
   420  007A                     	ds	1
   421  007B                     ??_LCD_Write_Number:
   422                           
   423                           ; 1 bytes @ 0xB
   424  007B                     	ds	2
   425                           
   426                           	psect	cstackBANK0
   427  0020                     __pcstackBANK0:
   428  0020                     ___aldiv@counter:
   429                           
   430                           ; 1 bytes @ 0x0
   431  0020                     	ds	1
   432  0021                     ___aldiv@sign:
   433                           
   434                           ; 1 bytes @ 0x1
   435  0021                     	ds	1
   436  0022                     ___aldiv@quotient:
   437                           
   438                           ; 4 bytes @ 0x2
   439  0022                     	ds	4
   440  0026                     ?_LCD_Write_Number:
   441  0026                     LCD_Write_Number@number:	
   442                           ; 1 bytes @ 0x6
   443                           
   444                           
   445                           ; 4 bytes @ 0x6
   446  0026                     	ds	4
   447  002A                     LCD_Write_Number@num:
   448                           
   449                           ; 20 bytes @ 0xA
   450  002A                     	ds	20
   451  003E                     LCD_Write_Number@length:
   452                           
   453                           ; 2 bytes @ 0x1E
   454  003E                     	ds	2
   455  0040                     LCD_Write_Number@c:
   456                           
   457                           ; 1 bytes @ 0x20
   458  0040                     	ds	1
   459  0041                     LCD_Write_Number@p:
   460                           
   461                           ; 2 bytes @ 0x21
   462  0041                     	ds	2
   463  0043                     ??_main:
   464                           
   465                           ; 1 bytes @ 0x23
   466  0043                     	ds	3
   467  0046                     main@i:
   468                           
   469                           ; 2 bytes @ 0x26
   470  0046                     	ds	2
   471  0048                     main@i_68:
   472                           
   473                           ; 2 bytes @ 0x28
   474  0048                     	ds	2
   475                           
   476                           	psect	maintext
   477  06BA                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 11 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  i               2   40[BANK0 ] int 
   488 ;;  i               2   38[BANK0 ] int 
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   493 ;; Tracked objects:
   494 ;;		On entry : B00/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   498 ;;      Params:         0       0       0       0       0
   499 ;;      Locals:         0       4       0       0       0
   500 ;;      Temps:          0       3       0       0       0
   501 ;;      Totals:         0       7       0       0       0
   502 ;;Total ram usage:        7 bytes
   503 ;; Hardware stack levels required when called: 3
   504 ;; This function calls:
   505 ;;		_LCD_Clear
   506 ;;		_LCD_Init
   507 ;;		_LCD_SL
   508 ;;		_LCD_SR
   509 ;;		_LCD_Set_Cursor
   510 ;;		_LCD_Write_Number
   511 ;;		_LCD_Write_String
   512 ;; This function is called by:
   513 ;;		Startup code after reset
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517  06BA                     _main:	
   518                           ;psect for function _main
   519                           
   520  06BA                     l1205:	
   521                           ;incstack = 0
   522                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   523                           
   524                           
   525                           ;main.c: 13:     ADCON1 = 0x06;
   526  06BA  3006               	movlw	6
   527  06BB  1683               	bsf	3,5	;RP0=1, select bank1
   528  06BC  1303               	bcf	3,6	;RP1=0, select bank1
   529  06BD  009F               	movwf	31	;volatile
   530  06BE                     l1207:
   531                           
   532                           ;main.c: 15:     LCD_Init();
   533  06BE  120A  118A  2531  120A  118A  	fcall	_LCD_Init
   534  06C3                     l1209:
   535                           
   536                           ;main.c: 16:     LCD_Clear();
   537  06C3  120A  118A  2401  120A  118A  	fcall	_LCD_Clear
   538  06C8                     l1211:
   539                           
   540                           ;main.c: 17:     LCD_Set_Cursor(1,1);
   541  06C8  01F4               	clrf	LCD_Set_Cursor@c
   542  06C9  0AF4               	incf	LCD_Set_Cursor@c,f
   543  06CA  3001               	movlw	1
   544  06CB  120A  118A  248C  120A  118A  	fcall	_LCD_Set_Cursor
   545  06D0                     l1213:
   546                           
   547                           ;main.c: 18:     LCD_Write_String("DUC DAT");
   548  06D0  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   549  06D1  120A  118A  2439  120A  118A  	fcall	_LCD_Write_String
   550  06D6                     l1215:
   551                           
   552                           ;main.c: 19:     LCD_Set_Cursor(2,1);
   553  06D6  01F4               	clrf	LCD_Set_Cursor@c
   554  06D7  0AF4               	incf	LCD_Set_Cursor@c,f
   555  06D8  3002               	movlw	2
   556  06D9  120A  118A  248C  120A  118A  	fcall	_LCD_Set_Cursor
   557  06DE                     l1217:
   558                           
   559                           ;main.c: 20:     LCD_Write_Number(300720001);
   560  06DE  3011               	movlw	17
   561  06DF  1283               	bcf	3,5	;RP0=0, select bank0
   562  06E0  1303               	bcf	3,6	;RP1=0, select bank0
   563  06E1  00A9               	movwf	LCD_Write_Number@number+3
   564  06E2  30EC               	movlw	236
   565  06E3  00A8               	movwf	LCD_Write_Number@number+2
   566  06E4  309F               	movlw	159
   567  06E5  00A7               	movwf	LCD_Write_Number@number+1
   568  06E6  3081               	movlw	129
   569  06E7  00A6               	movwf	LCD_Write_Number@number
   570  06E8  120A  118A  2757  120A  118A  	fcall	_LCD_Write_Number
   571                           
   572                           ;main.c: 21:     _delay((unsigned long)((2000)*(20000000/4000.0)));
   573  06ED  3033               	movlw	51
   574  06EE  1283               	bcf	3,5	;RP0=0, select bank0
   575  06EF  1303               	bcf	3,6	;RP1=0, select bank0
   576  06F0  00C5               	movwf	??_main+2
   577  06F1  30BB               	movlw	187
   578  06F2  00C4               	movwf	??_main+1
   579  06F3  30DF               	movlw	223
   580  06F4  00C3               	movwf	??_main
   581  06F5                     u737:
   582  06F5  0BC3               	decfsz	??_main,f
   583  06F6  2EF5               	goto	u737
   584  06F7  0BC4               	decfsz	??_main+1,f
   585  06F8  2EF5               	goto	u737
   586  06F9  0BC5               	decfsz	??_main+2,f
   587  06FA  2EF5               	goto	u737
   588  06FB                     l1219:
   589                           
   590                           ;main.c: 24:     {;main.c: 25:         for(int i=0; i<4; i++)
   591  06FB  1283               	bcf	3,5	;RP0=0, select bank0
   592  06FC  1303               	bcf	3,6	;RP1=0, select bank0
   593  06FD  01C6               	clrf	main@i
   594  06FE  01C7               	clrf	main@i+1
   595  06FF                     l1225:
   596                           
   597                           ;main.c: 26:         {;main.c: 27:           _delay((unsigned long)((300)*(20000000/4000
      +                          .0)));
   598  06FF  3008               	movlw	8
   599  0700  1283               	bcf	3,5	;RP0=0, select bank0
   600  0701  1303               	bcf	3,6	;RP1=0, select bank0
   601  0702  00C5               	movwf	??_main+2
   602  0703  309D               	movlw	157
   603  0704  00C4               	movwf	??_main+1
   604  0705  3005               	movlw	5
   605  0706  00C3               	movwf	??_main
   606  0707                     u747:
   607  0707  0BC3               	decfsz	??_main,f
   608  0708  2F07               	goto	u747
   609  0709  0BC4               	decfsz	??_main+1,f
   610  070A  2F07               	goto	u747
   611  070B  0BC5               	decfsz	??_main+2,f
   612  070C  2F07               	goto	u747
   613  070D                     l1227:
   614                           
   615                           ;main.c: 28:           LCD_SR();
   616  070D  120A  118A  23F4  120A  118A  	fcall	_LCD_SR
   617  0712                     l1229:
   618                           
   619                           ;main.c: 29:         }
   620  0712  3001               	movlw	1
   621  0713  1283               	bcf	3,5	;RP0=0, select bank0
   622  0714  1303               	bcf	3,6	;RP1=0, select bank0
   623  0715  07C6               	addwf	main@i,f
   624  0716  1803               	skipnc
   625  0717  0AC7               	incf	main@i+1,f
   626  0718  3000               	movlw	0
   627  0719  07C7               	addwf	main@i+1,f
   628  071A                     l1231:
   629  071A  0847               	movf	main@i+1,w
   630  071B  3A80               	xorlw	128
   631  071C  00FF               	movwf	btemp+1
   632  071D  3080               	movlw	128
   633  071E  027F               	subwf	btemp+1,w
   634  071F  1D03               	skipz
   635  0720  2F23               	goto	u715
   636  0721  3004               	movlw	4
   637  0722  0246               	subwf	main@i,w
   638  0723                     u715:
   639  0723  1C03               	skipc
   640  0724  2F26               	goto	u711
   641  0725  2F27               	goto	u710
   642  0726                     u711:
   643  0726  2EFF               	goto	l1225
   644  0727                     u710:
   645  0727                     l1233:
   646                           
   647                           ;main.c: 30:         for(int i=0; i<4; i++)
   648  0727  1283               	bcf	3,5	;RP0=0, select bank0
   649  0728  1303               	bcf	3,6	;RP1=0, select bank0
   650  0729  01C8               	clrf	main@i_68
   651  072A  01C9               	clrf	main@i_68+1
   652  072B                     l1239:
   653                           
   654                           ;main.c: 31:         {;main.c: 32:           _delay((unsigned long)((300)*(20000000/4000
      +                          .0)));
   655  072B  3008               	movlw	8
   656  072C  1283               	bcf	3,5	;RP0=0, select bank0
   657  072D  1303               	bcf	3,6	;RP1=0, select bank0
   658  072E  00C5               	movwf	??_main+2
   659  072F  309D               	movlw	157
   660  0730  00C4               	movwf	??_main+1
   661  0731  3005               	movlw	5
   662  0732  00C3               	movwf	??_main
   663  0733                     u757:
   664  0733  0BC3               	decfsz	??_main,f
   665  0734  2F33               	goto	u757
   666  0735  0BC4               	decfsz	??_main+1,f
   667  0736  2F33               	goto	u757
   668  0737  0BC5               	decfsz	??_main+2,f
   669  0738  2F33               	goto	u757
   670  0739                     l1241:
   671                           
   672                           ;main.c: 33:           LCD_SL();
   673  0739  120A  118A  23E7  120A  118A  	fcall	_LCD_SL
   674  073E                     l1243:
   675                           
   676                           ;main.c: 34:         }
   677  073E  3001               	movlw	1
   678  073F  1283               	bcf	3,5	;RP0=0, select bank0
   679  0740  1303               	bcf	3,6	;RP1=0, select bank0
   680  0741  07C8               	addwf	main@i_68,f
   681  0742  1803               	skipnc
   682  0743  0AC9               	incf	main@i_68+1,f
   683  0744  3000               	movlw	0
   684  0745  07C9               	addwf	main@i_68+1,f
   685  0746                     l1245:
   686  0746  0849               	movf	main@i_68+1,w
   687  0747  3A80               	xorlw	128
   688  0748  00FF               	movwf	btemp+1
   689  0749  3080               	movlw	128
   690  074A  027F               	subwf	btemp+1,w
   691  074B  1D03               	skipz
   692  074C  2F4F               	goto	u725
   693  074D  3004               	movlw	4
   694  074E  0248               	subwf	main@i_68,w
   695  074F                     u725:
   696  074F  1C03               	skipc
   697  0750  2F52               	goto	u721
   698  0751  2F53               	goto	u720
   699  0752                     u721:
   700  0752  2F2B               	goto	l1239
   701  0753                     u720:
   702  0753  2EFB               	goto	l1219
   703  0754  120A  118A  2800   	ljmp	start
   704  0757                     __end_of_main:
   705                           
   706                           	psect	text1
   707  0439                     __ptext1:	
   708 ;; *************** function _LCD_Write_String *****************
   709 ;; Defined at:
   710 ;;		line 100 in file "lcd.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  str             1    wreg     PTR unsigned char 
   713 ;;		 -> STR_1(8), 
   714 ;; Auto vars:     Size  Location     Type
   715 ;;  str             1    8[COMMON] PTR unsigned char 
   716 ;;		 -> STR_1(8), 
   717 ;;  i               2    6[COMMON] int 
   718 ;; Return value:  Size  Location     Type
   719 ;;                  1    wreg      void 
   720 ;; Registers used:
   721 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   722 ;; Tracked objects:
   723 ;;		On entry : 0/0
   724 ;;		On exit  : 0/0
   725 ;;		Unchanged: 0/0
   726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   727 ;;      Params:         0       0       0       0       0
   728 ;;      Locals:         3       0       0       0       0
   729 ;;      Temps:          0       0       0       0       0
   730 ;;      Totals:         3       0       0       0       0
   731 ;;Total ram usage:        3 bytes
   732 ;; Hardware stack levels used: 1
   733 ;; Hardware stack levels required when called: 2
   734 ;; This function calls:
   735 ;;		_LCD_Write_Char
   736 ;; This function is called by:
   737 ;;		_main
   738 ;;		_LCD_Write_StringXY
   739 ;; This function uses a non-reentrant model
   740 ;;
   741                           
   742  0439                     _LCD_Write_String:	
   743                           ;psect for function _LCD_Write_String
   744                           
   745                           
   746                           ;incstack = 0
   747                           ; Regs used in _LCD_Write_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   748                           ;LCD_Write_String@str stored from wreg
   749  0439  00F8               	movwf	LCD_Write_String@str
   750  043A                     l1161:
   751                           
   752                           ;lcd.c: 100: void LCD_Write_String(char *str);lcd.c: 101: {;lcd.c: 102:   int i;;lcd.c: 
      +                          103:   for(i=0;str[i]!='\0';i++)
   753  043A  01F6               	clrf	LCD_Write_String@i
   754  043B  01F7               	clrf	LCD_Write_String@i+1
   755  043C  2C50               	goto	l1167
   756  043D                     l1163:
   757                           
   758                           ;lcd.c: 104:     LCD_Write_Char(str[i]);
   759  043D  0876               	movf	LCD_Write_String@i,w
   760  043E  0778               	addwf	LCD_Write_String@str,w
   761  043F  0084               	movwf	4
   762  0440  120A  118A  2003  120A  118A  	fcall	stringdir
   763  0445  120A  118A  24DE  120A  118A  	fcall	_LCD_Write_Char
   764  044A                     l1165:
   765  044A  3001               	movlw	1
   766  044B  07F6               	addwf	LCD_Write_String@i,f
   767  044C  1803               	skipnc
   768  044D  0AF7               	incf	LCD_Write_String@i+1,f
   769  044E  3000               	movlw	0
   770  044F  07F7               	addwf	LCD_Write_String@i+1,f
   771  0450                     l1167:
   772  0450  0876               	movf	LCD_Write_String@i,w
   773  0451  0778               	addwf	LCD_Write_String@str,w
   774  0452  0084               	movwf	4
   775  0453  120A  118A  2003  120A  118A  	fcall	stringdir
   776  0458  3A00               	xorlw	0
   777  0459  1D03               	skipz
   778  045A  2C5C               	goto	u661
   779  045B  2C5D               	goto	u660
   780  045C                     u661:
   781  045C  2C3D               	goto	l1163
   782  045D                     u660:
   783  045D                     l78:
   784  045D  0008               	return
   785  045E                     __end_of_LCD_Write_String:
   786                           
   787                           	psect	text2
   788  0757                     __ptext2:	
   789 ;; *************** function _LCD_Write_Number *****************
   790 ;; Defined at:
   791 ;;		line 169 in file "lcd.c"
   792 ;; Parameters:    Size  Location     Type
   793 ;;  number          4    6[BANK0 ] long 
   794 ;; Auto vars:     Size  Location     Type
   795 ;;  p               2   33[BANK0 ] int 
   796 ;;  num            20   10[BANK0 ] unsigned int [10]
   797 ;;  length          2   30[BANK0 ] int 
   798 ;;  c               1   32[BANK0 ] unsigned char 
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   808 ;;      Params:         0       4       0       0       0
   809 ;;      Locals:         0      25       0       0       0
   810 ;;      Temps:          2       0       0       0       0
   811 ;;      Totals:         2      29       0       0       0
   812 ;;Total ram usage:       31 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 2
   815 ;; This function calls:
   816 ;;		_LCD_Write_Char
   817 ;;		___aldiv
   818 ;;		___almod
   819 ;; This function is called by:
   820 ;;		_main
   821 ;;		_LCD_Write_NumberXY
   822 ;; This function uses a non-reentrant model
   823 ;;
   824                           
   825  0757                     _LCD_Write_Number:	
   826                           ;psect for function _LCD_Write_Number
   827                           
   828  0757                     l1169:	
   829                           ;incstack = 0
   830                           ; Regs used in _LCD_Write_Number: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   831                           
   832                           
   833                           ;lcd.c: 169: void LCD_Write_Number(long number);lcd.c: 170: {;lcd.c: 171:     unsigned i
      +                          nt num[10];;lcd.c: 172:     char c;;lcd.c: 174:     int length=-1;
   834  0757  30FF               	movlw	255
   835  0758  1283               	bcf	3,5	;RP0=0, select bank0
   836  0759  1303               	bcf	3,6	;RP1=0, select bank0
   837  075A  00BE               	movwf	LCD_Write_Number@length
   838  075B  30FF               	movlw	255
   839  075C  00BF               	movwf	LCD_Write_Number@length+1
   840                           
   841                           ;lcd.c: 176:     if(number == 0)
   842  075D  0829               	movf	LCD_Write_Number@number+3,w
   843  075E  0428               	iorwf	LCD_Write_Number@number+2,w
   844  075F  0427               	iorwf	LCD_Write_Number@number+1,w
   845  0760  0426               	iorwf	LCD_Write_Number@number,w
   846  0761  1D03               	skipz
   847  0762  2F64               	goto	u671
   848  0763  2F65               	goto	u670
   849  0764                     u671:
   850  0764  2F71               	goto	l1175
   851  0765                     u670:
   852  0765                     l1171:
   853                           
   854                           ;lcd.c: 177:     {;lcd.c: 178:         c = (char)(number + '0');
   855  0765  0826               	movf	LCD_Write_Number@number,w
   856  0766  3E30               	addlw	48
   857  0767  00FB               	movwf	??_LCD_Write_Number
   858  0768  087B               	movf	??_LCD_Write_Number,w
   859  0769  00C0               	movwf	LCD_Write_Number@c
   860  076A                     l1173:
   861                           
   862                           ;lcd.c: 179:         LCD_Write_Char(c);
   863  076A  0840               	movf	LCD_Write_Number@c,w
   864  076B  120A  118A  24DE  120A  118A  	fcall	_LCD_Write_Char
   865                           
   866                           ;lcd.c: 180:     }
   867  0770  2FFB               	goto	l104
   868  0771                     l1175:
   869  0771  0829               	movf	LCD_Write_Number@number+3,w
   870  0772  0428               	iorwf	LCD_Write_Number@number+2,w
   871  0773  0427               	iorwf	LCD_Write_Number@number+1,w
   872  0774  0426               	iorwf	LCD_Write_Number@number,w
   873  0775  1903               	skipnz
   874  0776  2F78               	goto	u681
   875  0777  2F79               	goto	u680
   876  0778                     u681:
   877  0778  2FFB               	goto	l104
   878  0779                     u680:
   879  0779  2FC3               	goto	l1185
   880  077A                     l1179:
   881                           
   882                           ;lcd.c: 184:         {;lcd.c: 185:             length++;
   883  077A  3001               	movlw	1
   884  077B  1283               	bcf	3,5	;RP0=0, select bank0
   885  077C  1303               	bcf	3,6	;RP1=0, select bank0
   886  077D  07BE               	addwf	LCD_Write_Number@length,f
   887  077E  1803               	skipnc
   888  077F  0ABF               	incf	LCD_Write_Number@length+1,f
   889  0780  3000               	movlw	0
   890  0781  07BF               	addwf	LCD_Write_Number@length+1,f
   891  0782                     l1181:
   892                           
   893                           ;lcd.c: 186:             num[length]=number%10;
   894  0782  3000               	movlw	0
   895  0783  00F3               	movwf	___almod@divisor+3
   896  0784  3000               	movlw	0
   897  0785  00F2               	movwf	___almod@divisor+2
   898  0786  3000               	movlw	0
   899  0787  00F1               	movwf	___almod@divisor+1
   900  0788  300A               	movlw	10
   901  0789  00F0               	movwf	___almod@divisor
   902  078A  0829               	movf	LCD_Write_Number@number+3,w
   903  078B  00F7               	movwf	___almod@dividend+3
   904  078C  0828               	movf	LCD_Write_Number@number+2,w
   905  078D  00F6               	movwf	___almod@dividend+2
   906  078E  0827               	movf	LCD_Write_Number@number+1,w
   907  078F  00F5               	movwf	___almod@dividend+1
   908  0790  0826               	movf	LCD_Write_Number@number,w
   909  0791  00F4               	movwf	___almod@dividend
   910  0792  120A  118A  2598  120A  118A  	fcall	___almod
   911  0797  1283               	bcf	3,5	;RP0=0, select bank0
   912  0798  1303               	bcf	3,6	;RP1=0, select bank0
   913  0799  083E               	movf	LCD_Write_Number@length,w
   914  079A  00FB               	movwf	??_LCD_Write_Number
   915  079B  077B               	addwf	??_LCD_Write_Number,w
   916  079C  3E2A               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
   917  079D  0084               	movwf	4
   918  079E  0870               	movf	?___almod,w
   919  079F  1383               	bcf	3,7	;select IRP bank0
   920  07A0  0080               	movwf	0
   921  07A1  0A84               	incf	4,f
   922  07A2  0871               	movf	?___almod+1,w
   923  07A3  0080               	movwf	0
   924  07A4                     l1183:
   925                           
   926                           ;lcd.c: 187:             number = number/10;
   927  07A4  3000               	movlw	0
   928  07A5  00F3               	movwf	___aldiv@divisor+3
   929  07A6  3000               	movlw	0
   930  07A7  00F2               	movwf	___aldiv@divisor+2
   931  07A8  3000               	movlw	0
   932  07A9  00F1               	movwf	___aldiv@divisor+1
   933  07AA  300A               	movlw	10
   934  07AB  00F0               	movwf	___aldiv@divisor
   935  07AC  0829               	movf	LCD_Write_Number@number+3,w
   936  07AD  00F7               	movwf	___aldiv@dividend+3
   937  07AE  0828               	movf	LCD_Write_Number@number+2,w
   938  07AF  00F6               	movwf	___aldiv@dividend+2
   939  07B0  0827               	movf	LCD_Write_Number@number+1,w
   940  07B1  00F5               	movwf	___aldiv@dividend+1
   941  07B2  0826               	movf	LCD_Write_Number@number,w
   942  07B3  00F4               	movwf	___aldiv@dividend
   943  07B4  120A  118A  261D  120A  118A  	fcall	___aldiv
   944  07B9  0873               	movf	?___aldiv+3,w
   945  07BA  1283               	bcf	3,5	;RP0=0, select bank0
   946  07BB  1303               	bcf	3,6	;RP1=0, select bank0
   947  07BC  00A9               	movwf	LCD_Write_Number@number+3
   948  07BD  0872               	movf	?___aldiv+2,w
   949  07BE  00A8               	movwf	LCD_Write_Number@number+2
   950  07BF  0871               	movf	?___aldiv+1,w
   951  07C0  00A7               	movwf	LCD_Write_Number@number+1
   952  07C1  0870               	movf	?___aldiv,w
   953  07C2  00A6               	movwf	LCD_Write_Number@number
   954  07C3                     l1185:
   955                           
   956                           ;lcd.c: 183:         while(number>0)
   957  07C3  1BA9               	btfsc	LCD_Write_Number@number+3,7
   958  07C4  2FD6               	goto	u690
   959  07C5  0829               	movf	LCD_Write_Number@number+3,w
   960  07C6  1D03               	btfss	3,2
   961  07C7  2FD5               	goto	u691
   962  07C8  0828               	movf	LCD_Write_Number@number+2,w
   963  07C9  1D03               	btfss	3,2
   964  07CA  2FD5               	goto	u691
   965  07CB  0827               	movf	LCD_Write_Number@number+1,w
   966  07CC  1D03               	btfss	3,2
   967  07CD  2FD5               	goto	u691
   968  07CE  3001               	movlw	1
   969  07CF  0226               	subwf	LCD_Write_Number@number,w
   970  07D0  1D03               	skipz
   971  07D1  2FD2               	goto	u693
   972  07D2                     u693:
   973  07D2  1803               	btfsc	3,0
   974  07D3  2FD5               	goto	u691
   975  07D4  2FD6               	goto	u690
   976  07D5                     u691:
   977  07D5  2F7A               	goto	l1179
   978  07D6                     u690:
   979  07D6                     l1187:
   980                           
   981                           ;lcd.c: 191:         for(int p=length; p>=0; p--)
   982  07D6  1283               	bcf	3,5	;RP0=0, select bank0
   983  07D7  1303               	bcf	3,6	;RP1=0, select bank0
   984  07D8  083F               	movf	LCD_Write_Number@length+1,w
   985  07D9  00C2               	movwf	LCD_Write_Number@p+1
   986  07DA  083E               	movf	LCD_Write_Number@length,w
   987  07DB  00C1               	movwf	LCD_Write_Number@p
   988  07DC                     l1189:
   989  07DC  1FC2               	btfss	LCD_Write_Number@p+1,7
   990  07DD  2FDF               	goto	u701
   991  07DE  2FE0               	goto	u700
   992  07DF                     u701:
   993  07DF  2FE1               	goto	l1193
   994  07E0                     u700:
   995  07E0  2FFB               	goto	l104
   996  07E1                     l1193:
   997                           
   998                           ;lcd.c: 192:         {;lcd.c: 193:             c = (char)(num[p] + '0');
   999  07E1  0841               	movf	LCD_Write_Number@p,w
  1000  07E2  00FB               	movwf	??_LCD_Write_Number
  1001  07E3  077B               	addwf	??_LCD_Write_Number,w
  1002  07E4  3E2A               	addlw	(low (LCD_Write_Number@num| 0))& (0+255)
  1003  07E5  0084               	movwf	4
  1004  07E6  1383               	bcf	3,7	;select IRP bank0
  1005  07E7  0800               	movf	0,w
  1006  07E8  3E30               	addlw	48
  1007  07E9  00FC               	movwf	??_LCD_Write_Number+1
  1008  07EA  087C               	movf	??_LCD_Write_Number+1,w
  1009  07EB  00C0               	movwf	LCD_Write_Number@c
  1010  07EC                     l1195:
  1011                           
  1012                           ;lcd.c: 194:             LCD_Write_Char(c);
  1013  07EC  0840               	movf	LCD_Write_Number@c,w
  1014  07ED  120A  118A  24DE  120A  118A  	fcall	_LCD_Write_Char
  1015  07F2                     l1197:
  1016                           
  1017                           ;lcd.c: 195:         }
  1018  07F2  30FF               	movlw	255
  1019  07F3  1283               	bcf	3,5	;RP0=0, select bank0
  1020  07F4  1303               	bcf	3,6	;RP1=0, select bank0
  1021  07F5  07C1               	addwf	LCD_Write_Number@p,f
  1022  07F6  1803               	skipnc
  1023  07F7  0AC2               	incf	LCD_Write_Number@p+1,f
  1024  07F8  30FF               	movlw	255
  1025  07F9  07C2               	addwf	LCD_Write_Number@p+1,f
  1026  07FA  2FDC               	goto	l1189
  1027  07FB                     l104:
  1028  07FB  0008               	return
  1029  07FC                     __end_of_LCD_Write_Number:
  1030                           
  1031                           	psect	text3
  1032  0598                     __ptext3:	
  1033 ;; *************** function ___almod *****************
  1034 ;; Defined at:
  1035 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\almod.c"
  1036 ;; Parameters:    Size  Location     Type
  1037 ;;  divisor         4    0[COMMON] long 
  1038 ;;  dividend        4    4[COMMON] long 
  1039 ;; Auto vars:     Size  Location     Type
  1040 ;;  sign            1   10[COMMON] unsigned char 
  1041 ;;  counter         1    9[COMMON] unsigned char 
  1042 ;; Return value:  Size  Location     Type
  1043 ;;                  4    0[COMMON] long 
  1044 ;; Registers used:
  1045 ;;		wreg, status,2, status,0
  1046 ;; Tracked objects:
  1047 ;;		On entry : 0/0
  1048 ;;		On exit  : 0/0
  1049 ;;		Unchanged: 0/0
  1050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1051 ;;      Params:         8       0       0       0       0
  1052 ;;      Locals:         2       0       0       0       0
  1053 ;;      Temps:          1       0       0       0       0
  1054 ;;      Totals:        11       0       0       0       0
  1055 ;;Total ram usage:       11 bytes
  1056 ;; Hardware stack levels used: 1
  1057 ;; This function calls:
  1058 ;;		Nothing
  1059 ;; This function is called by:
  1060 ;;		_LCD_Write_Number
  1061 ;; This function uses a non-reentrant model
  1062 ;;
  1063                           
  1064  0598                     ___almod:	
  1065                           ;psect for function ___almod
  1066                           
  1067  0598                     l1069:	
  1068                           ;incstack = 0
  1069                           ; Regs used in ___almod: [wreg+status,2+status,0]
  1070                           
  1071  0598  01FA               	clrf	___almod@sign
  1072  0599                     l1071:
  1073  0599  1FF7               	btfss	___almod@dividend+3,7
  1074  059A  2D9C               	goto	u531
  1075  059B  2D9D               	goto	u530
  1076  059C                     u531:
  1077  059C  2DAA               	goto	l277
  1078  059D                     u530:
  1079  059D                     l1073:
  1080  059D  09F4               	comf	___almod@dividend,f
  1081  059E  09F5               	comf	___almod@dividend+1,f
  1082  059F  09F6               	comf	___almod@dividend+2,f
  1083  05A0  09F7               	comf	___almod@dividend+3,f
  1084  05A1  0AF4               	incf	___almod@dividend,f
  1085  05A2  1903               	skipnz
  1086  05A3  0AF5               	incf	___almod@dividend+1,f
  1087  05A4  1903               	skipnz
  1088  05A5  0AF6               	incf	___almod@dividend+2,f
  1089  05A6  1903               	skipnz
  1090  05A7  0AF7               	incf	___almod@dividend+3,f
  1091  05A8  01FA               	clrf	___almod@sign
  1092  05A9  0AFA               	incf	___almod@sign,f
  1093  05AA                     l277:
  1094  05AA  1FF3               	btfss	___almod@divisor+3,7
  1095  05AB  2DAD               	goto	u541
  1096  05AC  2DAE               	goto	u540
  1097  05AD                     u541:
  1098  05AD  2DB9               	goto	l1077
  1099  05AE                     u540:
  1100  05AE                     l1075:
  1101  05AE  09F0               	comf	___almod@divisor,f
  1102  05AF  09F1               	comf	___almod@divisor+1,f
  1103  05B0  09F2               	comf	___almod@divisor+2,f
  1104  05B1  09F3               	comf	___almod@divisor+3,f
  1105  05B2  0AF0               	incf	___almod@divisor,f
  1106  05B3  1903               	skipnz
  1107  05B4  0AF1               	incf	___almod@divisor+1,f
  1108  05B5  1903               	skipnz
  1109  05B6  0AF2               	incf	___almod@divisor+2,f
  1110  05B7  1903               	skipnz
  1111  05B8  0AF3               	incf	___almod@divisor+3,f
  1112  05B9                     l1077:
  1113  05B9  0873               	movf	___almod@divisor+3,w
  1114  05BA  0472               	iorwf	___almod@divisor+2,w
  1115  05BB  0471               	iorwf	___almod@divisor+1,w
  1116  05BC  0470               	iorwf	___almod@divisor,w
  1117  05BD  1903               	skipnz
  1118  05BE  2DC0               	goto	u551
  1119  05BF  2DC1               	goto	u550
  1120  05C0                     u551:
  1121  05C0  2E04               	goto	l1093
  1122  05C1                     u550:
  1123  05C1                     l1079:
  1124  05C1  01F9               	clrf	___almod@counter
  1125  05C2  0AF9               	incf	___almod@counter,f
  1126  05C3  2DD1               	goto	l1083
  1127  05C4                     l1081:
  1128  05C4  3001               	movlw	1
  1129  05C5  00F8               	movwf	??___almod
  1130  05C6                     u565:
  1131  05C6  1003               	clrc
  1132  05C7  0DF0               	rlf	___almod@divisor,f
  1133  05C8  0DF1               	rlf	___almod@divisor+1,f
  1134  05C9  0DF2               	rlf	___almod@divisor+2,f
  1135  05CA  0DF3               	rlf	___almod@divisor+3,f
  1136  05CB  0BF8               	decfsz	??___almod,f
  1137  05CC  2DC6               	goto	u565
  1138  05CD  3001               	movlw	1
  1139  05CE  00F8               	movwf	??___almod
  1140  05CF  0878               	movf	??___almod,w
  1141  05D0  07F9               	addwf	___almod@counter,f
  1142  05D1                     l1083:
  1143  05D1  1FF3               	btfss	___almod@divisor+3,7
  1144  05D2  2DD4               	goto	u571
  1145  05D3  2DD5               	goto	u570
  1146  05D4                     u571:
  1147  05D4  2DC4               	goto	l1081
  1148  05D5                     u570:
  1149  05D5                     l1085:
  1150  05D5  0873               	movf	___almod@divisor+3,w
  1151  05D6  0277               	subwf	___almod@dividend+3,w
  1152  05D7  1D03               	skipz
  1153  05D8  2DE3               	goto	u585
  1154  05D9  0872               	movf	___almod@divisor+2,w
  1155  05DA  0276               	subwf	___almod@dividend+2,w
  1156  05DB  1D03               	skipz
  1157  05DC  2DE3               	goto	u585
  1158  05DD  0871               	movf	___almod@divisor+1,w
  1159  05DE  0275               	subwf	___almod@dividend+1,w
  1160  05DF  1D03               	skipz
  1161  05E0  2DE3               	goto	u585
  1162  05E1  0870               	movf	___almod@divisor,w
  1163  05E2  0274               	subwf	___almod@dividend,w
  1164  05E3                     u585:
  1165  05E3  1C03               	skipc
  1166  05E4  2DE6               	goto	u581
  1167  05E5  2DE7               	goto	u580
  1168  05E6                     u581:
  1169  05E6  2DF5               	goto	l1089
  1170  05E7                     u580:
  1171  05E7                     l1087:
  1172  05E7  0870               	movf	___almod@divisor,w
  1173  05E8  02F4               	subwf	___almod@dividend,f
  1174  05E9  0871               	movf	___almod@divisor+1,w
  1175  05EA  1C03               	skipc
  1176  05EB  0F71               	incfsz	___almod@divisor+1,w
  1177  05EC  02F5               	subwf	___almod@dividend+1,f
  1178  05ED  0872               	movf	___almod@divisor+2,w
  1179  05EE  1C03               	skipc
  1180  05EF  0F72               	incfsz	___almod@divisor+2,w
  1181  05F0  02F6               	subwf	___almod@dividend+2,f
  1182  05F1  0873               	movf	___almod@divisor+3,w
  1183  05F2  1C03               	skipc
  1184  05F3  0F73               	incfsz	___almod@divisor+3,w
  1185  05F4  02F7               	subwf	___almod@dividend+3,f
  1186  05F5                     l1089:
  1187  05F5  3001               	movlw	1
  1188  05F6                     u595:
  1189  05F6  1003               	clrc
  1190  05F7  0CF3               	rrf	___almod@divisor+3,f
  1191  05F8  0CF2               	rrf	___almod@divisor+2,f
  1192  05F9  0CF1               	rrf	___almod@divisor+1,f
  1193  05FA  0CF0               	rrf	___almod@divisor,f
  1194  05FB  3EFF               	addlw	-1
  1195  05FC  1D03               	skipz
  1196  05FD  2DF6               	goto	u595
  1197  05FE                     l1091:
  1198  05FE  3001               	movlw	1
  1199  05FF  02F9               	subwf	___almod@counter,f
  1200  0600  1D03               	btfss	3,2
  1201  0601  2E03               	goto	u601
  1202  0602  2E04               	goto	u600
  1203  0603                     u601:
  1204  0603  2DD5               	goto	l1085
  1205  0604                     u600:
  1206  0604                     l1093:
  1207  0604  087A               	movf	___almod@sign,w
  1208  0605  1903               	btfsc	3,2
  1209  0606  2E08               	goto	u611
  1210  0607  2E09               	goto	u610
  1211  0608                     u611:
  1212  0608  2E14               	goto	l1097
  1213  0609                     u610:
  1214  0609                     l1095:
  1215  0609  09F4               	comf	___almod@dividend,f
  1216  060A  09F5               	comf	___almod@dividend+1,f
  1217  060B  09F6               	comf	___almod@dividend+2,f
  1218  060C  09F7               	comf	___almod@dividend+3,f
  1219  060D  0AF4               	incf	___almod@dividend,f
  1220  060E  1903               	skipnz
  1221  060F  0AF5               	incf	___almod@dividend+1,f
  1222  0610  1903               	skipnz
  1223  0611  0AF6               	incf	___almod@dividend+2,f
  1224  0612  1903               	skipnz
  1225  0613  0AF7               	incf	___almod@dividend+3,f
  1226  0614                     l1097:
  1227  0614  0877               	movf	___almod@dividend+3,w
  1228  0615  00F3               	movwf	?___almod+3
  1229  0616  0876               	movf	___almod@dividend+2,w
  1230  0617  00F2               	movwf	?___almod+2
  1231  0618  0875               	movf	___almod@dividend+1,w
  1232  0619  00F1               	movwf	?___almod+1
  1233  061A  0874               	movf	___almod@dividend,w
  1234  061B  00F0               	movwf	?___almod
  1235  061C                     l287:
  1236  061C  0008               	return
  1237  061D                     __end_of___almod:
  1238                           
  1239                           	psect	text4
  1240  061D                     __ptext4:	
  1241 ;; *************** function ___aldiv *****************
  1242 ;; Defined at:
  1243 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\aldiv.c"
  1244 ;; Parameters:    Size  Location     Type
  1245 ;;  divisor         4    0[COMMON] long 
  1246 ;;  dividend        4    4[COMMON] long 
  1247 ;; Auto vars:     Size  Location     Type
  1248 ;;  quotient        4    2[BANK0 ] long 
  1249 ;;  sign            1    1[BANK0 ] unsigned char 
  1250 ;;  counter         1    0[BANK0 ] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  4    0[COMMON] long 
  1253 ;; Registers used:
  1254 ;;		wreg, status,2, status,0
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         8       0       0       0       0
  1261 ;;      Locals:         0       6       0       0       0
  1262 ;;      Temps:          1       0       0       0       0
  1263 ;;      Totals:         9       6       0       0       0
  1264 ;;Total ram usage:       15 bytes
  1265 ;; Hardware stack levels used: 1
  1266 ;; This function calls:
  1267 ;;		Nothing
  1268 ;; This function is called by:
  1269 ;;		_LCD_Write_Number
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273  061D                     ___aldiv:	
  1274                           ;psect for function ___aldiv
  1275                           
  1276  061D                     l1029:	
  1277                           ;incstack = 0
  1278                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1279                           
  1280  061D  1283               	bcf	3,5	;RP0=0, select bank0
  1281  061E  1303               	bcf	3,6	;RP1=0, select bank0
  1282  061F  01A1               	clrf	___aldiv@sign
  1283  0620                     l1031:
  1284  0620  1FF3               	btfss	___aldiv@divisor+3,7
  1285  0621  2E23               	goto	u431
  1286  0622  2E24               	goto	u430
  1287  0623                     u431:
  1288  0623  2E31               	goto	l264
  1289  0624                     u430:
  1290  0624                     l1033:
  1291  0624  09F0               	comf	___aldiv@divisor,f
  1292  0625  09F1               	comf	___aldiv@divisor+1,f
  1293  0626  09F2               	comf	___aldiv@divisor+2,f
  1294  0627  09F3               	comf	___aldiv@divisor+3,f
  1295  0628  0AF0               	incf	___aldiv@divisor,f
  1296  0629  1903               	skipnz
  1297  062A  0AF1               	incf	___aldiv@divisor+1,f
  1298  062B  1903               	skipnz
  1299  062C  0AF2               	incf	___aldiv@divisor+2,f
  1300  062D  1903               	skipnz
  1301  062E  0AF3               	incf	___aldiv@divisor+3,f
  1302  062F  01A1               	clrf	___aldiv@sign
  1303  0630  0AA1               	incf	___aldiv@sign,f
  1304  0631                     l264:
  1305  0631  1FF7               	btfss	___aldiv@dividend+3,7
  1306  0632  2E34               	goto	u441
  1307  0633  2E35               	goto	u440
  1308  0634                     u441:
  1309  0634  2E44               	goto	l1039
  1310  0635                     u440:
  1311  0635                     l1035:
  1312  0635  09F4               	comf	___aldiv@dividend,f
  1313  0636  09F5               	comf	___aldiv@dividend+1,f
  1314  0637  09F6               	comf	___aldiv@dividend+2,f
  1315  0638  09F7               	comf	___aldiv@dividend+3,f
  1316  0639  0AF4               	incf	___aldiv@dividend,f
  1317  063A  1903               	skipnz
  1318  063B  0AF5               	incf	___aldiv@dividend+1,f
  1319  063C  1903               	skipnz
  1320  063D  0AF6               	incf	___aldiv@dividend+2,f
  1321  063E  1903               	skipnz
  1322  063F  0AF7               	incf	___aldiv@dividend+3,f
  1323  0640                     l1037:
  1324  0640  3001               	movlw	1
  1325  0641  00F8               	movwf	??___aldiv
  1326  0642  0878               	movf	??___aldiv,w
  1327  0643  06A1               	xorwf	___aldiv@sign,f
  1328  0644                     l1039:
  1329  0644  3000               	movlw	0
  1330  0645  00A5               	movwf	___aldiv@quotient+3
  1331  0646  3000               	movlw	0
  1332  0647  00A4               	movwf	___aldiv@quotient+2
  1333  0648  3000               	movlw	0
  1334  0649  00A3               	movwf	___aldiv@quotient+1
  1335  064A  3000               	movlw	0
  1336  064B  00A2               	movwf	___aldiv@quotient
  1337  064C                     l1041:
  1338  064C  0873               	movf	___aldiv@divisor+3,w
  1339  064D  0472               	iorwf	___aldiv@divisor+2,w
  1340  064E  0471               	iorwf	___aldiv@divisor+1,w
  1341  064F  0470               	iorwf	___aldiv@divisor,w
  1342  0650  1903               	skipnz
  1343  0651  2E53               	goto	u451
  1344  0652  2E54               	goto	u450
  1345  0653                     u451:
  1346  0653  2EA1               	goto	l1061
  1347  0654                     u450:
  1348  0654                     l1043:
  1349  0654  01A0               	clrf	___aldiv@counter
  1350  0655  0AA0               	incf	___aldiv@counter,f
  1351  0656  2E64               	goto	l1047
  1352  0657                     l1045:
  1353  0657  3001               	movlw	1
  1354  0658  00F8               	movwf	??___aldiv
  1355  0659                     u465:
  1356  0659  1003               	clrc
  1357  065A  0DF0               	rlf	___aldiv@divisor,f
  1358  065B  0DF1               	rlf	___aldiv@divisor+1,f
  1359  065C  0DF2               	rlf	___aldiv@divisor+2,f
  1360  065D  0DF3               	rlf	___aldiv@divisor+3,f
  1361  065E  0BF8               	decfsz	??___aldiv,f
  1362  065F  2E59               	goto	u465
  1363  0660  3001               	movlw	1
  1364  0661  00F8               	movwf	??___aldiv
  1365  0662  0878               	movf	??___aldiv,w
  1366  0663  07A0               	addwf	___aldiv@counter,f
  1367  0664                     l1047:
  1368  0664  1FF3               	btfss	___aldiv@divisor+3,7
  1369  0665  2E67               	goto	u471
  1370  0666  2E68               	goto	u470
  1371  0667                     u471:
  1372  0667  2E57               	goto	l1045
  1373  0668                     u470:
  1374  0668                     l1049:
  1375  0668  3001               	movlw	1
  1376  0669  00F8               	movwf	??___aldiv
  1377  066A                     u485:
  1378  066A  1003               	clrc
  1379  066B  0DA2               	rlf	___aldiv@quotient,f
  1380  066C  0DA3               	rlf	___aldiv@quotient+1,f
  1381  066D  0DA4               	rlf	___aldiv@quotient+2,f
  1382  066E  0DA5               	rlf	___aldiv@quotient+3,f
  1383  066F  0BF8               	decfsz	??___aldiv,f
  1384  0670  2E6A               	goto	u485
  1385  0671                     l1051:
  1386  0671  0873               	movf	___aldiv@divisor+3,w
  1387  0672  0277               	subwf	___aldiv@dividend+3,w
  1388  0673  1D03               	skipz
  1389  0674  2E7F               	goto	u495
  1390  0675  0872               	movf	___aldiv@divisor+2,w
  1391  0676  0276               	subwf	___aldiv@dividend+2,w
  1392  0677  1D03               	skipz
  1393  0678  2E7F               	goto	u495
  1394  0679  0871               	movf	___aldiv@divisor+1,w
  1395  067A  0275               	subwf	___aldiv@dividend+1,w
  1396  067B  1D03               	skipz
  1397  067C  2E7F               	goto	u495
  1398  067D  0870               	movf	___aldiv@divisor,w
  1399  067E  0274               	subwf	___aldiv@dividend,w
  1400  067F                     u495:
  1401  067F  1C03               	skipc
  1402  0680  2E82               	goto	u491
  1403  0681  2E83               	goto	u490
  1404  0682                     u491:
  1405  0682  2E92               	goto	l1057
  1406  0683                     u490:
  1407  0683                     l1053:
  1408  0683  0870               	movf	___aldiv@divisor,w
  1409  0684  02F4               	subwf	___aldiv@dividend,f
  1410  0685  0871               	movf	___aldiv@divisor+1,w
  1411  0686  1C03               	skipc
  1412  0687  0F71               	incfsz	___aldiv@divisor+1,w
  1413  0688  02F5               	subwf	___aldiv@dividend+1,f
  1414  0689  0872               	movf	___aldiv@divisor+2,w
  1415  068A  1C03               	skipc
  1416  068B  0F72               	incfsz	___aldiv@divisor+2,w
  1417  068C  02F6               	subwf	___aldiv@dividend+2,f
  1418  068D  0873               	movf	___aldiv@divisor+3,w
  1419  068E  1C03               	skipc
  1420  068F  0F73               	incfsz	___aldiv@divisor+3,w
  1421  0690  02F7               	subwf	___aldiv@dividend+3,f
  1422  0691                     l1055:
  1423  0691  1422               	bsf	___aldiv@quotient,0
  1424  0692                     l1057:
  1425  0692  3001               	movlw	1
  1426  0693                     u505:
  1427  0693  1003               	clrc
  1428  0694  0CF3               	rrf	___aldiv@divisor+3,f
  1429  0695  0CF2               	rrf	___aldiv@divisor+2,f
  1430  0696  0CF1               	rrf	___aldiv@divisor+1,f
  1431  0697  0CF0               	rrf	___aldiv@divisor,f
  1432  0698  3EFF               	addlw	-1
  1433  0699  1D03               	skipz
  1434  069A  2E93               	goto	u505
  1435  069B                     l1059:
  1436  069B  3001               	movlw	1
  1437  069C  02A0               	subwf	___aldiv@counter,f
  1438  069D  1D03               	btfss	3,2
  1439  069E  2EA0               	goto	u511
  1440  069F  2EA1               	goto	u510
  1441  06A0                     u511:
  1442  06A0  2E68               	goto	l1049
  1443  06A1                     u510:
  1444  06A1                     l1061:
  1445  06A1  0821               	movf	___aldiv@sign,w
  1446  06A2  1903               	btfsc	3,2
  1447  06A3  2EA5               	goto	u521
  1448  06A4  2EA6               	goto	u520
  1449  06A5                     u521:
  1450  06A5  2EB1               	goto	l1065
  1451  06A6                     u520:
  1452  06A6                     l1063:
  1453  06A6  09A2               	comf	___aldiv@quotient,f
  1454  06A7  09A3               	comf	___aldiv@quotient+1,f
  1455  06A8  09A4               	comf	___aldiv@quotient+2,f
  1456  06A9  09A5               	comf	___aldiv@quotient+3,f
  1457  06AA  0AA2               	incf	___aldiv@quotient,f
  1458  06AB  1903               	skipnz
  1459  06AC  0AA3               	incf	___aldiv@quotient+1,f
  1460  06AD  1903               	skipnz
  1461  06AE  0AA4               	incf	___aldiv@quotient+2,f
  1462  06AF  1903               	skipnz
  1463  06B0  0AA5               	incf	___aldiv@quotient+3,f
  1464  06B1                     l1065:
  1465  06B1  0825               	movf	___aldiv@quotient+3,w
  1466  06B2  00F3               	movwf	?___aldiv+3
  1467  06B3  0824               	movf	___aldiv@quotient+2,w
  1468  06B4  00F2               	movwf	?___aldiv+2
  1469  06B5  0823               	movf	___aldiv@quotient+1,w
  1470  06B6  00F1               	movwf	?___aldiv+1
  1471  06B7  0822               	movf	___aldiv@quotient,w
  1472  06B8  00F0               	movwf	?___aldiv
  1473  06B9                     l274:
  1474  06B9  0008               	return
  1475  06BA                     __end_of___aldiv:
  1476                           
  1477                           	psect	text5
  1478  04DE                     __ptext5:	
  1479 ;; *************** function _LCD_Write_Char *****************
  1480 ;; Defined at:
  1481 ;;		line 79 in file "lcd.c"
  1482 ;; Parameters:    Size  Location     Type
  1483 ;;  Data            1    wreg     unsigned char 
  1484 ;; Auto vars:     Size  Location     Type
  1485 ;;  Data            1    5[COMMON] unsigned char 
  1486 ;;  High4           1    4[COMMON] unsigned char 
  1487 ;;  Low4            1    3[COMMON] unsigned char 
  1488 ;; Return value:  Size  Location     Type
  1489 ;;                  1    wreg      void 
  1490 ;; Registers used:
  1491 ;;		wreg, status,2, status,0, pclath, cstack
  1492 ;; Tracked objects:
  1493 ;;		On entry : 0/0
  1494 ;;		On exit  : 0/0
  1495 ;;		Unchanged: 0/0
  1496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1497 ;;      Params:         0       0       0       0       0
  1498 ;;      Locals:         3       0       0       0       0
  1499 ;;      Temps:          2       0       0       0       0
  1500 ;;      Totals:         5       0       0       0       0
  1501 ;;Total ram usage:        5 bytes
  1502 ;; Hardware stack levels used: 1
  1503 ;; Hardware stack levels required when called: 1
  1504 ;; This function calls:
  1505 ;;		_LCD_DATA
  1506 ;; This function is called by:
  1507 ;;		_LCD_Write_String
  1508 ;;		_LCD_Write_Number
  1509 ;;		_LCD_Write_CharXY
  1510 ;; This function uses a non-reentrant model
  1511 ;;
  1512                           
  1513  04DE                     _LCD_Write_Char:	
  1514                           ;psect for function _LCD_Write_Char
  1515                           
  1516                           
  1517                           ;incstack = 0
  1518                           ; Regs used in _LCD_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1519                           ;LCD_Write_Char@Data stored from wreg
  1520  04DE  00F5               	movwf	LCD_Write_Char@Data
  1521  04DF                     l1005:
  1522                           
  1523                           ;lcd.c: 79: void LCD_Write_Char(char Data);lcd.c: 80: {;lcd.c: 81:   char Low4,High4;;lc
      +                          d.c: 82:   Low4 = Data & 0x0F;
  1524  04DF  0875               	movf	LCD_Write_Char@Data,w
  1525  04E0  390F               	andlw	15
  1526  04E1  00F1               	movwf	??_LCD_Write_Char
  1527  04E2  0871               	movf	??_LCD_Write_Char,w
  1528  04E3  00F3               	movwf	LCD_Write_Char@Low4
  1529                           
  1530                           ;lcd.c: 83:   High4 = Data & 0xF0;
  1531  04E4  0875               	movf	LCD_Write_Char@Data,w
  1532  04E5  39F0               	andlw	240
  1533  04E6  00F1               	movwf	??_LCD_Write_Char
  1534  04E7  0871               	movf	??_LCD_Write_Char,w
  1535  04E8  00F4               	movwf	LCD_Write_Char@High4
  1536  04E9                     l1007:
  1537                           
  1538                           ;lcd.c: 84:   RD2 = 1;
  1539  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  1540  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  1541  04EB  1508               	bsf	8,2	;volatile
  1542  04EC                     l1009:
  1543                           
  1544                           ;lcd.c: 85:   LCD_DATA(High4>>4);
  1545  04EC  0874               	movf	LCD_Write_Char@High4,w
  1546  04ED  00F1               	movwf	??_LCD_Write_Char
  1547  04EE  3004               	movlw	4
  1548  04EF                     u425:
  1549  04EF  1003               	clrc
  1550  04F0  0CF1               	rrf	??_LCD_Write_Char,f
  1551  04F1  3EFF               	addlw	-1
  1552  04F2  1D03               	skipz
  1553  04F3  2CEF               	goto	u425
  1554  04F4  0871               	movf	??_LCD_Write_Char,w
  1555  04F5  120A  118A  2417  120A  118A  	fcall	_LCD_DATA
  1556  04FA                     l1011:
  1557                           
  1558                           ;lcd.c: 86:   RD3 = 1;
  1559  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  1560  04FB  1303               	bcf	3,6	;RP1=0, select bank0
  1561  04FC  1588               	bsf	8,3	;volatile
  1562  04FD                     l1013:
  1563                           
  1564                           ;lcd.c: 87:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1565  04FD  3004               	movlw	4
  1566  04FE  00F2               	movwf	??_LCD_Write_Char+1
  1567  04FF  303D               	movlw	61
  1568  0500  00F1               	movwf	??_LCD_Write_Char
  1569  0501                     u767:
  1570  0501  0BF1               	decfsz	??_LCD_Write_Char,f
  1571  0502  2D01               	goto	u767
  1572  0503  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1573  0504  2D01               	goto	u767
  1574  0505  2D06               	nop2
  1575  0506                     l1015:
  1576                           
  1577                           ;lcd.c: 88:   RD3 = 0;
  1578  0506  1283               	bcf	3,5	;RP0=0, select bank0
  1579  0507  1303               	bcf	3,6	;RP1=0, select bank0
  1580  0508  1188               	bcf	8,3	;volatile
  1581  0509                     l1017:
  1582                           
  1583                           ;lcd.c: 89:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1584  0509  3004               	movlw	4
  1585  050A  00F2               	movwf	??_LCD_Write_Char+1
  1586  050B  303D               	movlw	61
  1587  050C  00F1               	movwf	??_LCD_Write_Char
  1588  050D                     u777:
  1589  050D  0BF1               	decfsz	??_LCD_Write_Char,f
  1590  050E  2D0D               	goto	u777
  1591  050F  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1592  0510  2D0D               	goto	u777
  1593  0511  2D12               	nop2
  1594  0512                     l1019:
  1595                           
  1596                           ;lcd.c: 90:   LCD_DATA(Low4);
  1597  0512  0873               	movf	LCD_Write_Char@Low4,w
  1598  0513  120A  118A  2417  120A  118A  	fcall	_LCD_DATA
  1599  0518                     l1021:
  1600                           
  1601                           ;lcd.c: 91:   RD3 = 1;
  1602  0518  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0519  1303               	bcf	3,6	;RP1=0, select bank0
  1604  051A  1588               	bsf	8,3	;volatile
  1605  051B                     l1023:
  1606                           
  1607                           ;lcd.c: 92:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1608  051B  3004               	movlw	4
  1609  051C  00F2               	movwf	??_LCD_Write_Char+1
  1610  051D  303D               	movlw	61
  1611  051E  00F1               	movwf	??_LCD_Write_Char
  1612  051F                     u787:
  1613  051F  0BF1               	decfsz	??_LCD_Write_Char,f
  1614  0520  2D1F               	goto	u787
  1615  0521  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1616  0522  2D1F               	goto	u787
  1617  0523  2D24               	nop2
  1618  0524                     l1025:
  1619                           
  1620                           ;lcd.c: 93:   RD3 = 0;
  1621  0524  1283               	bcf	3,5	;RP0=0, select bank0
  1622  0525  1303               	bcf	3,6	;RP1=0, select bank0
  1623  0526  1188               	bcf	8,3	;volatile
  1624  0527                     l1027:
  1625                           
  1626                           ;lcd.c: 94:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1627  0527  3004               	movlw	4
  1628  0528  00F2               	movwf	??_LCD_Write_Char+1
  1629  0529  303D               	movlw	61
  1630  052A  00F1               	movwf	??_LCD_Write_Char
  1631  052B                     u797:
  1632  052B  0BF1               	decfsz	??_LCD_Write_Char,f
  1633  052C  2D2B               	goto	u797
  1634  052D  0BF2               	decfsz	??_LCD_Write_Char+1,f
  1635  052E  2D2B               	goto	u797
  1636  052F  2D30               	nop2
  1637  0530                     l72:
  1638  0530  0008               	return
  1639  0531                     __end_of_LCD_Write_Char:
  1640                           
  1641                           	psect	text6
  1642  048C                     __ptext6:	
  1643 ;; *************** function _LCD_Set_Cursor *****************
  1644 ;; Defined at:
  1645 ;;		line 126 in file "lcd.c"
  1646 ;; Parameters:    Size  Location     Type
  1647 ;;  r               1    wreg     unsigned char 
  1648 ;;  c               1    4[COMMON] unsigned char 
  1649 ;; Auto vars:     Size  Location     Type
  1650 ;;  r               1    7[COMMON] unsigned char 
  1651 ;;  Temp            1   10[COMMON] unsigned char 
  1652 ;;  High4           1    9[COMMON] unsigned char 
  1653 ;;  Low4            1    8[COMMON] unsigned char 
  1654 ;; Return value:  Size  Location     Type
  1655 ;;                  1    wreg      void 
  1656 ;; Registers used:
  1657 ;;		wreg, status,2, status,0, pclath, cstack
  1658 ;; Tracked objects:
  1659 ;;		On entry : 0/0
  1660 ;;		On exit  : 0/0
  1661 ;;		Unchanged: 0/0
  1662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1663 ;;      Params:         1       0       0       0       0
  1664 ;;      Locals:         4       0       0       0       0
  1665 ;;      Temps:          2       0       0       0       0
  1666 ;;      Totals:         7       0       0       0       0
  1667 ;;Total ram usage:        7 bytes
  1668 ;; Hardware stack levels used: 1
  1669 ;; Hardware stack levels required when called: 2
  1670 ;; This function calls:
  1671 ;;		_LCD_CMD
  1672 ;; This function is called by:
  1673 ;;		_main
  1674 ;;		_LCD_Write_CharXY
  1675 ;;		_LCD_Write_StringXY
  1676 ;;		_LCD_Write_NumberXY
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680  048C                     _LCD_Set_Cursor:	
  1681                           ;psect for function _LCD_Set_Cursor
  1682                           
  1683                           
  1684                           ;incstack = 0
  1685                           ; Regs used in _LCD_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1686                           ;LCD_Set_Cursor@r stored from wreg
  1687  048C  00F7               	movwf	LCD_Set_Cursor@r
  1688  048D                     l1141:
  1689                           
  1690                           ;lcd.c: 126: void LCD_Set_Cursor(unsigned char r, unsigned char c);lcd.c: 127: {;lcd.c: 
      +                          128:   unsigned char Temp,Low4,High4;;lcd.c: 129:   if(r == 1)
  1691  048D  0377               	decf	LCD_Set_Cursor@r,w
  1692  048E  1D03               	btfss	3,2
  1693  048F  2C91               	goto	u621
  1694  0490  2C92               	goto	u620
  1695  0491                     u621:
  1696  0491  2CB5               	goto	l1151
  1697  0492                     u620:
  1698  0492                     l1143:
  1699                           
  1700                           ;lcd.c: 130:   {;lcd.c: 131:     Temp = 0x80 + c - 1;
  1701  0492  0874               	movf	LCD_Set_Cursor@c,w
  1702  0493  3E7F               	addlw	127
  1703  0494  00F5               	movwf	??_LCD_Set_Cursor
  1704  0495  0875               	movf	??_LCD_Set_Cursor,w
  1705  0496  00FA               	movwf	LCD_Set_Cursor@Temp
  1706                           
  1707                           ;lcd.c: 132:     High4 = Temp >> 4;
  1708  0497  087A               	movf	LCD_Set_Cursor@Temp,w
  1709  0498  00F5               	movwf	??_LCD_Set_Cursor
  1710  0499  3004               	movlw	4
  1711  049A                     u635:
  1712  049A  1003               	clrc
  1713  049B  0CF5               	rrf	??_LCD_Set_Cursor,f
  1714  049C  3EFF               	addlw	-1
  1715  049D  1D03               	skipz
  1716  049E  2C9A               	goto	u635
  1717  049F  0875               	movf	??_LCD_Set_Cursor,w
  1718  04A0  00F6               	movwf	??_LCD_Set_Cursor+1
  1719  04A1  0876               	movf	??_LCD_Set_Cursor+1,w
  1720  04A2  00F9               	movwf	LCD_Set_Cursor@High4
  1721  04A3                     l1145:
  1722                           
  1723                           ;lcd.c: 133:     Low4 = Temp & 0x0F;
  1724  04A3  087A               	movf	LCD_Set_Cursor@Temp,w
  1725  04A4  390F               	andlw	15
  1726  04A5  00F5               	movwf	??_LCD_Set_Cursor
  1727  04A6  0875               	movf	??_LCD_Set_Cursor,w
  1728  04A7  00F8               	movwf	LCD_Set_Cursor@Low4
  1729  04A8                     l1147:
  1730                           
  1731                           ;lcd.c: 134:     LCD_CMD(High4);
  1732  04A8  0879               	movf	LCD_Set_Cursor@High4,w
  1733  04A9  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1734  04AE                     l1149:
  1735                           
  1736                           ;lcd.c: 135:     LCD_CMD(Low4);
  1737  04AE  0878               	movf	LCD_Set_Cursor@Low4,w
  1738  04AF  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1739                           
  1740                           ;lcd.c: 136:   }
  1741  04B4  2CDD               	goto	l87
  1742  04B5                     l1151:
  1743  04B5  3002               	movlw	2
  1744  04B6  0677               	xorwf	LCD_Set_Cursor@r,w
  1745  04B7  1D03               	btfss	3,2
  1746  04B8  2CBA               	goto	u641
  1747  04B9  2CBB               	goto	u640
  1748  04BA                     u641:
  1749  04BA  2CDD               	goto	l87
  1750  04BB                     u640:
  1751  04BB                     l1153:
  1752                           
  1753                           ;lcd.c: 138:   {;lcd.c: 139:     Temp = 0xC0 + c - 1;
  1754  04BB  0874               	movf	LCD_Set_Cursor@c,w
  1755  04BC  3EBF               	addlw	191
  1756  04BD  00F5               	movwf	??_LCD_Set_Cursor
  1757  04BE  0875               	movf	??_LCD_Set_Cursor,w
  1758  04BF  00FA               	movwf	LCD_Set_Cursor@Temp
  1759                           
  1760                           ;lcd.c: 140:     High4 = Temp >> 4;
  1761  04C0  087A               	movf	LCD_Set_Cursor@Temp,w
  1762  04C1  00F5               	movwf	??_LCD_Set_Cursor
  1763  04C2  3004               	movlw	4
  1764  04C3                     u655:
  1765  04C3  1003               	clrc
  1766  04C4  0CF5               	rrf	??_LCD_Set_Cursor,f
  1767  04C5  3EFF               	addlw	-1
  1768  04C6  1D03               	skipz
  1769  04C7  2CC3               	goto	u655
  1770  04C8  0875               	movf	??_LCD_Set_Cursor,w
  1771  04C9  00F6               	movwf	??_LCD_Set_Cursor+1
  1772  04CA  0876               	movf	??_LCD_Set_Cursor+1,w
  1773  04CB  00F9               	movwf	LCD_Set_Cursor@High4
  1774  04CC                     l1155:
  1775                           
  1776                           ;lcd.c: 141:     Low4 = Temp & 0x0F;
  1777  04CC  087A               	movf	LCD_Set_Cursor@Temp,w
  1778  04CD  390F               	andlw	15
  1779  04CE  00F5               	movwf	??_LCD_Set_Cursor
  1780  04CF  0875               	movf	??_LCD_Set_Cursor,w
  1781  04D0  00F8               	movwf	LCD_Set_Cursor@Low4
  1782  04D1                     l1157:
  1783                           
  1784                           ;lcd.c: 142:     LCD_CMD(High4);
  1785  04D1  0879               	movf	LCD_Set_Cursor@High4,w
  1786  04D2  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1787  04D7                     l1159:
  1788                           
  1789                           ;lcd.c: 143:     LCD_CMD(Low4);
  1790  04D7  0878               	movf	LCD_Set_Cursor@Low4,w
  1791  04D8  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1792  04DD                     l87:
  1793  04DD  0008               	return
  1794  04DE                     __end_of_LCD_Set_Cursor:
  1795                           
  1796                           	psect	text7
  1797  03F4                     __ptext7:	
  1798 ;; *************** function _LCD_SR *****************
  1799 ;; Defined at:
  1800 ;;		line 163 in file "lcd.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;		None
  1803 ;; Auto vars:     Size  Location     Type
  1804 ;;		None
  1805 ;; Return value:  Size  Location     Type
  1806 ;;                  1    wreg      void 
  1807 ;; Registers used:
  1808 ;;		wreg, status,2, status,0, pclath, cstack
  1809 ;; Tracked objects:
  1810 ;;		On entry : 0/0
  1811 ;;		On exit  : 0/0
  1812 ;;		Unchanged: 0/0
  1813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1814 ;;      Params:         0       0       0       0       0
  1815 ;;      Locals:         0       0       0       0       0
  1816 ;;      Temps:          0       0       0       0       0
  1817 ;;      Totals:         0       0       0       0       0
  1818 ;;Total ram usage:        0 bytes
  1819 ;; Hardware stack levels used: 1
  1820 ;; Hardware stack levels required when called: 2
  1821 ;; This function calls:
  1822 ;;		_LCD_CMD
  1823 ;; This function is called by:
  1824 ;;		_main
  1825 ;; This function uses a non-reentrant model
  1826 ;;
  1827                           
  1828  03F4                     _LCD_SR:	
  1829                           ;psect for function _LCD_SR
  1830                           
  1831  03F4                     l1201:	
  1832                           ;incstack = 0
  1833                           ; Regs used in _LCD_SR: [wreg+status,2+status,0+pclath+cstack]
  1834                           
  1835                           
  1836                           ;lcd.c: 165:   LCD_CMD(0x01);
  1837  03F4  3001               	movlw	1
  1838  03F5  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1839                           
  1840                           ;lcd.c: 166:   LCD_CMD(0x0C);
  1841  03FA  300C               	movlw	12
  1842  03FB  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1843  0400                     l93:
  1844  0400  0008               	return
  1845  0401                     __end_of_LCD_SR:
  1846                           
  1847                           	psect	text8
  1848  03E7                     __ptext8:	
  1849 ;; *************** function _LCD_SL *****************
  1850 ;; Defined at:
  1851 ;;		line 152 in file "lcd.c"
  1852 ;; Parameters:    Size  Location     Type
  1853 ;;		None
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;		None
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, pclath, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1865 ;;      Params:         0       0       0       0       0
  1866 ;;      Locals:         0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0
  1868 ;;      Totals:         0       0       0       0       0
  1869 ;;Total ram usage:        0 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; Hardware stack levels required when called: 2
  1872 ;; This function calls:
  1873 ;;		_LCD_CMD
  1874 ;; This function is called by:
  1875 ;;		_main
  1876 ;; This function uses a non-reentrant model
  1877 ;;
  1878                           
  1879  03E7                     _LCD_SL:	
  1880                           ;psect for function _LCD_SL
  1881                           
  1882  03E7                     l1203:	
  1883                           ;incstack = 0
  1884                           ; Regs used in _LCD_SL: [wreg+status,2+status,0+pclath+cstack]
  1885                           
  1886                           
  1887                           ;lcd.c: 154:   LCD_CMD(0x01);
  1888  03E7  3001               	movlw	1
  1889  03E8  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1890                           
  1891                           ;lcd.c: 155:   LCD_CMD(0x08);
  1892  03ED  3008               	movlw	8
  1893  03EE  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1894  03F3                     l90:
  1895  03F3  0008               	return
  1896  03F4                     __end_of_LCD_SL:
  1897                           
  1898                           	psect	text9
  1899  0531                     __ptext9:	
  1900 ;; *************** function _LCD_Init *****************
  1901 ;; Defined at:
  1902 ;;		line 53 in file "lcd.c"
  1903 ;; Parameters:    Size  Location     Type
  1904 ;;		None
  1905 ;; Auto vars:     Size  Location     Type
  1906 ;;		None
  1907 ;; Return value:  Size  Location     Type
  1908 ;;                  1    wreg      void 
  1909 ;; Registers used:
  1910 ;;		wreg, status,2, status,0, pclath, cstack
  1911 ;; Tracked objects:
  1912 ;;		On entry : 0/0
  1913 ;;		On exit  : 0/0
  1914 ;;		Unchanged: 0/0
  1915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1916 ;;      Params:         0       0       0       0       0
  1917 ;;      Locals:         0       0       0       0       0
  1918 ;;      Temps:          2       0       0       0       0
  1919 ;;      Totals:         2       0       0       0       0
  1920 ;;Total ram usage:        2 bytes
  1921 ;; Hardware stack levels used: 1
  1922 ;; Hardware stack levels required when called: 2
  1923 ;; This function calls:
  1924 ;;		_LCD_CMD
  1925 ;;		_LCD_DATA
  1926 ;; This function is called by:
  1927 ;;		_main
  1928 ;; This function uses a non-reentrant model
  1929 ;;
  1930                           
  1931  0531                     _LCD_Init:	
  1932                           ;psect for function _LCD_Init
  1933                           
  1934  0531                     l1101:	
  1935                           ;incstack = 0
  1936                           ; Regs used in _LCD_Init: [wreg+status,2+status,0+pclath+cstack]
  1937                           
  1938                           
  1939                           ;lcd.c: 56:   TRISD = 0x00;
  1940  0531  1683               	bsf	3,5	;RP0=1, select bank1
  1941  0532  1303               	bcf	3,6	;RP1=0, select bank1
  1942  0533  0188               	clrf	8	;volatile
  1943  0534                     l1103:
  1944                           
  1945                           ;lcd.c: 57:   TRISD2 = 0;
  1946  0534  1108               	bcf	8,2	;volatile
  1947  0535                     l1105:
  1948                           
  1949                           ;lcd.c: 58:   TRISD3 = 0;
  1950  0535  1188               	bcf	8,3	;volatile
  1951  0536                     l1107:
  1952                           
  1953                           ;lcd.c: 60:   LCD_DATA(0x00);
  1954  0536  3000               	movlw	0
  1955  0537  120A  118A  2417  120A  118A  	fcall	_LCD_DATA
  1956  053C                     l1109:
  1957                           
  1958                           ;lcd.c: 61:   _delay((unsigned long)((30)*(20000000/4000.0)));
  1959  053C  30C3               	movlw	195
  1960  053D  00F5               	movwf	??_LCD_Init+1
  1961  053E  30CD               	movlw	205
  1962  053F  00F4               	movwf	??_LCD_Init
  1963  0540                     u807:
  1964  0540  0BF4               	decfsz	??_LCD_Init,f
  1965  0541  2D40               	goto	u807
  1966  0542  0BF5               	decfsz	??_LCD_Init+1,f
  1967  0543  2D40               	goto	u807
  1968  0544                     l1111:
  1969                           
  1970                           ;lcd.c: 62:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  1971  0544  3004               	movlw	4
  1972  0545  00F5               	movwf	??_LCD_Init+1
  1973  0546  303D               	movlw	61
  1974  0547  00F4               	movwf	??_LCD_Init
  1975  0548                     u817:
  1976  0548  0BF4               	decfsz	??_LCD_Init,f
  1977  0549  2D48               	goto	u817
  1978  054A  0BF5               	decfsz	??_LCD_Init+1,f
  1979  054B  2D48               	goto	u817
  1980  054C  2D4D               	nop2
  1981  054D                     l1113:
  1982                           
  1983                           ;lcd.c: 63:   LCD_CMD(0x03);
  1984  054D  3003               	movlw	3
  1985  054E  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  1986  0553                     l1115:
  1987                           
  1988                           ;lcd.c: 64:   _delay((unsigned long)((5)*(20000000/4000.0)));
  1989  0553  3021               	movlw	33
  1990  0554  00F5               	movwf	??_LCD_Init+1
  1991  0555  3076               	movlw	118
  1992  0556  00F4               	movwf	??_LCD_Init
  1993  0557                     u827:
  1994  0557  0BF4               	decfsz	??_LCD_Init,f
  1995  0558  2D57               	goto	u827
  1996  0559  0BF5               	decfsz	??_LCD_Init+1,f
  1997  055A  2D57               	goto	u827
  1998  055B  0000               	nop
  1999  055C                     l1117:
  2000                           
  2001                           ;lcd.c: 65:   LCD_CMD(0x03);
  2002  055C  3003               	movlw	3
  2003  055D  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2004  0562                     l1119:
  2005                           
  2006                           ;lcd.c: 66:   _delay((unsigned long)((150)*(20000000/4000000.0)));
  2007  0562  30F9               	movlw	249
  2008  0563  00F4               	movwf	??_LCD_Init
  2009  0564                     u837:
  2010  0564  0BF4               	decfsz	??_LCD_Init,f
  2011  0565  2D64               	goto	u837
  2012  0566  2D67               	nop2
  2013  0567                     l1121:
  2014                           
  2015                           ;lcd.c: 67:   LCD_CMD(0x03);
  2016  0567  3003               	movlw	3
  2017  0568  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2018  056D                     l1123:
  2019                           
  2020                           ;lcd.c: 68:   LCD_CMD(0x02);
  2021  056D  3002               	movlw	2
  2022  056E  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2023  0573                     l1125:
  2024                           
  2025                           ;lcd.c: 69:   LCD_CMD(0x02);
  2026  0573  3002               	movlw	2
  2027  0574  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2028  0579                     l1127:
  2029                           
  2030                           ;lcd.c: 70:   LCD_CMD(0x08);
  2031  0579  3008               	movlw	8
  2032  057A  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2033  057F                     l1129:
  2034                           
  2035                           ;lcd.c: 71:   LCD_CMD(0x00);
  2036  057F  3000               	movlw	0
  2037  0580  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2038  0585                     l1131:
  2039                           
  2040                           ;lcd.c: 72:   LCD_CMD(0x0C);
  2041  0585  300C               	movlw	12
  2042  0586  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2043  058B                     l1133:
  2044                           
  2045                           ;lcd.c: 73:   LCD_CMD(0x00);
  2046  058B  3000               	movlw	0
  2047  058C  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2048  0591                     l1135:
  2049                           
  2050                           ;lcd.c: 74:   LCD_CMD(0x06);
  2051  0591  3006               	movlw	6
  2052  0592  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2053  0597                     l69:
  2054  0597  0008               	return
  2055  0598                     __end_of_LCD_Init:
  2056                           
  2057                           	psect	text10
  2058  0401                     __ptext10:	
  2059 ;; *************** function _LCD_Clear *****************
  2060 ;; Defined at:
  2061 ;;		line 110 in file "lcd.c"
  2062 ;; Parameters:    Size  Location     Type
  2063 ;;		None
  2064 ;; Auto vars:     Size  Location     Type
  2065 ;;		None
  2066 ;; Return value:  Size  Location     Type
  2067 ;;                  1    wreg      void 
  2068 ;; Registers used:
  2069 ;;		wreg, status,2, status,0, pclath, cstack
  2070 ;; Tracked objects:
  2071 ;;		On entry : 0/0
  2072 ;;		On exit  : 0/0
  2073 ;;		Unchanged: 0/0
  2074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2075 ;;      Params:         0       0       0       0       0
  2076 ;;      Locals:         0       0       0       0       0
  2077 ;;      Temps:          2       0       0       0       0
  2078 ;;      Totals:         2       0       0       0       0
  2079 ;;Total ram usage:        2 bytes
  2080 ;; Hardware stack levels used: 1
  2081 ;; Hardware stack levels required when called: 2
  2082 ;; This function calls:
  2083 ;;		_LCD_CMD
  2084 ;; This function is called by:
  2085 ;;		_main
  2086 ;; This function uses a non-reentrant model
  2087 ;;
  2088                           
  2089  0401                     _LCD_Clear:	
  2090                           ;psect for function _LCD_Clear
  2091                           
  2092  0401                     l1137:	
  2093                           ;incstack = 0
  2094                           ; Regs used in _LCD_Clear: [wreg+status,2+status,0+pclath+cstack]
  2095                           
  2096                           
  2097                           ;lcd.c: 112:     LCD_CMD(0);
  2098  0401  3000               	movlw	0
  2099  0402  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2100                           
  2101                           ;lcd.c: 113:     LCD_CMD(1);
  2102  0407  3001               	movlw	1
  2103  0408  120A  118A  245E  120A  118A  	fcall	_LCD_CMD
  2104  040D                     l1139:
  2105                           
  2106                           ;lcd.c: 114:     _delay((unsigned long)((2)*(20000000/4000.0)));
  2107  040D  300D               	movlw	13
  2108  040E  00F5               	movwf	??_LCD_Clear+1
  2109  040F  30FB               	movlw	251
  2110  0410  00F4               	movwf	??_LCD_Clear
  2111  0411                     u847:
  2112  0411  0BF4               	decfsz	??_LCD_Clear,f
  2113  0412  2C11               	goto	u847
  2114  0413  0BF5               	decfsz	??_LCD_Clear+1,f
  2115  0414  2C11               	goto	u847
  2116  0415  2C16               	nop2
  2117  0416                     l81:
  2118  0416  0008               	return
  2119  0417                     __end_of_LCD_Clear:
  2120                           
  2121                           	psect	text11
  2122  045E                     __ptext11:	
  2123 ;; *************** function _LCD_CMD *****************
  2124 ;; Defined at:
  2125 ;;		line 30 in file "lcd.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;  CMD             1    wreg     unsigned char 
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;  CMD             1    3[COMMON] unsigned char 
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  1    wreg      void 
  2132 ;; Registers used:
  2133 ;;		wreg, status,2, status,0, pclath, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : 0/0
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2139 ;;      Params:         0       0       0       0       0
  2140 ;;      Locals:         1       0       0       0       0
  2141 ;;      Temps:          2       0       0       0       0
  2142 ;;      Totals:         3       0       0       0       0
  2143 ;;Total ram usage:        3 bytes
  2144 ;; Hardware stack levels used: 1
  2145 ;; Hardware stack levels required when called: 1
  2146 ;; This function calls:
  2147 ;;		_LCD_DATA
  2148 ;; This function is called by:
  2149 ;;		_LCD_Init
  2150 ;;		_LCD_Clear
  2151 ;;		_LCD_Set_Cursor
  2152 ;;		_LCD_SL
  2153 ;;		_LCD_SR
  2154 ;; This function uses a non-reentrant model
  2155 ;;
  2156                           
  2157  045E                     _LCD_CMD:	
  2158                           ;psect for function _LCD_CMD
  2159                           
  2160                           
  2161                           ;incstack = 0
  2162                           ; Regs used in _LCD_CMD: [wreg+status,2+status,0+pclath+cstack]
  2163                           ;LCD_CMD@CMD stored from wreg
  2164  045E  00F3               	movwf	LCD_CMD@CMD
  2165  045F                     l991:
  2166                           
  2167                           ;lcd.c: 30: void LCD_CMD(unsigned char CMD);lcd.c: 31: {;lcd.c: 33:   RD2 = 0;
  2168  045F  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0460  1303               	bcf	3,6	;RP1=0, select bank0
  2170  0461  1108               	bcf	8,2	;volatile
  2171  0462                     l993:
  2172                           
  2173                           ;lcd.c: 35:   LCD_DATA(CMD);
  2174  0462  0873               	movf	LCD_CMD@CMD,w
  2175  0463  120A  118A  2417  120A  118A  	fcall	_LCD_DATA
  2176  0468                     l995:
  2177                           
  2178                           ;lcd.c: 37:   RD3 = 1;
  2179  0468  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0469  1303               	bcf	3,6	;RP1=0, select bank0
  2181  046A  1588               	bsf	8,3	;volatile
  2182  046B                     l997:
  2183                           
  2184                           ;lcd.c: 39:   if(CMD<=0x02)
  2185  046B  3003               	movlw	3
  2186  046C  0273               	subwf	LCD_CMD@CMD,w
  2187  046D  1803               	skipnc
  2188  046E  2C70               	goto	u411
  2189  046F  2C71               	goto	u410
  2190  0470                     u411:
  2191  0470  2C7B               	goto	l1001
  2192  0471                     u410:
  2193  0471                     l999:
  2194                           
  2195                           ;lcd.c: 40:   {;lcd.c: 41:       _delay((unsigned long)((2)*(20000000/4000.0)));
  2196  0471  300D               	movlw	13
  2197  0472  00F2               	movwf	??_LCD_CMD+1
  2198  0473  30FB               	movlw	251
  2199  0474  00F1               	movwf	??_LCD_CMD
  2200  0475                     u857:
  2201  0475  0BF1               	decfsz	??_LCD_CMD,f
  2202  0476  2C75               	goto	u857
  2203  0477  0BF2               	decfsz	??_LCD_CMD+1,f
  2204  0478  2C75               	goto	u857
  2205  0479  2C7A               	nop2
  2206                           
  2207                           ;lcd.c: 42:   }else{
  2208  047A  2C7F               	goto	l65
  2209  047B                     l1001:
  2210                           
  2211                           ;lcd.c: 43:       _delay((unsigned long)((50)*(20000000/4000000.0)));
  2212  047B  3053               	movlw	83
  2213  047C  00F1               	movwf	??_LCD_CMD
  2214  047D                     u867:
  2215  047D  0BF1               	decfsz	??_LCD_CMD,f
  2216  047E  2C7D               	goto	u867
  2217  047F                     l65:	
  2218                           ;lcd.c: 44:   }
  2219                           
  2220                           
  2221                           ;lcd.c: 45:   _delay((unsigned long)((500)*(20000000/4000000.0)));
  2222  047F  3004               	movlw	4
  2223  0480  00F2               	movwf	??_LCD_CMD+1
  2224  0481  303D               	movlw	61
  2225  0482  00F1               	movwf	??_LCD_CMD
  2226  0483                     u877:
  2227  0483  0BF1               	decfsz	??_LCD_CMD,f
  2228  0484  2C83               	goto	u877
  2229  0485  0BF2               	decfsz	??_LCD_CMD+1,f
  2230  0486  2C83               	goto	u877
  2231  0487  2C88               	nop2
  2232  0488                     l1003:
  2233                           
  2234                           ;lcd.c: 46:   RD3 = 0;
  2235  0488  1283               	bcf	3,5	;RP0=0, select bank0
  2236  0489  1303               	bcf	3,6	;RP1=0, select bank0
  2237  048A  1188               	bcf	8,3	;volatile
  2238  048B                     l66:
  2239  048B  0008               	return
  2240  048C                     __end_of_LCD_CMD:
  2241                           
  2242                           	psect	text12
  2243  0417                     __ptext12:	
  2244 ;; *************** function _LCD_DATA *****************
  2245 ;; Defined at:
  2246 ;;		line 7 in file "lcd.c"
  2247 ;; Parameters:    Size  Location     Type
  2248 ;;  Data            1    wreg     unsigned char 
  2249 ;; Auto vars:     Size  Location     Type
  2250 ;;  Data            1    0[COMMON] unsigned char 
  2251 ;; Return value:  Size  Location     Type
  2252 ;;                  1    wreg      void 
  2253 ;; Registers used:
  2254 ;;		wreg
  2255 ;; Tracked objects:
  2256 ;;		On entry : 0/0
  2257 ;;		On exit  : 0/0
  2258 ;;		Unchanged: 0/0
  2259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2260 ;;      Params:         0       0       0       0       0
  2261 ;;      Locals:         1       0       0       0       0
  2262 ;;      Temps:          0       0       0       0       0
  2263 ;;      Totals:         1       0       0       0       0
  2264 ;;Total ram usage:        1 bytes
  2265 ;; Hardware stack levels used: 1
  2266 ;; This function calls:
  2267 ;;		Nothing
  2268 ;; This function is called by:
  2269 ;;		_LCD_CMD
  2270 ;;		_LCD_Init
  2271 ;;		_LCD_Write_Char
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275  0417                     _LCD_DATA:	
  2276                           ;psect for function _LCD_DATA
  2277                           
  2278                           
  2279                           ;incstack = 0
  2280                           ; Regs used in _LCD_DATA: [wreg]
  2281                           ;LCD_DATA@Data stored from wreg
  2282  0417  00F0               	movwf	LCD_DATA@Data
  2283  0418                     l981:
  2284                           
  2285                           ;lcd.c: 7: void LCD_DATA(unsigned char Data);lcd.c: 8: {;lcd.c: 9:   if(Data & 1)
  2286  0418  1C70               	btfss	LCD_DATA@Data,0
  2287  0419  2C1B               	goto	u371
  2288  041A  2C1C               	goto	u370
  2289  041B                     u371:
  2290  041B  2C20               	goto	l53
  2291  041C                     u370:
  2292  041C                     l983:
  2293                           
  2294                           ;lcd.c: 10:     RD4 = 1;
  2295  041C  1283               	bcf	3,5	;RP0=0, select bank0
  2296  041D  1303               	bcf	3,6	;RP1=0, select bank0
  2297  041E  1608               	bsf	8,4	;volatile
  2298  041F  2C23               	goto	l54
  2299  0420                     l53:	
  2300                           ;lcd.c: 11:   else
  2301                           
  2302                           
  2303                           ;lcd.c: 12:     RD4 = 0;
  2304  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0422  1208               	bcf	8,4	;volatile
  2307  0423                     l54:
  2308                           
  2309                           ;lcd.c: 13:   if(Data & 2)
  2310  0423  1CF0               	btfss	LCD_DATA@Data,1
  2311  0424  2C26               	goto	u381
  2312  0425  2C27               	goto	u380
  2313  0426                     u381:
  2314  0426  2C29               	goto	l55
  2315  0427                     u380:
  2316  0427                     l985:
  2317                           
  2318                           ;lcd.c: 14:     RD5 = 1;
  2319  0427  1688               	bsf	8,5	;volatile
  2320  0428  2C2A               	goto	l56
  2321  0429                     l55:	
  2322                           ;lcd.c: 15:   else
  2323                           
  2324                           
  2325                           ;lcd.c: 16:     RD5 = 0;
  2326  0429  1288               	bcf	8,5	;volatile
  2327  042A                     l56:
  2328                           
  2329                           ;lcd.c: 17:   if(Data & 4)
  2330  042A  1D70               	btfss	LCD_DATA@Data,2
  2331  042B  2C2D               	goto	u391
  2332  042C  2C2E               	goto	u390
  2333  042D                     u391:
  2334  042D  2C30               	goto	l57
  2335  042E                     u390:
  2336  042E                     l987:
  2337                           
  2338                           ;lcd.c: 18:     RD6 = 1;
  2339  042E  1708               	bsf	8,6	;volatile
  2340  042F  2C31               	goto	l58
  2341  0430                     l57:	
  2342                           ;lcd.c: 19:   else
  2343                           
  2344                           
  2345                           ;lcd.c: 20:     RD6 = 0;
  2346  0430  1308               	bcf	8,6	;volatile
  2347  0431                     l58:
  2348                           
  2349                           ;lcd.c: 21:   if(Data & 8)
  2350  0431  1DF0               	btfss	LCD_DATA@Data,3
  2351  0432  2C34               	goto	u401
  2352  0433  2C35               	goto	u400
  2353  0434                     u401:
  2354  0434  2C37               	goto	l59
  2355  0435                     u400:
  2356  0435                     l989:
  2357                           
  2358                           ;lcd.c: 22:     RD7 = 1;
  2359  0435  1788               	bsf	8,7	;volatile
  2360  0436  2C38               	goto	l61
  2361  0437                     l59:	
  2362                           ;lcd.c: 23:   else
  2363                           
  2364                           
  2365                           ;lcd.c: 24:     RD7 = 0;
  2366  0437  1388               	bcf	8,7	;volatile
  2367  0438                     l61:
  2368  0438  0008               	return
  2369  0439                     __end_of_LCD_DATA:
  2370  007E                     btemp	set	126	;btemp
  2371  007E                     wtemp0	set	126

Data Sizes:
    Strings     8
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80     42      42
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    LCD_Write_String@str	PTR unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[8]), 


Critical Paths under _main in COMMON

    _main->_LCD_Write_Number
    _LCD_Write_String->_LCD_Write_Char
    _LCD_Write_Number->___almod
    _LCD_Write_Char->_LCD_DATA
    _LCD_Set_Cursor->_LCD_CMD
    _LCD_SR->_LCD_CMD
    _LCD_SL->_LCD_CMD
    _LCD_Init->_LCD_CMD
    _LCD_Clear->_LCD_CMD
    _LCD_CMD->_LCD_DATA

Critical Paths under _main in BANK0

    _main->_LCD_Write_Number
    _LCD_Write_Number->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    3394
                                             35 BANK0      7     7      0
                          _LCD_Clear
                           _LCD_Init
                             _LCD_SL
                             _LCD_SR
                     _LCD_Set_Cursor
                   _LCD_Write_Number
                   _LCD_Write_String
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_String                                     3     3      0     334
                                              6 COMMON     3     3      0
                     _LCD_Write_Char
 ---------------------------------------------------------------------------------
 (1) _LCD_Write_Number                                    31    27      4    1570
                                             11 COMMON     2     2      0
                                              6 BANK0     29    25      4
                     _LCD_Write_Char
                            ___aldiv
                            ___almod
 ---------------------------------------------------------------------------------
 (2) ___almod                                             11     3      8     448
                                              0 COMMON    11     3      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     452
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Char                                       5     5      0     178
                                              1 COMMON     5     5      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Set_Cursor                                       7     6      1     782
                                              4 COMMON     7     6      1
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SR                                               0     0      0     132
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_SL                                               0     0      0     132
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     220
                                              4 COMMON     2     2      0
                            _LCD_CMD
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (1) _LCD_Clear                                            2     2      0     132
                                              4 COMMON     2     2      0
                            _LCD_CMD
 ---------------------------------------------------------------------------------
 (2) _LCD_CMD                                              3     3      0     132
                                              1 COMMON     3     3      0
                           _LCD_DATA
 ---------------------------------------------------------------------------------
 (3) _LCD_DATA                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_Clear
     _LCD_CMD
       _LCD_DATA
   _LCD_Init
     _LCD_CMD
     _LCD_DATA
   _LCD_SL
     _LCD_CMD
   _LCD_SR
     _LCD_CMD
   _LCD_Set_Cursor
     _LCD_CMD
   _LCD_Write_Number
     _LCD_Write_Char
       _LCD_DATA
     ___aldiv
     ___almod
   _LCD_Write_String
     _LCD_Write_Char

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     2A      2A       5       52.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Sat Jun 04 17:07:27 2022

                       pc 0002                        l61 0438                        l53 0420  
                      l54 0423                        l55 0429                        l56 042A  
                      l72 0530                        l57 0430                        l65 047F  
                      l81 0416                        l58 0431                        l66 048B  
                      l90 03F3                        l59 0437                        l69 0597  
                      l93 0400                        l78 045D                        l87 04DD  
                      fsr 0004                       l104 07FB                       l264 0631  
                     l274 06B9                       l277 05AA                       l287 061C  
                     l981 0418                       l983 041C                       l991 045F  
                     l985 0427                       l993 0462                       l987 042E  
                     l995 0468                       l989 0435                       l997 046B  
                     l999 0471                       _RD2 0042                       _RD3 0043  
                     _RD4 0044                       _RD5 0045                       _RD6 0046  
                     _RD7 0047                       u400 0435                       u401 0434  
                     u410 0471                       u411 0470                       u510 06A1  
                     u430 0624                       u511 06A0                       u431 0623  
                     u520 06A6                       u440 0635                       u600 0604  
                     u425 04EF                       u521 06A5                       u505 0693  
                     u441 0634                       u601 0603                       u370 041C  
                     u450 0654                       u610 0609                       u530 059D  
                     u371 041B                       u451 0653                       u611 0608  
                     u531 059C                       u380 0427                       u620 0492  
                     u540 05AE                       u700 07E0                       u381 0426  
                     u621 0491                       u541 05AD                       u701 07DF  
                     u390 042E                       u470 0668                       u550 05C1  
                     u710 0727                       u391 042D                       u471 0667  
                     u551 05C0                       u711 0726                       u640 04BB  
                     u720 0753                       u641 04BA                       u465 0659  
                     u721 0752                       u490 0683                       u570 05D5  
                     u635 049A                       u491 0682                       u571 05D4  
                     u715 0723                       u580 05E7                       u660 045D  
                     u485 066A                       u581 05E6                       u565 05C6  
                     u661 045C                       u725 074F                       u670 0765  
                     u807 0540                       u655 04C3                       u495 067F  
                     u671 0764                       u680 0779                       u817 0548  
                     u585 05E3                       u681 0778                       u737 06F5  
                     u690 07D6                       u827 0557                       u595 05F6  
                     u691 07D5                       u747 0707                       u837 0564  
                     u693 07D2                       u757 0733                       u847 0411  
                     u767 0501                       u857 0475                       u777 050D  
                     u867 047D                       u787 051F                       u877 0483  
                     u797 052B                       fsr0 0004                       indf 0000  
         __end_of_LCD_CMD 048C            _LCD_Set_Cursor 048C                      l1001 047B  
                    l1003 0488                      l1011 04FA                      l1101 0531  
                    l1021 0518                      l1013 04FD                      l1005 04DF  
                    l1111 0544                      l1103 0534                      l1023 051B  
                    l1015 0506                      l1007 04E9                      l1031 0620  
                    l1121 0567                      l1113 054D                      l1105 0535  
                    l1201 03F4                      l1025 0524                      l1017 0509  
                    l1009 04EC                      l1041 064C                      l1033 0624  
                    l1131 0585                      l1123 056D                      l1115 0553  
                    l1107 0536                      l1203 03E7                      l1027 0527  
                    l1019 0512                      l1051 0671                      l1043 0654  
                    l1035 0635                      l1211 06C8                      l1133 058B  
                    l1125 0573                      l1117 055C                      l1109 053C  
                    l1141 048D                      l1053 0683                      l1045 0657  
                    l1061 06A1                      l1037 0640                      l1029 061D  
                    l1213 06D0                      l1205 06BA                      l1135 0591  
                    l1127 0579                      l1119 0562                      l1143 0492  
                    l1151 04B5                      l1063 06A6                      l1055 0691  
                    l1047 0664                      l1039 0644                      l1071 0599  
                    l1231 071A                      l1215 06D6                      l1207 06BE  
                    l1137 0401                      l1129 057F                      l1153 04BB  
                    l1145 04A3                      l1065 06B1                      l1057 0692  
                    l1049 0668                      l1081 05C4                      l1073 059D  
                    l1161 043A                      l1241 0739                      l1233 0727  
                    l1225 06FF                      l1217 06DE                      l1209 06C3  
                    l1139 040D                      l1155 04CC                      l1147 04A8  
                    l1059 069B                      l1091 05FE                      l1083 05D1  
                    l1075 05AE                      l1171 0765                      l1163 043D  
                    l1243 073E                      l1227 070D                      l1219 06FB  
                    l1157 04D1                      l1149 04AE                      l1085 05D5  
                    l1093 0604                      l1077 05B9                      l1069 0598  
                    l1181 0782                      l1173 076A                      l1165 044A  
                    l1245 0746                      l1229 0712                      l1159 04D7  
                    l1095 0609                      l1087 05E7                      l1079 05C1  
                    l1183 07A4                      l1175 0771                      l1167 0450  
                    l1239 072B                      l1097 0614                      l1089 05F5  
                    l1193 07E1                      l1185 07C3                      l1169 0757  
                    l1195 07EC                      l1187 07D6                      l1179 077A  
                    l1197 07F2                      l1189 07DC       LCD_Write_String@str 0078  
                    STR_1 0009         ?_LCD_Write_Number 0026         ?_LCD_Write_String 0070  
                    _main 06BA                      btemp 007E        ??_LCD_Write_Number 007B  
                    start 0000        ??_LCD_Write_String 0076          __end_of_LCD_DATA 0439  
        __end_of_LCD_Init 0598           __end_of___aldiv 06BA           __end_of___almod 061D  
                   ?_main 0070                     _TRISD 0088    __end_of_LCD_Set_Cursor 04DE  
                   main@i 0046                     pclath 000A                     status 0003  
                   wtemp0 007E            _LCD_Write_Char 04DE           __initialization 07FC  
            __end_of_main 0757                    ??_main 0043         __end_of_LCD_Clear 0417  
               ??_LCD_CMD 0071           ?_LCD_Set_Cursor 0074                    _ADCON1 009F  
                  _LCD_SL 03E7                    _LCD_SR 03F4                    _TRISD2 0442  
                  _TRISD3 0443    __end_of_LCD_Write_Char 0531                 ??___aldiv 0078  
               ??___almod 0078           LCD_Set_Cursor@c 0074           LCD_Set_Cursor@r 0077  
               ?_LCD_DATA 0070   __end_of__initialization 07FC                 ?_LCD_Init 0070  
         ?_LCD_Write_Char 0070            __pcstackCOMMON 0070                   ?_LCD_SL 0070  
                 ?_LCD_SR 0070                ??_LCD_DATA 0070                ??_LCD_Init 0074  
              __pmaintext 06BA                   _LCD_CMD 045E                __stringtab 0003  
                 ___aldiv 061D                   ___almod 0598          ??_LCD_Set_Cursor 0075  
                 __ptext1 0439                   __ptext2 0757                   __ptext3 0598  
                 __ptext4 061D                   __ptext5 04DE                   __ptext6 048C  
                 __ptext7 03F4                   __ptext8 03E7                   __ptext9 0531  
        ___aldiv@dividend 0074                 _LCD_Clear 0401      end_of_initialization 07FC  
        ___aldiv@quotient 0022                LCD_CMD@CMD 0073         LCD_Write_Number@c 0040  
       LCD_Write_Number@p 0041                ?_LCD_Clear 0070         LCD_Write_String@i 0076  
        ??_LCD_Write_Char 0071            __end_of_LCD_SL 03F4            __end_of_LCD_SR 0401  
        _LCD_Write_Number 0757          _LCD_Write_String 0439       start_initialization 07FC  
                ??_LCD_SL 0074                  ??_LCD_SR 0074                  ?_LCD_CMD 0070  
               ___latbits 0002             __pcstackBANK0 0020               ??_LCD_Clear 0074  
                ?___aldiv 0070                  ?___almod 0070          ___almod@dividend 0074  
               __pstrings 0003                  _LCD_DATA 0417           ___aldiv@divisor 0070  
         ___aldiv@counter 0020                  _LCD_Init 0531               __stringbase 0008  
__end_of_LCD_Write_Number 07FC  __end_of_LCD_Write_String 045E       LCD_Write_Char@High4 0074  
      __end_of__stringtab 0009                  __ptext10 0401                  __ptext11 045E  
                __ptext12 0417           ___almod@divisor 0070           ___almod@counter 0079  
  LCD_Write_Number@length 003E       LCD_Set_Cursor@High4 0079                  main@i_68 0048  
  LCD_Write_Number@number 0026        LCD_Write_Char@Data 0075        LCD_Write_Char@Low4 0073  
               stringcode 0003        LCD_Set_Cursor@Low4 0078        LCD_Set_Cursor@Temp 007A  
            LCD_DATA@Data 0070                  stringdir 0003                  stringtab 0003  
            ___aldiv@sign 0021              ___almod@sign 007A       LCD_Write_Number@num 002A  
